<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Nathan Goldbaum</title>
		<link>https://ngoldbaum.github.io/</link>
		<description>Recent content on Nathan Goldbaum</description>
		<generator>Hugo 0.143.1</generator>
		<language>en-us</language>
		<lastBuildDate>Fri, 26 Jul 2019 14:17:19 -0400</lastBuildDate>
		<atom:link href="https://ngoldbaum.github.io/index.xml" rel="self" type="application/rss+xml"/>
		<item>
			<title>About</title>
			<link>https://ngoldbaum.github.io/about/</link>
			<pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
			<guid isPermaLink="true">https://ngoldbaum.github.io/about/</guid>
			<description>


&lt;div class=&#34;center-image&#34;&gt;
  &lt;img
    src=&#34;https://ngoldbaum.github.io/ngoldbaum2019.jpg&#34;
    alt=&#34;Nathan Goldbaum&#34;
    /&gt;
&lt;/div&gt;

&lt;p&gt;I am a Senior Software Engineer at &lt;a href=&#34;https://labs.quansight.org&#34;&gt;Quansight Labs&lt;/a&gt;,
where I am currently working on &lt;a href=&#34;https://py-free-threading.github.io&#34;&gt;community support for free-threaded
Python&lt;/a&gt;. During the course of this project,
I led the effort to support &lt;a href=&#34;https://docs.python.org/3/whatsnew/3.13.html#whatsnew313-free-threaded-cpython&#34;&gt;free-threaded
Python&lt;/a&gt;
in &lt;a href=&#34;https://numpy.org/&#34;&gt;NumPy&lt;/a&gt; and helped add support for free-threaded Python
to foundational community Python projects accross the ecosystem. I also am the
author or editor of most of the documentation on
&lt;a href=&#34;https://py-free-threading.github.io&#34;&gt;py-free-threading.github.io&lt;/a&gt;, which I hope
will be a lasting community resource.&lt;/p&gt;
&lt;p&gt;After shipping &lt;a href=&#34;https://numpy.org/devdocs/release/2.1.0-notes.html&#34;&gt;NumPy
2.1&lt;/a&gt; with support for the
free-threaded build, I moved onto &lt;a href=&#34;https://pyo3.rs&#34;&gt;PyO3&lt;/a&gt; and led the effort to
ship support for building thread-safe Rust extensions for use with the
free-threaded build in &lt;a href=&#34;https://github.com/PyO3/pyo3/releases/tag/v0.23.0&#34;&gt;PyO3
0.23&lt;/a&gt;. I have also been
fixing bugs in NumPy reported by the community. As a foundational library it&amp;rsquo;s
important that NumPy be usable on the free-threaded build and I am excited to
already hear about preliminary use-cases that demonstrate the raw compute power
unlocked by the free-threaded build.&lt;/p&gt;
&lt;p&gt;I will be giving a talk about my experience over the course of 2024 and 2025
with free-threaded Python at PyCon 2025. Stay tuned for more information about that!&lt;/p&gt;
&lt;p&gt;Before working on free-threaded Python, I shipped support for &lt;a href=&#34;https://numpy.org/devdocs/user/basics.strings.html#variable-width-strings&#34;&gt;UTF-8
variable-length string
arrays&lt;/a&gt;
in &lt;a href=&#34;https://numpy.org/devdocs/release/2.0.0-notes.html&#34;&gt;NumPy 2.0&lt;/a&gt; and helped
lead the wider community effort to ship the first major release of NumPy in more
than a decade. I championed a UTF-8 string DType as the major new feature of
NumPy 2.0 and authored &lt;a href=&#34;https://numpy.org/neps/nep-0055-string_dtype.html&#34;&gt;NEP
55&lt;/a&gt; to argue that the
community should accept the new feature. This in-depth design process led to a
number of radical improvements to the initial design. I described my experience
going from very little low-level Python C API experience to becoming a NumPy
maintainer in a &lt;a href=&#34;https://www.youtube.com/watch?v=cUhP0OCSWsk&#34;&gt;talk at the Scipy 2024
conference&lt;/a&gt;. The talk was
transcribed into a blog post on &lt;a href=&#34;https://quansight.com/post/my-numpy-year-creating-a-dtype-for-the-next-generation-of-scientific-computing/&#34;&gt;the Quansight
blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I took time off from work on software From March 2020 to October 2022 to help
support my family and to recover from burnout.&lt;/p&gt;
&lt;p&gt;After a stint at the &lt;a href=&#34;https://recurse.com&#34;&gt;Recurse Center&lt;/a&gt; in 2019, I took at
job at Quansight where I worked on &lt;a href=&#34;https://pytorch.org&#34;&gt;PyTorch&lt;/a&gt;. At the time,
the Quansight PyTorch team helped the Meta PyTorch team to identify and fix bugs
reported by the community and to lead projects implementing features heavily
requested by the community. I fixed a number of bugs in PyTorch and shipped &lt;a href=&#34;https://pytorch.org/docs/stable/notes/extending.html#extending-torch-python-api&#34;&gt;the
&lt;code&gt;__torch_function__&lt;/code&gt;
mechanism&lt;/a&gt;
for easily overriding and extending PyTorch in libraries that wrap PyTorch
tensors.&lt;/p&gt;
&lt;p&gt;My time at the Recurse Center focused on improving my facility with the Rust
programming language. You can read the blog posts I wrote there on this blog
about my efforts to implement a Rust client for the
&lt;a href=&#34;https://www.mercurial-scm.org&#34;&gt;Mercurial&lt;/a&gt; distributed version control system.&lt;/p&gt;
&lt;p&gt;My academic career ended as a a research scientist at the University of
Illinois&amp;rsquo; &lt;a href=&#34;http://www.ncsa.illinois.edu/&#34;&gt;National Center for Supercomputing
Applications&lt;/a&gt; in the &lt;a href=&#34;https://data-exp-lab.github.io/&#34;&gt;Data Exploration
Lab&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At that time, I was a maintainer of The &lt;a href=&#34;https://yt-project.org&#34;&gt;&lt;code&gt;yt&lt;/code&gt;&lt;/a&gt; Project,
a Python toolkit for working with 3D simulation data. As a member of the &lt;code&gt;yt&lt;/code&gt;
steering committee, I helped bring &lt;code&gt;yt&lt;/code&gt; under the umbrella of
&lt;a href=&#34;https://numfocus.org/project/yt&#34;&gt;NumFOCUS&lt;/a&gt;. I also helped write, publish, and
maintain &lt;a href=&#34;https://github.com/yt-project/unyt/&#34;&gt;&lt;code&gt;unyt&lt;/code&gt;&lt;/a&gt;, a library for handling
data with physical units in Python. I published &lt;a href=&#34;https://joss.theoj.org/papers/dbc27acb614dd33eb02b029ef20e7fe7&#34;&gt;a
paper&lt;/a&gt; in the
Journal of Open Source Software describing the library, its origins, and
comparing performance and software engineering decisions with competing Python
libraries.&lt;/p&gt;
&lt;p&gt;In the past I worked on &lt;a href=&#34;https://ytep.readthedocs.io/en/master/YTEPs/YTEP-0032.html&#34;&gt;improving scaling and performance&lt;/a&gt; when working with
gigabyte and terabyte-scale particle datasets in
&lt;code&gt;yt&lt;/code&gt; and shared my
experience with the community in &lt;a href=&#34;https://www.youtube.com/watch?v=pkZgQIGac6I&#34;&gt;a SciPy conference
talk&lt;/a&gt; in 2017. I am also the
original author of the &lt;code&gt;PlotWindow&lt;/code&gt; plotting interface that makes opinionated
styling decisions to make it possible to quickly generate publication-quality
visualizations of simulation data using an API based on what the data physically
represent rather than how the data are laid out on-disk. I described the
philosophy behind &lt;code&gt;PlotWindow&lt;/code&gt; as a domain-specific visualization tool in a
&lt;a href=&#34;https://www.youtube.com/watch?v=Fd4TDoyQffw&#34;&gt;2016 talk at the PlotCon
conference&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;During my PhD I
&lt;a href=&#34;https://ui.adsabs.harvard.edu/abs/2015ApJ...814..131G/abstract&#34;&gt;ran&lt;/a&gt;
&lt;a href=&#34;https://ui.adsabs.harvard.edu/abs/2016ApJ...827...28G/abstract&#34;&gt;simulations&lt;/a&gt; of
Milky-Way like disk galaxies to understand how global properties of disk
galaxies influence the formation of stellar nurseries and how the energy
deposited by newborn massive stars feeds back to global disk scales, creating a
steady-state system much like our galaxy has experienced for billions of
years. The data and &lt;a href=&#34;https://bitbucket.org/ngoldbaum/galaxy_analysis/src/default/&#34;&gt;analysis
software&lt;/a&gt; and raw
simulation data used in my thesis are &lt;a href=&#34;https://girder.hub.yt/#collection/573647d3dd9119000164acf0&#34;&gt;publicly
available&lt;/a&gt;. I
described the process of publicly releasing a large tranche of data in &lt;a href=&#34;https://www.youtube.com/watch?v=zb0HBu3IhbU&#34;&gt;a
talk&lt;/a&gt; at the Python in Astronomy
conference. I &lt;a href=&#34;https://youtu.be/nzr2vMQqiug?t=358&#34;&gt;also talked&lt;/a&gt; about exporting
simulation data into a Minecraft server.&lt;/p&gt;
</description>
		</item>
		<item>
			<title>Python vs Rust for Neural Networks</title>
			<link>https://ngoldbaum.github.io/posts/python-vs-rust-nn/</link>
			<pubDate>Fri, 26 Jul 2019 14:17:19 -0400</pubDate>
			<guid isPermaLink="true">https://ngoldbaum.github.io/posts/python-vs-rust-nn/</guid>
			<description>&lt;p&gt;In &lt;a href=&#34;https://ngoldbaum.github.io/posts/loading-mnist-data-in-rust/&#34;&gt;a previous
post&lt;/a&gt; I
introduced the MNIST dataset and the problem of classifying handwritten
digits. In this post I&amp;rsquo;ll be using the code I wrote in that post to port a
simple neural network implementation to rust. My goal is to explore performance
and ergonomics for data science workflows in rust.&lt;/p&gt;
&lt;h2 id=&#34;the-python-implementation&#34;&gt;The Python Implementation&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://neuralnetworksanddeeplearning.com/chap1.html&#34;&gt;Chapter 1&lt;/a&gt; of the book
describes a very simple single-layer Neural Network that can classify
handwritten digits from the &lt;a href=&#34;http://yann.lecun.com/exdb/mnist/&#34;&gt;MNIST dataset&lt;/a&gt;
using a learning algorithm based on &lt;a href=&#34;https://en.wikipedia.org/wiki/Stochastic_gradient_descent&#34;&gt;stochastic gradient
descent&lt;/a&gt;. This sounds
complicated &amp;mdash; and it kind of is, this stuff was state-of-the-art in the mid
1980s &amp;mdash; but really it all comes down to about &lt;a href=&#34;https://github.com/mnielsen/neural-networks-and-deep-learning/blob/master/src/network.py&#34;&gt;150 lines of heavily commented
Python
code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m going to assume that you already know the content of that chapter so stop
here and go read that if you want to brush up on neural network basics. Or don&amp;rsquo;t
and just pay attention to the code, it&amp;rsquo;s not super important to understand the
details of exactly why the code works the way it does to see the differences
between the Python approach and the Rust approach.&lt;/p&gt;
&lt;p&gt;The fundamental data container in this code is a &lt;code&gt;Network&lt;/code&gt; class that represents
a neural network with a user-controllable number of layers and number of neurons
per layer. The data for the &lt;code&gt;Network&lt;/code&gt; class are represented internally as lists
of 2D NumPy arrays. Each layer of the network is represented as a 2D array of
weights and 1D array of biases, contained in attributes of the &lt;code&gt;Network&lt;/code&gt; class
named &lt;code&gt;biases&lt;/code&gt; and &lt;code&gt;weights&lt;/code&gt;. These are both lists of 2D arrays. The biases
are column vectors but are still stored as 2D arrays by making use of a &lt;a href=&#34;https://stackoverflow.com/questions/17428621/python-differentiating-between-row-and-column-vectors&#34;&gt;dummy
dimension&lt;/a&gt;.
The initializer for the &lt;code&gt;Network&lt;/code&gt; class looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Network&lt;/span&gt;(object):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, sizes):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;The list ``sizes`` contains the number of neurons in the
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        respective layers of the network.  For example, if the list
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        was [2, 3, 1] then it would be a three-layer network, with the
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        first layer containing 2 neurons, the second layer 3 neurons,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        and the third layer 1 neuron.  The biases and weights for the
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        network are initialized randomly, using a Gaussian
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        distribution with mean 0, and variance 1.  Note that the first
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        layer is assumed to be an input layer, and by convention we
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        won&amp;#39;t set any biases for those neurons, since biases are only
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        ever used in computing the outputs from later layers.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num_layers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(sizes)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sizes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sizes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;biases &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randn(y, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; sizes[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;weights &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randn(y, x)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x, y &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(sizes[:&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], sizes[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:])]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this simple implementation the weights and biases are initialized by drawing
from the standard normal distribution &amp;mdash; a normal distribution with a mean of
zero, standard deviation of 1. We can also see how the biases are explicitly
initialized as column vectors.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Network&lt;/code&gt; class exposes two methods that users would call directly. First,
the &lt;code&gt;evaluate&lt;/code&gt; method, which asks the network to try to identify the digits in a
set of test images and then scores the result based on the &lt;em&gt;a priori&lt;/em&gt; known
correct answer. Second, the &lt;code&gt;SGD&lt;/code&gt; method runs a stochastic gradient descent
learning procedure by iterating over a set of images, breaking up the full set
of images into small mini-batches, updating the network&amp;rsquo;s state based on each
mini-batch of images and a user-specifiable learning rate, &lt;code&gt;eta&lt;/code&gt;, and then
re-running the training procedure for a new randomly selected set of
mini-batches for a user-specifiable number of &lt;em&gt;epochs&lt;/em&gt;. The core of the
algorithm, where each mini-batch and the state of the neural network gets
updated, looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;update_mini_batch&lt;/span&gt;(self, mini_batch, eta):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Update the network&amp;#39;s weights and biases by applying
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    gradient descent using backpropagation to a single mini batch.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    The ``mini_batch`` is a list of tuples ``(x, y)``, and ``eta``
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    is the learning rate.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nabla_b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zeros(b&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;biases]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nabla_w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zeros(w&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;weights]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x, y &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; mini_batch:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        delta_nabla_b, delta_nabla_w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;backprop(x, y)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        nabla_b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [nb&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;dnb &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; nb, dnb &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(nabla_b, delta_nabla_b)]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        nabla_w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [nw&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;dnw &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; nw, dnw &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(nabla_w, delta_nabla_w)]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;weights &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [w&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;(eta&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;len(mini_batch))&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;nw
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; w, nw &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;weights, nabla_w)]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;biases &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [b&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;(eta&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;len(mini_batch))&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;nb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; b, nb &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;biases, nabla_b)]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For each training image in the mini-batch, we accumulate estimates for the
gradient of the cost function via backpropagation (implemented in the &lt;code&gt;backprop&lt;/code&gt;
function). Once we exhaust the mini-batch, we adjust the weights and biases
according to the estimated gradients. The update includes &lt;code&gt;len(mini_batch)&lt;/code&gt; in
the denominator because we want the average gradient over all the estimates in
the mini-batch. We can also control how fast the weights and biases get updated
by adjusting the learning rate, &lt;code&gt;eta&lt;/code&gt;, which globally modulates how big the
updates from each mini-batch can be.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;backprop&lt;/code&gt; function calculates the cost gradient for the neural network by
starting with the expected output of the network given the input image and then
working backward through the network to propagate the error in the network
through the layers. This requires a substantial amount of data munging, and its
where I spent most of my time porting the code to rust but I think it&amp;rsquo;s a little
too long to dive into in depth here, take a look at &lt;a href=&#34;http://neuralnetworksanddeeplearning.com/chap2.html&#34;&gt;chapter
2&lt;/a&gt; of the book if you want
more detail.&lt;/p&gt;
&lt;h2 id=&#34;the-rust-implementation&#34;&gt;The Rust Implementation&lt;/h2&gt;
&lt;p&gt;The first step here was to figure out how to load the data. That ended up being
fiddly enough that I decided to break that off into its &lt;a href=&#34;https://ngoldbaum.github.io/posts/loading-mnist-data-in-rust/&#34;&gt;own
post&lt;/a&gt;. With that
sorted I then had to figure out how to represent the Python &lt;code&gt;Network&lt;/code&gt; class in
rust. I ended up deciding to use a struct:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; ndarray::Array2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[derive(Debug)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Network&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    num_layers: &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sizes: Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    biases: Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Array2&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;f64&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    weights: Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Array2&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;f64&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The struct gets initialized with the number of neurons in each layer in much the
same way as the Python implementation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; rand::distributions::StandardNormal;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; ndarray::{Array, Array2};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; ndarray_rand::RandomExt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;impl&lt;/span&gt; Network {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt;(sizes: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;]) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Network&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; num_layers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sizes.len();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; biases: Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Array2&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;f64&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Vec::new();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; weights: Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Array2&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;f64&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Vec::new();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;num_layers {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            biases.push(Array::random((sizes[i], &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), StandardNormal));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            weights.push(Array::random((sizes[i], sizes[i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]), StandardNormal));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Network {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            num_layers: &lt;span style=&#34;color:#a6e22e&#34;&gt;num_layers&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            sizes: &lt;span style=&#34;color:#a6e22e&#34;&gt;sizes&lt;/span&gt;.to_owned(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            biases: &lt;span style=&#34;color:#a6e22e&#34;&gt;biases&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            weights: &lt;span style=&#34;color:#a6e22e&#34;&gt;weights&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;One difference is that in Python we used
&lt;a href=&#34;https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.randn.html&#34;&gt;&lt;code&gt;numpy.random.randn&lt;/code&gt;&lt;/a&gt;
to initialize the biases and weights while in rust we use the
&lt;code&gt;ndarray::Array::random&lt;/code&gt; function which accepts a
&lt;code&gt;rand::distribution::Distribution&lt;/code&gt;as a parameter, allowing the choice of an
arbitrary distribution.  In this case we used the
&lt;code&gt;rand::distributions::StandardNormal&lt;/code&gt; distribution.  It&amp;rsquo;s worth noting that this
uses an interface defined in three different crates, two of which &amp;mdash; &lt;code&gt;ndarray&lt;/code&gt;
itself and &lt;code&gt;ndarray-rand&lt;/code&gt; &amp;mdash; are maintained by the &lt;code&gt;ndarray&lt;/code&gt; authors, and
another &amp;mdash; &lt;code&gt;rand&lt;/code&gt; &amp;mdash; maintained by a different set of developers.&lt;/p&gt;
&lt;h3 id=&#34;the-merits-of-monolithic-packages&#34;&gt;The merits of monolithic packages&lt;/h3&gt;
&lt;p&gt;In principle it&amp;rsquo;s nice that random number generation is not isolated inside the
&lt;code&gt;ndarray&lt;/code&gt; codebase and if new random number distributions or capabilities are
added to &lt;code&gt;rand&lt;/code&gt;, &lt;code&gt;ndarray&lt;/code&gt; and all other crates in the rust ecosystem that need
random numbers can benefit equally. On the other hand it does add some cognitive
overhead to need to refer between the documentation for the various crates
instead of having a single centralized place to look. In my particular case I
also got a little unlucky and happened to do this project right after &lt;code&gt;rand&lt;/code&gt;
made a release that changed its public API. This led to an incompatibility
between &lt;code&gt;ndarray-rand&lt;/code&gt;, which depended on version 0.6 of &lt;code&gt;rand&lt;/code&gt;, and my project which
declared a dependency on version 0.7.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;d heard that &lt;code&gt;cargo&lt;/code&gt; and rust&amp;rsquo;s build system handle this sort of problem
really well but at least in this case I was presented with a confusing error
message about how the random number distribution I was passing in didn&amp;rsquo;t satisfy
the &lt;code&gt;Distribution&lt;/code&gt; trait. While this is true &amp;mdash; it satisfied the &lt;code&gt;Distribution&lt;/code&gt;
trait from &lt;code&gt;rand 0.7&lt;/code&gt; but not the one from &lt;code&gt;rand 0.6&lt;/code&gt; that &lt;code&gt;ndarray-rand&lt;/code&gt;
expected &amp;mdash; it is extremely confusing because the version numbers of the
various crates don&amp;rsquo;t show up in the error message. I ended up reporting this as
&lt;a href=&#34;https://github.com/rust-ndarray/ndarray/issues/658&#34;&gt;an issue&lt;/a&gt;. I discovered
there that these confusing error messages from crates with incompatible APIs is
&lt;a href=&#34;https://github.com/rust-lang/rust/issues/22750&#34;&gt;a long-standing issue&lt;/a&gt; for the
rust language. Hopefully in the future rust can grow more helpful error
messages.&lt;/p&gt;
&lt;p&gt;In the end this separation of concerns caused a lot of friction for me as a new
user. In Python I could have simply done &lt;code&gt;import numpy&lt;/code&gt; and be done. I do think
that NumPy probably went a bit too far in the direction of being completely
monolithic &amp;mdash; it was originally written at a time when packaging and
distributing Python code with C extensions was much harder than it is today &amp;mdash;
I do think that going too far in the other extreme can make a language or
ecosystem of tools harder to learn.&lt;/p&gt;
&lt;h3 id=&#34;types-and-ownership&#34;&gt;Types and ownership&lt;/h3&gt;
&lt;p&gt;The next bit I&amp;rsquo;ll show in detail is the rust version of &lt;code&gt;update_mini_batch&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;impl&lt;/span&gt; Network {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;update_mini_batch&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; self,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        training_data: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;[MnistImage],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mini_batch_indices: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        eta: &lt;span style=&#34;color:#66d9ef&#34;&gt;f64&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; nabla_b: Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Array2&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;f64&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; zero_vec_like(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;self.biases);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; nabla_w: Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Array2&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;f64&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; zero_vec_like(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;self.weights);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; mini_batch_indices {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; (delta_nabla_b, delta_nabla_w) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self.backprop(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;training_data[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;i]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (nb, dnb) &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; nabla_b.iter_mut().zip(delta_nabla_b.iter()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;nb &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; dnb;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (nw, dnw) &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; nabla_w.iter_mut().zip(delta_nabla_w.iter()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;nw &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; dnw;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; nbatch &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mini_batch_indices.len() &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;f64&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (w, nw) &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; self.weights.iter_mut().zip(nabla_w.iter()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;w &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;nw.mapv(&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; eta &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; nbatch);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (b, nb) &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; self.biases.iter_mut().zip(nabla_b.iter()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;nb.mapv(&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; eta &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; nbatch);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The function makes use of two short helper functions I defined that makes this a little
less verbose:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to_tuple&lt;/span&gt;(inp: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;]) -&amp;gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; inp {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        [a, b] &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _ &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; panic!(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;zero_vec_like&lt;/span&gt;(inp: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;[Array2&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;f64&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;]) -&amp;gt; Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Array2&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;f64&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    inp.iter()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .map(&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; Array2::zeros(to_tuple(x.shape())))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .collect()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Comparing with the Python implementation the interface for calling
&lt;code&gt;update_mini_batch&lt;/code&gt; is a little different. Rather than passing in a list of
objects directly, instead of I pass in a reference to the full set of training
data and a slice of indices to consider within that full set. This ended up
being a little easier to reason about without triggering the borrow checker.&lt;/p&gt;
&lt;p&gt;Creating &lt;code&gt;nabla_b&lt;/code&gt; and &lt;code&gt;nabla_w&lt;/code&gt; in &lt;code&gt;zero_vec_like&lt;/code&gt; is very similar to the list
comprehension we used in Python. There is one wrinkle that caused me some
frustration which is that if I try to create a zero-filled array with
&lt;code&gt;Array2::zeros&lt;/code&gt; and pass it a slice or &lt;code&gt;Vec&lt;/code&gt; for the shape, I get back an &lt;code&gt;ArrayD&lt;/code&gt;
instance. To get an &lt;code&gt;Array2&lt;/code&gt; &amp;mdash; that is explicitly a 2D array and not a generic
D-dimensional array &amp;mdash; I need to pass a tuple to &lt;code&gt;Array::zeros&lt;/code&gt;. However, since
&lt;code&gt;ndarray::shape&lt;/code&gt; returns a slice, I need to convert the slice to a tuple
manually using the &lt;code&gt;to_tuple&lt;/code&gt; function. This sort of thing can be glossed over
in Python but in rust the difference between a tuple and slice can be very
important, as in this API.&lt;/p&gt;
&lt;p&gt;The code to estimate the updates for the weights and biases via backpropagation
has a very similar structure to the python implementation. We train each example
image in the mini-batch and obtain estimates for the gradient of the quadratic cost
as a function of the biases and weights:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; (delta_nabla_b, delta_nabla_w) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self.backprop(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;training_data[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;i]);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and then accumulate these estimates:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (nb, dnb) &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; nabla_b.iter_mut().zip(delta_nabla_b.iter()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;nb &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; dnb;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (nw, dnw) &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; nabla_w.iter_mut().zip(delta_nabla_w.iter()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;nw &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; dnw;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once we&amp;rsquo;ve finished processing the mini-batch, we update the weights and biases,
modulated by the learning rate:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; nbatch &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mini_batch_indices.len() &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;f64&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (w, nw) &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; self.weights.iter_mut().zip(nabla_w.iter()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;w &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;nw.mapv(&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; eta &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; nbatch);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (b, nb) &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; self.biases.iter_mut().zip(nabla_b.iter()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;nb.mapv(&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; eta &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; nbatch);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This example illustrates how the ergonomics of working with array data is very
different in Rust compared with Python. First, rather than multiplying the array
by the float &lt;code&gt;eta / nbatch&lt;/code&gt;, we instead use &lt;code&gt;Array::mapv&lt;/code&gt; and define a closure
in-line to map in a vectorized manner over the full array. This sort of thing
would not be very fast in Python because function calls are very slow. In rust
it doesn&amp;rsquo;t make much difference. We also need to borrow the return value of
&lt;code&gt;mapv&lt;/code&gt; with &lt;code&gt;&amp;amp;&lt;/code&gt; when we subtract, lest we consume the array data while we
iterate over it. Needing to think carefully about whether functions consume data
or take references makes it much more conceptually demanding to write code like
this in Rust than in Python. On the other hand I do have much higher confidence
that my code is correct when it compiles. I&amp;rsquo;m not sure whether the fact that
this code was so demanding for me to write is due to Rust really being harder to
write or the disparity between my experience in Rust and Python.&lt;/p&gt;
&lt;h2 id=&#34;rewrite-it-in-rust-and-everything-will-be-better&#34;&gt;Rewrite it in rust and everything will be better&lt;/h2&gt;
&lt;p&gt;At this point I was left with something that was faster than the unoptimized
Python version I had started with. However, instead of a 10x or better speedup
that one might expect moving from a dynamic, interpreted language like Python to
a compiled performance-oriented language like rust, I only observed about a 2x
improvement. To understand why I decided to measure the performance of the rust
code. Luckily there is a very nice project that makes it easy to generate flame
graphs for rust projects:
&lt;a href=&#34;https://github.com/ferrous-systems/flamegraph&#34;&gt;flamegraph&lt;/a&gt;. This adds a
&lt;code&gt;flamegraph&lt;/code&gt; subcommand to &lt;code&gt;cargo&lt;/code&gt;, so one needs only to do &lt;code&gt;cargo flamegraph&lt;/code&gt;
in a crate, it will run the code, and then write a flamegraph &lt;code&gt;svg&lt;/code&gt; file one can
inspect with a web browser.&lt;/p&gt;
&lt;figure&gt;
&lt;?xml version=&#34;1.0&#34; standalone=&#34;no&#34;?&gt;&lt;!DOCTYPE svg PUBLIC &#34;-//W3C//DTD SVG 1.1//EN&#34; &#34;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&#34;&gt;&lt;svg version=&#34;1.1&#34; width=&#34;900&#34; height=&#34;600&#34; onload=&#34;init(evt)&#34; viewBox=&#34;0 0 1200 790&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; xmlns:xlink=&#34;http://www.w3.org/1999/xlink&#34;&gt;&lt;!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--&gt;&lt;defs&gt;&lt;linearGradient id=&#34;background&#34; y1=&#34;0&#34; y2=&#34;1&#34; x1=&#34;0&#34; x2=&#34;0&#34;&gt;&lt;stop stop-color=&#34;#eeeeee&#34; offset=&#34;5%&#34;/&gt;&lt;stop stop-color=&#34;#eeeeb0&#34; offset=&#34;95%&#34;/&gt;&lt;/linearGradient&gt;&lt;/defs&gt;&lt;style type=&#34;text/css&#34;&gt;.func_g:hover { stroke:black; stroke-width:0.5; cursor:pointer; }&lt;/style&gt;&lt;script type=&#34;text/ecmascript&#34;&gt;&lt;![CDATA[var nametype = &#39;Function:&#39;;
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = &#39;rgb(230,0,230)&#39;;]]&gt;&lt;![CDATA[var details, searchbtn, matchedtxt, svg;
function init(evt) {
    details = document.getElementById(&#34;details&#34;).firstChild;
    searchbtn = document.getElementById(&#34;search&#34;);
    matchedtxt = document.getElementById(&#34;matched&#34;);
    svg = document.getElementsByTagName(&#34;svg&#34;)[0];
    searching = 0;
}
// mouse-over for info
function s(node) {		// show
    info = g_to_text(node);
    details.nodeValue = nametype + &#34; &#34; + info;
}
function c() {			// clear
    details.nodeValue = &#39; &#39;;
}
// functions
function find_child(parent, name, attr) {
    var children = parent.childNodes;
    for (var i=0; i&lt;children.length;i++) {
        if (children[i].tagName == name)
            return (attr != undefined) ? children[i].attributes[attr].value : children[i];
    }
    return;
}
function orig_save(e, attr, val) {
    if (e.attributes[&#34;_orig_&#34;+attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute(&#34;_orig_&#34;+attr, val);
}
function orig_load(e, attr) {
    if (e.attributes[&#34;_orig_&#34;+attr] == undefined) return;
    e.attributes[attr].value = e.attributes[&#34;_orig_&#34;+attr].value;
    e.removeAttribute(&#34;_orig_&#34;+attr);
}
function g_to_text(e) {
    var text = find_child(e, &#34;title&#34;).firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there&#39;s any manipulation we want to do to the function
    // name before it&#39;s searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, &#34;rect&#34;);
    var t = find_child(e, &#34;text&#34;);
    var w = parseFloat(r.attributes[&#34;width&#34;].value) -3;
    var txt = find_child(e, &#34;title&#34;).textContent.replace(/\\([^(]*\\)\$/,&#34;&#34;);
    t.attributes[&#34;x&#34;].value = parseFloat(r.attributes[&#34;x&#34;].value) +3;
    // Smaller than this size won&#39;t fit anything
    if (w &lt; 2*fontsize*fontwidth) {
        t.textContent = &#34;&#34;;
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) &lt; w)
        return;
    for (var x=txt.length-2; x&gt;0; x--) {
        if (t.getSubStringLength(0, x+2) &lt;= w) {
            t.textContent = txt.substring(0,x) + &#34;..&#34;;
            return;
        }
    }
    t.textContent = &#34;&#34;;
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, &#34;x&#34;);
        orig_load(e, &#34;width&#34;);
    }
    if (e.childNodes == undefined) return;
    for(var i=0, c=e.childNodes; i&lt;c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes[&#34;x&#34;] != undefined) {
            orig_save(e, &#34;x&#34;);
            e.attributes[&#34;x&#34;].value = (parseFloat(e.attributes[&#34;x&#34;].value) - x - xpad) * ratio + xpad;
            if(e.tagName == &#34;text&#34;) e.attributes[&#34;x&#34;].value = find_child(e.parentNode, &#34;rect&#34;, &#34;x&#34;) + 3;
        }
        if (e.attributes[&#34;width&#34;] != undefined) {
            orig_save(e, &#34;width&#34;);
            e.attributes[&#34;width&#34;].value = parseFloat(e.attributes[&#34;width&#34;].value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i=0, c=e.childNodes; i&lt;c.length; i++) {
        zoom_child(c[i], x-xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes[&#34;x&#34;] != undefined) {
            orig_save(e, &#34;x&#34;);
            e.attributes[&#34;x&#34;].value = xpad;
        }
        if (e.attributes[&#34;width&#34;] != undefined) {
            orig_save(e, &#34;width&#34;);
            e.attributes[&#34;width&#34;].value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i=0, c=e.childNodes; i&lt;c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, &#34;rect&#34;).attributes;
    var width = parseFloat(attr[&#34;width&#34;].value);
    var xmin = parseFloat(attr[&#34;x&#34;].value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr[&#34;y&#34;].value);
    var ratio = (svg.width.baseVal.value - 2*xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    var unzoombtn = document.getElementById(&#34;unzoom&#34;);
    unzoombtn.style[&#34;opacity&#34;] = &#34;1.0&#34;;
    var el = document.getElementsByTagName(&#34;g&#34;);
    for(var i=0;i&lt;el.length;i++){
        var e = el[i];
        var a = find_child(e, &#34;rect&#34;).attributes;
        var ex = parseFloat(a[&#34;x&#34;].value);
        var ew = parseFloat(a[&#34;width&#34;].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a[&#34;y&#34;].value) &gt; ymin;
        } else {
            var upstack = parseFloat(a[&#34;y&#34;].value) &lt; ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex &lt;= xmin &amp;&amp; (ex+ew+fudge) &gt;= xmax) {
                e.style[&#34;opacity&#34;] = &#34;0.5&#34;;
                zoom_parent(e);
                e.onclick = function(e){unzoom(); zoom(this);};
                update_text(e);
            }
            // not in current path
            else
                e.style[&#34;display&#34;] = &#34;none&#34;;
        }
        // Children maybe
        else {
            // no common path
            if (ex &lt; xmin || ex + fudge &gt;= xmax) {
                e.style[&#34;display&#34;] = &#34;none&#34;;
            }
            else {
                zoom_child(e, xmin, ratio);
                e.onclick = function(e){zoom(this);};
                update_text(e);
            }
        }
    }
}
function unzoom() {
    var unzoombtn = document.getElementById(&#34;unzoom&#34;);
    unzoombtn.style[&#34;opacity&#34;] = &#34;0.0&#34;;
    var el = document.getElementsByTagName(&#34;g&#34;);
    for(i=0;i&lt;el.length;i++) {
        el[i].style[&#34;display&#34;] = &#34;block&#34;;
        el[i].style[&#34;opacity&#34;] = &#34;1&#34;;
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.getElementsByTagName(&#34;rect&#34;);
    for (var i=0; i &lt; el.length; i++) {
        orig_load(el[i], &#34;fill&#34;)
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt(&#34;Enter a search term (regexp &#34; +
            &#34;allowed, eg: ^ext4_)&#34;, &#34;&#34;);
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.style[&#34;opacity&#34;] = &#34;0.1&#34;;
        searchbtn.firstChild.nodeValue = &#34;Search&#34;
        matchedtxt.style[&#34;opacity&#34;] = &#34;0.0&#34;;
        matchedtxt.firstChild.nodeValue = &#34;&#34;
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementsByTagName(&#34;g&#34;);
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i &lt; el.length; i++) {
        var e = el[i];
        if (e.attributes[&#34;class&#34;].value != &#34;func_g&#34;)
            continue;
        var func = g_to_func(e);
        var rect = find_child(e, &#34;rect&#34;);
        if (rect == null) {
            // the rect might be wrapped in an anchor
            // if nameattr href is being used
            if (rect = find_child(e, &#34;a&#34;)) {
                rect = find_child(r, &#34;rect&#34;);
            }
        }
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes[&#34;width&#34;].value);
        if (w &gt; maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes[&#34;x&#34;].value);
            orig_save(rect, &#34;fill&#34;);
            rect.attributes[&#34;fill&#34;].value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w &gt; matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.style[&#34;opacity&#34;] = &#34;1.0&#34;;
    searchbtn.firstChild.nodeValue = &#34;Reset Search&#34;
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x &gt;= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.style[&#34;opacity&#34;] = &#34;1.0&#34;;
    pct = 100 * count / maxwidth;
    if (pct == 100)
        pct = &#34;100&#34;
    else
        pct = pct.toFixed(1)
    matchedtxt.firstChild.nodeValue = &#34;Matched: &#34; + pct + &#34;%&#34;;
}
function searchover(e) {
    searchbtn.style[&#34;opacity&#34;] = &#34;1.0&#34;;
}
function searchout(e) {
    if (searching) {
        searchbtn.style[&#34;opacity&#34;] = &#34;1.0&#34;;
    } else {
        searchbtn.style[&#34;opacity&#34;] = &#34;0.1&#34;;
    }
}
]]&gt;&lt;/script&gt;&lt;rect x=&#34;0&#34; y=&#34;0&#34; width=&#34;1200&#34; height=&#34;790&#34; fill=&#34;url(#background)&#34;/&gt;&lt;text text-anchor=&#34;middle&#34; x=&#34;600.00&#34; y=&#34;24.00&#34; font-size=&#34;17&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;Flame Graph&lt;/text&gt;&lt;text id=&#34;details&#34; text-anchor=&#34;left&#34; x=&#34;10.00&#34; y=&#34;773.00&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt; &lt;/text&gt;&lt;text id=&#34;unzoom&#34; onclick=&#34;unzoom()&#34; style=&#34;opacity:0.0;cursor:pointer&#34; text-anchor=&#34;left&#34; x=&#34;10.00&#34; y=&#34;24.00&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;Reset Zoom&lt;/text&gt;&lt;text id=&#34;search&#34; onmouseover=&#34;searchover()&#34; onmouseout=&#34;searchout()&#34; onclick=&#34;search_prompt()&#34; style=&#34;opacity:0.1;cursor:pointer&#34; text-anchor=&#34;left&#34; x=&#34;1090.00&#34; y=&#34;24.00&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;Search&lt;/text&gt;&lt;text id=&#34;matched&#34; text-anchor=&#34;left&#34; x=&#34;1090.00&#34; y=&#34;773.00&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt; &lt;/text&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt;&amp;gt;::extend_from_slice (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;11&#34; y=&#34;645&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(209,117,32)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;14.00&#34; y=&#34;655.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt; as alloc::vec::SpecExtend&amp;lt;&amp;amp;&amp;apos;a T, core::slice::Iter&amp;lt;&amp;apos;a, T&amp;gt;&amp;gt;&amp;gt;::spec_extend (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;11&#34; y=&#34;629&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(248,58,35)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;14.00&#34; y=&#34;639.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::slice::&amp;lt;impl [T]&amp;gt;::copy_from_slice (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;11&#34; y=&#34;613&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(231,170,52)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;14.00&#34; y=&#34;623.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;11&#34; y=&#34;597&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(241,63,7)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;14.00&#34; y=&#34;607.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt; as core::clone::Clone&amp;gt;::clone (4 samples, 0.08%)&lt;/title&gt;&lt;rect x=&#34;11&#34; y=&#34;693&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(214,182,18)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;14.00&#34; y=&#34;703.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;alloc::slice::&amp;lt;impl [T]&amp;gt;::to_vec (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;11&#34; y=&#34;677&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(208,194,45)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;14.00&#34; y=&#34;687.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;alloc::slice::hack::to_vec (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;11&#34; y=&#34;661&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(208,38,25)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;14.00&#34; y=&#34;671.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt;&amp;gt;::with_capacity (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;11&#34; y=&#34;645&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(232,27,21)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;14.00&#34; y=&#34;655.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T&amp;gt;&amp;gt;::with_capacity (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;11&#34; y=&#34;629&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(248,218,0)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;14.00&#34; y=&#34;639.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T, A&amp;gt;&amp;gt;::allocate_in (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;11&#34; y=&#34;613&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(210,61,51)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;14.00&#34; y=&#34;623.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::alloc::Global as core::alloc::Alloc&amp;gt;::alloc (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;11&#34; y=&#34;597&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(231,11,7)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;14.00&#34; y=&#34;607.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;alloc::alloc::alloc (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;11&#34; y=&#34;581&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(231,192,35)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;14.00&#34; y=&#34;591.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;core::iter::adapters::Map&amp;lt;I, F&amp;gt; as core::iter::traits::iterator::Iterator&amp;gt;::fold (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;12&#34; y=&#34;693&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(233,90,46)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;15.00&#34; y=&#34;703.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::unordered_foreach_mut (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;12&#34; y=&#34;693&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(209,193,15)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;15.00&#34; y=&#34;703.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;ndarray::layout::Layout as ndarray::layout::LayoutPriv&amp;gt;::is (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;12&#34; y=&#34;661&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(227,153,10)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;15.00&#34; y=&#34;671.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;ndarray::zip::Zip&amp;lt; (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;12&#34; y=&#34;693&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(232,5,12)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;15.00&#34; y=&#34;703.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;ndarray::zip::Zip&amp;lt;P, D&amp;gt;&amp;gt;::apply_core (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;12&#34; y=&#34;677&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(237,213,3)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;15.00&#34; y=&#34;687.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;ndarray::zip::Zip&amp;lt;P, D&amp;gt;&amp;gt;::apply_core_strided (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;12&#34; y=&#34;661&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(230,218,51)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;15.00&#34; y=&#34;671.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;_$LT$ndarray..zip..Zip$LT$$LP$P1$C$$u20$P2$RP$$C$$u20$D$GT$$GT$::apply::_$u7b$$u7b$closure$u7d$$u7d$::h2b06b61a54da618f (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;12&#34; y=&#34;645&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(209,45,28)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;15.00&#34; y=&#34;655.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::_$LT$impl$u20$ndarray..ArrayBase$LT$S$C$$u20$D$GT$$GT$::zip_mut_with_by_rows::_$u7b$$u7b$closure$u7d$$u7d$::hf8de37080ae87286 (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;12&#34; y=&#34;629&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(239,9,37)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;15.00&#34; y=&#34;639.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;ndarray::zip::Zip&amp;lt; (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;12&#34; y=&#34;613&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(206,22,37)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;15.00&#34; y=&#34;623.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;ndarray::ArrayBase&amp;lt;ndarray::ViewRepr&amp;lt;&amp;amp;&amp;apos;a mut A&amp;gt;, D&amp;gt; as ndarray::zip::NdProducer&amp;gt;::layout (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;12&#34; y=&#34;597&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(226,172,22)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;15.00&#34; y=&#34;607.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::zip::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::layout_impl (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;12&#34; y=&#34;581&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(234,181,2)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;15.00&#34; y=&#34;591.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::is_standard_layout (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;12&#34; y=&#34;565&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(239,102,17)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;15.00&#34; y=&#34;575.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;12&#34; y=&#34;693&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(223,5,33)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;15.00&#34; y=&#34;703.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;12&#34; y=&#34;677&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(210,37,14)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;15.00&#34; y=&#34;687.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;12&#34; y=&#34;661&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(231,38,29)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;15.00&#34; y=&#34;671.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;12&#34; y=&#34;645&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(254,169,44)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;15.00&#34; y=&#34;655.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;12&#34; y=&#34;629&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(246,115,28)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;15.00&#34; y=&#34;639.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;12&#34; y=&#34;613&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(214,182,34)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;15.00&#34; y=&#34;623.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;12&#34; y=&#34;597&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(214,228,10)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;15.00&#34; y=&#34;607.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;13&#34; y=&#34;581&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(224,63,28)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;16.00&#34; y=&#34;591.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;13&#34; y=&#34;565&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(210,125,39)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;16.00&#34; y=&#34;575.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;13&#34; y=&#34;549&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(206,159,41)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;16.00&#34; y=&#34;559.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;13&#34; y=&#34;533&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(207,19,30)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;16.00&#34; y=&#34;543.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[libc-2.27.so] (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;13&#34; y=&#34;693&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(219,79,42)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;16.00&#34; y=&#34;703.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[libm-2.27.so] (4 samples, 0.08%)&lt;/title&gt;&lt;rect x=&#34;14&#34; y=&#34;693&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(243,199,50)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;17.00&#34; y=&#34;703.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;__rdl_realloc (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;15&#34; y=&#34;693&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(246,64,28)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;18.00&#34; y=&#34;703.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;realloc (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;15&#34; y=&#34;677&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(247,201,52)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;18.00&#34; y=&#34;687.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;cfree (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;15&#34; y=&#34;693&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(215,87,52)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;18.00&#34; y=&#34;703.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;dgemm_oncopy_HASWELL (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;15&#34; y=&#34;693&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(246,17,52)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;18.00&#34; y=&#34;703.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;expf64 (4 samples, 0.08%)&lt;/title&gt;&lt;rect x=&#34;16&#34; y=&#34;693&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(217,170,52)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;19.00&#34; y=&#34;703.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::is_standard_layout::is_standard_layout (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;17&#34; y=&#34;693&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(231,104,22)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;20.00&#34; y=&#34;703.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_ops::arithmetic_ops::&amp;lt;impl core::ops::arith::Neg for &amp;amp;&amp;apos;a ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::neg (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;17&#34; y=&#34;693&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(251,110,12)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;20.00&#34; y=&#34;703.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_ops::assign_ops::&amp;lt;impl core::ops::arith::AddAssign&amp;lt;&amp;amp;&amp;apos;a ndarray::ArrayBase&amp;lt;S2, E&amp;gt;&amp;gt; for ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::add_assign (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;17&#34; y=&#34;693&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(243,102,28)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;20.00&#34; y=&#34;703.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (30 samples, 0.58%)&lt;/title&gt;&lt;rect x=&#34;11&#34; y=&#34;709&#34; width=&#34;6&#34; height=&#34;15&#34; fill=&#34;rgb(210,102,25)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;14.00&#34; y=&#34;719.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::linalg::impl_linalg::mat_mul_impl (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;17&#34; y=&#34;693&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(242,171,50)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;20.00&#34; y=&#34;703.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[ld-2.27.so] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;17&#34; y=&#34;709&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(250,143,12)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;20.00&#34; y=&#34;719.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[ld-2.27.so] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;17&#34; y=&#34;693&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(216,56,0)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;20.00&#34; y=&#34;703.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[ld-2.27.so] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;17&#34; y=&#34;677&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(206,177,34)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;20.00&#34; y=&#34;687.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[ld-2.27.so] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;17&#34; y=&#34;661&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(234,15,44)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;20.00&#34; y=&#34;671.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[ld-2.27.so] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;17&#34; y=&#34;645&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(223,12,30)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;20.00&#34; y=&#34;655.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;_dl_catch_exception (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;17&#34; y=&#34;629&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(209,86,52)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;20.00&#34; y=&#34;639.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[ld-2.27.so] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;17&#34; y=&#34;613&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(240,80,46)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;20.00&#34; y=&#34;623.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[ld-2.27.so] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;17&#34; y=&#34;597&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(208,121,12)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;20.00&#34; y=&#34;607.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[ld-2.27.so] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;17&#34; y=&#34;581&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(249,1,44)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;20.00&#34; y=&#34;591.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[ld-2.27.so] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;17&#34; y=&#34;565&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(206,94,35)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;20.00&#34; y=&#34;575.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;17&#34; y=&#34;549&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(211,5,36)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;20.00&#34; y=&#34;559.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;17&#34; y=&#34;533&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(222,162,14)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;20.00&#34; y=&#34;543.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;17&#34; y=&#34;517&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(246,124,44)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;20.00&#34; y=&#34;527.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;17&#34; y=&#34;501&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(242,39,40)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;20.00&#34; y=&#34;511.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;17&#34; y=&#34;485&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(220,194,48)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;20.00&#34; y=&#34;495.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;17&#34; y=&#34;469&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(236,149,8)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;20.00&#34; y=&#34;479.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;17&#34; y=&#34;453&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(212,123,16)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;20.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;17&#34; y=&#34;437&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(236,184,24)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;20.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;17&#34; y=&#34;421&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(231,113,13)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;20.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;17&#34; y=&#34;405&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(234,71,52)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;20.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_ops::assign_ops::&amp;lt;impl core::ops::arith::AddAssign&amp;lt;&amp;amp;&amp;apos;a ndarray::ArrayBase&amp;lt;S2, E&amp;gt;&amp;gt; for ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::add_assign (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;18&#34; y=&#34;693&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(218,103,26)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;21.00&#34; y=&#34;703.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::linalg::impl_linalg::mat_mul_impl (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;18&#34; y=&#34;693&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(241,81,10)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;21.00&#34; y=&#34;703.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[unknown] (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;18&#34; y=&#34;709&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(237,11,42)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;21.00&#34; y=&#34;719.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;nndl_rust::main (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;18&#34; y=&#34;693&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(232,38,25)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;21.00&#34; y=&#34;703.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;nndl_rust::Network::sgd (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;18&#34; y=&#34;677&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(218,3,13)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;21.00&#34; y=&#34;687.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;nndl_rust::Network::update_mini_batch (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;18&#34; y=&#34;661&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(237,83,37)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;21.00&#34; y=&#34;671.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;nndl_rust::Network::backprop (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;18&#34; y=&#34;645&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(217,84,9)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;21.00&#34; y=&#34;655.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;[T] as rand::seq::SliceRandom&amp;gt;::shuffle (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;18&#34; y=&#34;517&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(231,28,53)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;21.00&#34; y=&#34;527.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;rand::Rng::gen_range (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;501&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(250,221,5)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;511.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;rand::distributions::uniform::UniformInt&amp;lt;usize&amp;gt; as rand::distributions::uniform::UniformSampler&amp;gt;::sample_single (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;485&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(254,173,42)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;495.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;rand::Rng::gen (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;469&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(208,216,17)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;479.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;rand::distributions::integer::&amp;lt;impl rand::distributions::Distribution&amp;lt;usize&amp;gt; for rand::distributions::Standard&amp;gt;::sample (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;453&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(251,66,18)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&amp;gt;::next_u64 (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;437&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(236,28,43)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;rand::rngs::adapter::reseeding::ReseedingRng&amp;lt;R, Rsdr&amp;gt; as rand_core::RngCore&amp;gt;::next_u64 (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;421&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(212,73,20)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;rand_core::block::BlockRng&amp;lt;R&amp;gt; as rand_core::RngCore&amp;gt;::next_u64 (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;405&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(211,13,47)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;rand_core::block::BlockRng&amp;lt;R&amp;gt;&amp;gt;::generate_and_set (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;389&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(253,109,28)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;rand::rngs::adapter::reseeding::ReseedingCore&amp;lt;R, Rsdr&amp;gt; as rand_core::block::BlockRngCore&amp;gt;::generate (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;373&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(218,138,43)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;rand_hc::hc128::Hc128Core as rand_core::block::BlockRngCore&amp;gt;::generate (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;357&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(250,194,36)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;367.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;rand_hc::hc128::Hc128Core::step_q (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;341&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(241,73,2)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;351.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;_$LT$core..iter..adapters..Map$LT$I$C$$u20$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$::fold::_$u7b$$u7b$closure$u7d$$u7d$::hae746251c4eeaa35 (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;357&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(241,2,39)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;367.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;nndl_rust::Network::evaluate::_$u7b$$u7b$closure$u7d$$u7d$::h567b2c5b99fe1970 (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;341&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(219,153,21)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;351.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;nndl_rust::argmax (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;325&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(206,169,20)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;335.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::real_drop_in_place (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;325&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(248,51,15)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;335.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::real_drop_in_place (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;309&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(223,183,45)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;319.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::real_drop_in_place (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;293&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(219,151,27)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;303.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::real_drop_in_place (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;277&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(208,92,39)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;287.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T, A&amp;gt; as core::ops::drop::Drop&amp;gt;::drop (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;261&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(221,174,25)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;271.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T, A&amp;gt;&amp;gt;::dealloc_buffer (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;245&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(210,30,47)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;255.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::alloc::Global as core::alloc::Alloc&amp;gt;::dealloc (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;229&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(225,128,29)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;239.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;alloc::alloc::dealloc (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;213&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(215,93,39)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;223.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;cfree (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;197&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(220,144,3)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;207.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt;&amp;gt;::extend_from_slice (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;229&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(220,207,21)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;239.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt; as alloc::vec::SpecExtend&amp;lt;&amp;amp;&amp;apos;a T, core::slice::Iter&amp;lt;&amp;apos;a, T&amp;gt;&amp;gt;&amp;gt;::spec_extend (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;213&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(210,116,31)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;223.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::slice::&amp;lt;impl [T]&amp;gt;::copy_from_slice (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;197&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(233,211,29)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;207.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::intrinsics::copy_nonoverlapping (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;181&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(241,12,26)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;191.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[libc-2.27.so] (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;165&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(232,86,6)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;175.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_clone::&amp;lt;impl core::clone::Clone for ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::clone (9 samples, 0.17%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;325&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(205,98,4)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;335.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;ndarray::OwnedRepr&amp;lt;A&amp;gt; as ndarray::data_traits::DataClone&amp;gt;::clone_with_ptr (9 samples, 0.17%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;309&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(236,186,21)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;319.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;ndarray::OwnedRepr&amp;lt;A&amp;gt; as core::clone::Clone&amp;gt;::clone (9 samples, 0.17%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;293&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(229,155,13)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;303.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt; as core::clone::Clone&amp;gt;::clone (9 samples, 0.17%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;277&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(229,41,16)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;287.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;alloc::slice::&amp;lt;impl [T]&amp;gt;::to_vec (9 samples, 0.17%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;261&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(216,71,38)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;271.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;alloc::slice::hack::to_vec (9 samples, 0.17%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;245&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(231,85,49)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;255.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt;&amp;gt;::with_capacity (4 samples, 0.08%)&lt;/title&gt;&lt;rect x=&#34;20&#34; y=&#34;229&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(246,34,8)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;23.00&#34; y=&#34;239.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T&amp;gt;&amp;gt;::with_capacity (4 samples, 0.08%)&lt;/title&gt;&lt;rect x=&#34;20&#34; y=&#34;213&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(246,67,22)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;23.00&#34; y=&#34;223.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T, A&amp;gt;&amp;gt;::allocate_in (4 samples, 0.08%)&lt;/title&gt;&lt;rect x=&#34;20&#34; y=&#34;197&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(205,1,51)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;23.00&#34; y=&#34;207.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::alloc::Global as core::alloc::Alloc&amp;gt;::alloc (4 samples, 0.08%)&lt;/title&gt;&lt;rect x=&#34;20&#34; y=&#34;181&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(228,196,26)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;23.00&#34; y=&#34;191.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;alloc::alloc::alloc (4 samples, 0.08%)&lt;/title&gt;&lt;rect x=&#34;20&#34; y=&#34;165&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(247,162,20)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;23.00&#34; y=&#34;175.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;__libc_malloc (4 samples, 0.08%)&lt;/title&gt;&lt;rect x=&#34;20&#34; y=&#34;149&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(241,100,5)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;23.00&#34; y=&#34;159.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[libc-2.27.so] (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;21&#34; y=&#34;133&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(233,47,0)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;24.00&#34; y=&#34;143.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;__GI___pthread_mutex_unlock (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;21&#34; y=&#34;261&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(240,198,31)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;24.00&#34; y=&#34;271.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;dgemm_itcopy_HASWELL (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;22&#34; y=&#34;245&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(209,59,23)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;25.00&#34; y=&#34;255.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::linalg::impl_linalg::_$LT$impl$u20$ndarray..ArrayBase$LT$S$C$$u20$ndarray..dimension..dim..Dim$LT$$u5b$usize$u3b$$u20$_$u5d$$GT$$GT$$GT$::dot::hcef54f2ce75d3905 (182 samples, 3.51%)&lt;/title&gt;&lt;rect x=&#34;21&#34; y=&#34;325&#34; width=&#34;42&#34; height=&#34;15&#34; fill=&#34;rgb(237,98,22)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;24.00&#34; y=&#34;335.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;nda..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;_$LT$ndarray..ArrayBase$LT$S$C$$u20$ndarray..dimension..dim..Dim$LT$$u5b$usize$u3b$$u20$_$u5d$$GT$$GT$$u20$as$u20$ndarray..linalg..impl_linalg..Dot$LT$ndarray..ArrayBase$LT$S2$C$$u20$ndarray..dimension..dim..Dim$LT$$u5b$usize$u3b$$u20$_$u5d$$GT$$GT$$GT$$GT$::dot::h48a7db9fda0dd69f (182 samples, 3.51%)&lt;/title&gt;&lt;rect x=&#34;21&#34; y=&#34;309&#34; width=&#34;42&#34; height=&#34;15&#34; fill=&#34;rgb(246,90,7)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;24.00&#34; y=&#34;319.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;_$L..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::linalg::impl_linalg::mat_mul_impl (182 samples, 3.51%)&lt;/title&gt;&lt;rect x=&#34;21&#34; y=&#34;293&#34; width=&#34;42&#34; height=&#34;15&#34; fill=&#34;rgb(225,97,45)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;24.00&#34; y=&#34;303.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;nda..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;cblas_dgemm (182 samples, 3.51%)&lt;/title&gt;&lt;rect x=&#34;21&#34; y=&#34;277&#34; width=&#34;42&#34; height=&#34;15&#34; fill=&#34;rgb(210,45,30)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;24.00&#34; y=&#34;287.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;cbl..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;dgemm_nn (181 samples, 3.49%)&lt;/title&gt;&lt;rect x=&#34;22&#34; y=&#34;261&#34; width=&#34;41&#34; height=&#34;15&#34; fill=&#34;rgb(249,168,34)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;25.00&#34; y=&#34;271.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;dge..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;dgemm_oncopy_HASWELL (176 samples, 3.40%)&lt;/title&gt;&lt;rect x=&#34;23&#34; y=&#34;245&#34; width=&#34;40&#34; height=&#34;15&#34; fill=&#34;rgb(246,29,50)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;26.00&#34; y=&#34;255.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;dge..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;63&#34; y=&#34;229&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(252,206,30)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;66.00&#34; y=&#34;239.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;63&#34; y=&#34;213&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(215,82,0)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;66.00&#34; y=&#34;223.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;63&#34; y=&#34;197&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(235,121,1)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;66.00&#34; y=&#34;207.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;63&#34; y=&#34;181&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(222,159,12)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;66.00&#34; y=&#34;191.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;63&#34; y=&#34;165&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(242,161,18)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;66.00&#34; y=&#34;175.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;63&#34; y=&#34;149&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(206,126,29)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;66.00&#34; y=&#34;159.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;63&#34; y=&#34;133&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(236,2,38)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;66.00&#34; y=&#34;143.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;63&#34; y=&#34;117&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(226,16,7)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;66.00&#34; y=&#34;127.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;63&#34; y=&#34;101&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(254,222,18)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;66.00&#34; y=&#34;111.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;63&#34; y=&#34;85&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(240,121,32)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;66.00&#34; y=&#34;95.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;63&#34; y=&#34;69&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(217,138,29)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;66.00&#34; y=&#34;79.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;nndl_rust::Network::evaluate (198 samples, 3.82%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;517&#34; width=&#34;45&#34; height=&#34;15&#34; fill=&#34;rgb(241,159,21)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;527.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;nndl..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::iter::traits::iterator::Iterator::collect (198 samples, 3.82%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;501&#34; width=&#34;45&#34; height=&#34;15&#34; fill=&#34;rgb(246,154,49)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;511.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;core..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt; as core::iter::traits::collect::FromIterator&amp;lt;T&amp;gt;&amp;gt;::from_iter (198 samples, 3.82%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;485&#34; width=&#34;45&#34; height=&#34;15&#34; fill=&#34;rgb(207,45,28)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;495.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&amp;lt;all..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt; as alloc::vec::SpecExtend&amp;lt;T, I&amp;gt;&amp;gt;::from_iter (198 samples, 3.82%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;469&#34; width=&#34;45&#34; height=&#34;15&#34; fill=&#34;rgb(251,101,30)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;479.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&amp;lt;all..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt; as alloc::vec::SpecExtend&amp;lt;T, I&amp;gt;&amp;gt;::spec_extend (198 samples, 3.82%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;453&#34; width=&#34;45&#34; height=&#34;15&#34; fill=&#34;rgb(217,138,19)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&amp;lt;all..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::iter::traits::iterator::Iterator::for_each (198 samples, 3.82%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;437&#34; width=&#34;45&#34; height=&#34;15&#34; fill=&#34;rgb(231,151,48)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;core..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;core::iter::adapters::Map&amp;lt;I, F&amp;gt; as core::iter::traits::iterator::Iterator&amp;gt;::fold (198 samples, 3.82%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;421&#34; width=&#34;45&#34; height=&#34;15&#34; fill=&#34;rgb(242,149,16)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&amp;lt;cor..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;core::iter::adapters::Map&amp;lt;I, F&amp;gt; as core::iter::traits::iterator::Iterator&amp;gt;::fold (198 samples, 3.82%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;405&#34; width=&#34;45&#34; height=&#34;15&#34; fill=&#34;rgb(231,169,6)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&amp;lt;cor..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;core::slice::Iter&amp;lt;&amp;apos;a, T&amp;gt; as core::iter::traits::iterator::Iterator&amp;gt;::fold (198 samples, 3.82%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;389&#34; width=&#34;45&#34; height=&#34;15&#34; fill=&#34;rgb(253,116,52)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&amp;lt;cor..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;_$LT$core..iter..adapters..Map$LT$I$C$$u20$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$::fold::_$u7b$$u7b$closure$u7d$$u7d$::h579764e055d58574 (198 samples, 3.82%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;373&#34; width=&#34;45&#34; height=&#34;15&#34; fill=&#34;rgb(226,72,32)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;_$LT..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;nndl_rust::Network::evaluate::_$u7b$$u7b$closure$u7d$$u7d$::ha9023cb2fcfde6e0 (197 samples, 3.80%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;357&#34; width=&#34;45&#34; height=&#34;15&#34; fill=&#34;rgb(236,35,16)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;367.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;nndl..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;nndl_rust::Network::feedforward (197 samples, 3.80%)&lt;/title&gt;&lt;rect x=&#34;19&#34; y=&#34;341&#34; width=&#34;45&#34; height=&#34;15&#34; fill=&#34;rgb(211,50,44)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;22.00&#34; y=&#34;351.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;nndl..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;nndl_rust::sigmoid (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;63&#34; y=&#34;325&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(254,172,35)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;66.00&#34; y=&#34;335.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::mapv (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;63&#34; y=&#34;309&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(214,161,46)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;66.00&#34; y=&#34;319.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::map (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;63&#34; y=&#34;293&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(241,200,37)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;66.00&#34; y=&#34;303.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::iterators::to_vec_mapped (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;63&#34; y=&#34;277&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(243,124,30)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;66.00&#34; y=&#34;287.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;core::slice::Iter&amp;lt;&amp;apos;a, T&amp;gt; as core::iter::traits::iterator::Iterator&amp;gt;::fold (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;63&#34; y=&#34;261&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(250,51,29)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;66.00&#34; y=&#34;271.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::iterators::to_vec_mapped::_$u7b$$u7b$closure$u7d$$u7d$::h96d4b65474d2726b (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;63&#34; y=&#34;245&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(251,100,27)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;66.00&#34; y=&#34;255.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::_$LT$impl$u20$ndarray..ArrayBase$LT$S$C$$u20$D$GT$$GT$::mapv::_$u7b$$u7b$closure$u7d$$u7d$::h8da8f33936077f61 (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;63&#34; y=&#34;229&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(229,100,13)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;66.00&#34; y=&#34;239.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ops::function::FnMut::call_mut (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;63&#34; y=&#34;213&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(250,65,30)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;66.00&#34; y=&#34;223.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;std::f64::&amp;lt;impl f64&amp;gt;::exp (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;63&#34; y=&#34;197&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(243,46,49)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;66.00&#34; y=&#34;207.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;expf64 (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;63&#34; y=&#34;181&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(238,111,46)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;66.00&#34; y=&#34;191.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[libm-2.27.so] (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;63&#34; y=&#34;165&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(236,52,16)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;66.00&#34; y=&#34;175.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;core::iter::adapters::zip::Zip&amp;lt;A, B&amp;gt; as core::iter::traits::iterator::Iterator&amp;gt;::next (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;64&#34; y=&#34;501&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(225,46,46)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;67.00&#34; y=&#34;511.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;core::iter::adapters::zip::Zip&amp;lt;A, B&amp;gt; as core::iter::adapters::zip::ZipImpl&amp;lt;A, B&amp;gt;&amp;gt;::next (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;64&#34; y=&#34;485&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(213,95,38)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;67.00&#34; y=&#34;495.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt; as core::ops::drop::Drop&amp;gt;::drop (7 samples, 0.14%)&lt;/title&gt;&lt;rect x=&#34;64&#34; y=&#34;485&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(251,218,28)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;67.00&#34; y=&#34;495.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::drop_in_place (7 samples, 0.14%)&lt;/title&gt;&lt;rect x=&#34;64&#34; y=&#34;469&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(222,59,39)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;67.00&#34; y=&#34;479.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::real_drop_in_place (7 samples, 0.14%)&lt;/title&gt;&lt;rect x=&#34;64&#34; y=&#34;453&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(230,71,23)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;67.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::real_drop_in_place (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;65&#34; y=&#34;437&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(253,172,15)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;68.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::real_drop_in_place (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;65&#34; y=&#34;421&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(238,159,14)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;68.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::real_drop_in_place (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;65&#34; y=&#34;405&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(209,127,2)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;68.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::real_drop_in_place (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;65&#34; y=&#34;389&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(210,86,44)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;68.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T, A&amp;gt; as core::ops::drop::Drop&amp;gt;::drop (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;65&#34; y=&#34;373&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(231,177,51)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;68.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T, A&amp;gt;&amp;gt;::dealloc_buffer (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;65&#34; y=&#34;357&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(225,190,3)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;68.00&#34; y=&#34;367.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::alloc::Global as core::alloc::Alloc&amp;gt;::dealloc (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;65&#34; y=&#34;341&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(253,102,53)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;68.00&#34; y=&#34;351.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;alloc::alloc::dealloc (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;65&#34; y=&#34;325&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(250,149,21)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;68.00&#34; y=&#34;335.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;cfree (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;65&#34; y=&#34;309&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(220,12,9)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;68.00&#34; y=&#34;319.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T, A&amp;gt; as core::ops::drop::Drop&amp;gt;::drop (4 samples, 0.08%)&lt;/title&gt;&lt;rect x=&#34;66&#34; y=&#34;469&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(234,162,45)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;69.00&#34; y=&#34;479.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T, A&amp;gt;&amp;gt;::dealloc_buffer (4 samples, 0.08%)&lt;/title&gt;&lt;rect x=&#34;66&#34; y=&#34;453&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(231,71,54)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;69.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::alloc::Global as core::alloc::Alloc&amp;gt;::dealloc (4 samples, 0.08%)&lt;/title&gt;&lt;rect x=&#34;66&#34; y=&#34;437&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(215,103,13)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;69.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;alloc::alloc::dealloc (4 samples, 0.08%)&lt;/title&gt;&lt;rect x=&#34;66&#34; y=&#34;421&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(233,206,31)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;69.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;cfree (4 samples, 0.08%)&lt;/title&gt;&lt;rect x=&#34;66&#34; y=&#34;405&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(226,55,30)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;69.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::real_drop_in_place (12 samples, 0.23%)&lt;/title&gt;&lt;rect x=&#34;64&#34; y=&#34;501&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(220,190,41)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;67.00&#34; y=&#34;511.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::real_drop_in_place (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;66&#34; y=&#34;485&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(206,79,15)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;69.00&#34; y=&#34;495.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::real_drop_in_place (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;67&#34; y=&#34;469&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(236,195,23)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;70.00&#34; y=&#34;479.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::real_drop_in_place (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;67&#34; y=&#34;453&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(216,44,52)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;70.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T, A&amp;gt; as core::ops::drop::Drop&amp;gt;::drop (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;67&#34; y=&#34;437&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(213,134,22)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;70.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T, A&amp;gt;&amp;gt;::dealloc_buffer (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;67&#34; y=&#34;421&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(234,23,38)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;70.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::alloc::Global as core::alloc::Alloc&amp;gt;::dealloc (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;67&#34; y=&#34;405&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(224,48,40)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;70.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;alloc::alloc::dealloc (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;67&#34; y=&#34;389&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(241,170,33)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;70.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;cfree (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;67&#34; y=&#34;373&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(207,112,24)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;70.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::write (4 samples, 0.08%)&lt;/title&gt;&lt;rect x=&#34;68&#34; y=&#34;421&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(232,149,29)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;71.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::mapv (39 samples, 0.75%)&lt;/title&gt;&lt;rect x=&#34;67&#34; y=&#34;501&#34; width=&#34;9&#34; height=&#34;15&#34; fill=&#34;rgb(228,88,53)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;70.00&#34; y=&#34;511.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::map (39 samples, 0.75%)&lt;/title&gt;&lt;rect x=&#34;67&#34; y=&#34;485&#34; width=&#34;9&#34; height=&#34;15&#34; fill=&#34;rgb(252,168,8)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;70.00&#34; y=&#34;495.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::iterators::to_vec_mapped (39 samples, 0.75%)&lt;/title&gt;&lt;rect x=&#34;67&#34; y=&#34;469&#34; width=&#34;9&#34; height=&#34;15&#34; fill=&#34;rgb(227,192,45)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;70.00&#34; y=&#34;479.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;core::slice::Iter&amp;lt;&amp;apos;a, T&amp;gt; as core::iter::traits::iterator::Iterator&amp;gt;::fold (39 samples, 0.75%)&lt;/title&gt;&lt;rect x=&#34;67&#34; y=&#34;453&#34; width=&#34;9&#34; height=&#34;15&#34; fill=&#34;rgb(249,151,27)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;70.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::iterators::to_vec_mapped::_$u7b$$u7b$closure$u7d$$u7d$::hf72997fece11f5d2 (34 samples, 0.66%)&lt;/title&gt;&lt;rect x=&#34;68&#34; y=&#34;437&#34; width=&#34;8&#34; height=&#34;15&#34; fill=&#34;rgb(211,132,7)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;71.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::_$LT$impl$u20$ndarray..ArrayBase$LT$S$C$$u20$D$GT$$GT$::mapv::_$u7b$$u7b$closure$u7d$$u7d$::h0cb98e0c6ec84984 (30 samples, 0.58%)&lt;/title&gt;&lt;rect x=&#34;69&#34; y=&#34;421&#34; width=&#34;7&#34; height=&#34;15&#34; fill=&#34;rgb(247,97,16)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;72.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;nndl_rust::Network::update_mini_batch::_$u7b$$u7b$closure$u7d$$u7d$::h016be2fa699b1e5a (30 samples, 0.58%)&lt;/title&gt;&lt;rect x=&#34;69&#34; y=&#34;405&#34; width=&#34;7&#34; height=&#34;15&#34; fill=&#34;rgb(244,1,51)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;72.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::cmp::impls::&amp;lt;impl core::cmp::PartialEq&amp;lt;&amp;amp;&amp;apos;b B&amp;gt; for &amp;amp;&amp;apos;a A&amp;gt;::eq (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;76&#34; y=&#34;469&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(228,86,45)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;79.00&#34; y=&#34;479.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::slice::&amp;lt;impl core::cmp::PartialEq&amp;lt;[B]&amp;gt; for [A]&amp;gt;::eq (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;76&#34; y=&#34;453&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(215,87,22)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;79.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;[A] as core::slice::SlicePartialEq&amp;lt;A&amp;gt;&amp;gt;::equal (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;76&#34; y=&#34;437&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(227,72,44)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;79.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::iter::range::&amp;lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&amp;lt;A&amp;gt;&amp;gt;::next (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;77&#34; y=&#34;453&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(212,44,20)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;80.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;usize as core::iter::range::Step&amp;gt;::add_usize (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;77&#34; y=&#34;437&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(242,160,0)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;80.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::num::&amp;lt;impl usize&amp;gt;::checked_add (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;77&#34; y=&#34;421&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(233,155,30)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;80.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::num::&amp;lt;impl usize&amp;gt;::overflowing_add (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;77&#34; y=&#34;405&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(227,162,27)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;80.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::as_slice (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;77&#34; y=&#34;453&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(233,7,41)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;80.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::is_standard_layout (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;77&#34; y=&#34;437&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(225,226,2)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;80.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::is_standard_layout::is_standard_layout (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;77&#34; y=&#34;421&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(208,37,6)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;80.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt; (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;78&#34; y=&#34;389&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(234,224,30)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;81.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;*mut T as ndarray::zip::Offset&amp;gt;::stride_offset (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;78&#34; y=&#34;373&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(240,44,52)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;81.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::iter::traits::iterator::Iterator::try_for_each::_$u7b$$u7b$closure$u7d$$u7d$::h389a9ec772195211 (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;80&#34; y=&#34;229&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(247,181,46)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;83.00&#34; y=&#34;239.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::iter::traits::iterator::Iterator::any::_$u7b$$u7b$closure$u7d$$u7d$::h1937c0298809360a (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;80&#34; y=&#34;213&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(225,151,39)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;83.00&#34; y=&#34;223.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::_$LT$impl$u20$ndarray..ArrayBase$LT$S$C$$u20$D$GT$$GT$::is_standard_layout::is_standard_layout::_$u7b$$u7b$closure$u7d$$u7d$::h4f531127c4e24681 (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;80&#34; y=&#34;197&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(234,228,18)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;83.00&#34; y=&#34;207.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::iter::traits::iterator::Iterator::any (4 samples, 0.08%)&lt;/title&gt;&lt;rect x=&#34;80&#34; y=&#34;277&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(235,143,8)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;83.00&#34; y=&#34;287.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::iter::traits::iterator::Iterator::try_for_each (4 samples, 0.08%)&lt;/title&gt;&lt;rect x=&#34;80&#34; y=&#34;261&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(237,206,2)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;83.00&#34; y=&#34;271.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;core::slice::Iter&amp;lt;&amp;apos;a, T&amp;gt; as core::iter::traits::iterator::Iterator&amp;gt;::try_fold (4 samples, 0.08%)&lt;/title&gt;&lt;rect x=&#34;80&#34; y=&#34;245&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(214,123,30)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;83.00&#34; y=&#34;255.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::num::&amp;lt;impl usize&amp;gt;::wrapping_sub (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;80&#34; y=&#34;229&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(223,20,0)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;83.00&#34; y=&#34;239.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;ndarray::ArrayBase&amp;lt;ndarray::ViewRepr&amp;lt;&amp;amp;&amp;apos;a A&amp;gt;, D&amp;gt; as ndarray::zip::NdProducer&amp;gt;::layout (8 samples, 0.15%)&lt;/title&gt;&lt;rect x=&#34;79&#34; y=&#34;341&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(215,118,29)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;82.00&#34; y=&#34;351.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::zip::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::layout_impl (8 samples, 0.15%)&lt;/title&gt;&lt;rect x=&#34;79&#34; y=&#34;325&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(227,147,20)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;82.00&#34; y=&#34;335.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::is_standard_layout (8 samples, 0.15%)&lt;/title&gt;&lt;rect x=&#34;79&#34; y=&#34;309&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(207,48,10)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;82.00&#34; y=&#34;319.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::is_standard_layout::is_standard_layout (8 samples, 0.15%)&lt;/title&gt;&lt;rect x=&#34;79&#34; y=&#34;293&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(207,109,13)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;82.00&#34; y=&#34;303.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::slice::&amp;lt;impl [T]&amp;gt;::iter (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;81&#34; y=&#34;277&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(235,46,38)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;84.00&#34; y=&#34;287.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::&amp;lt;impl *const T&amp;gt;::add (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;81&#34; y=&#34;261&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(237,92,54)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;84.00&#34; y=&#34;271.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::&amp;lt;impl *const T&amp;gt;::offset (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;81&#34; y=&#34;245&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(213,98,0)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;84.00&#34; y=&#34;255.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;ndarray::ArrayBase&amp;lt;ndarray::ViewRepr&amp;lt;&amp;amp;&amp;apos;a mut A&amp;gt;, D&amp;gt; as ndarray::zip::NdProducer&amp;gt;::layout (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;81&#34; y=&#34;341&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(243,110,45)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;84.00&#34; y=&#34;351.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::zip::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::layout_impl (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;81&#34; y=&#34;325&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(229,116,44)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;84.00&#34; y=&#34;335.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::is_standard_layout (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;81&#34; y=&#34;309&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(216,47,47)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;84.00&#34; y=&#34;319.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::is_standard_layout::is_standard_layout (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;81&#34; y=&#34;293&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(220,170,27)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;84.00&#34; y=&#34;303.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;_$LT$ndarray..zip..Zip$LT$$LP$P1$C$$u20$P2$RP$$C$$u20$D$GT$$GT$::apply::_$u7b$$u7b$closure$u7d$$u7d$::h9bb178e8bf662d9d (789 samples, 15.22%)&lt;/title&gt;&lt;rect x=&#34;140&#34; y=&#34;309&#34; width=&#34;180&#34; height=&#34;15&#34; fill=&#34;rgb(231,122,35)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;143.00&#34; y=&#34;319.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;_$LT$ndarray..zip..Zip$..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::_$LT$impl$u20$ndarray..ArrayBase$LT$S$C$$u20$D$GT$$GT$::zip_mut_with_by_rows::_$u7b$$u7b$closure$u7d$$u7d$::_$u7b$$u7b$closure$u7d$$u7d$::hd53040d6f33bcf37 (789 samples, 15.22%)&lt;/title&gt;&lt;rect x=&#34;140&#34; y=&#34;293&#34; width=&#34;180&#34; height=&#34;15&#34; fill=&#34;rgb(237,172,18)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;143.00&#34; y=&#34;303.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;ndarray::impl_methods::..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_ops::assign_ops::_$LT$impl$u20$core..ops..arith..AddAssign$LT$$RF$$u27$a$u20$ndarray..ArrayBase$LT$S2$C$$u20$E$GT$$GT$$u20$for$u20$ndarray..ArrayBase$LT$S$C$$u20$D$GT$$GT$::add_assign::_$u7b$$u7b$closure$u7d$$u7d$::h86a858ad52faeace (789 samples, 15.22%)&lt;/title&gt;&lt;rect x=&#34;140&#34; y=&#34;277&#34; width=&#34;180&#34; height=&#34;15&#34; fill=&#34;rgb(206,18,42)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;143.00&#34; y=&#34;287.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;ndarray::impl_ops::assi..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;f64 as core::ops::arith::AddAssign&amp;gt;::add_assign (789 samples, 15.22%)&lt;/title&gt;&lt;rect x=&#34;140&#34; y=&#34;261&#34; width=&#34;180&#34; height=&#34;15&#34; fill=&#34;rgb(225,51,34)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;143.00&#34; y=&#34;271.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&amp;lt;f64 as core::ops::arit..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;319&#34; y=&#34;245&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(230,120,38)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;322.00&#34; y=&#34;255.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;319&#34; y=&#34;229&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(249,11,13)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;322.00&#34; y=&#34;239.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;319&#34; y=&#34;213&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(230,44,6)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;322.00&#34; y=&#34;223.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;319&#34; y=&#34;197&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(219,131,35)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;322.00&#34; y=&#34;207.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;319&#34; y=&#34;181&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(242,154,8)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;322.00&#34; y=&#34;191.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;319&#34; y=&#34;165&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(253,82,18)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;322.00&#34; y=&#34;175.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;319&#34; y=&#34;149&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(217,75,25)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;322.00&#34; y=&#34;159.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;319&#34; y=&#34;133&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(218,222,29)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;322.00&#34; y=&#34;143.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;usize as core::iter::range::Step&amp;gt;::add_usize (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;332&#34; y=&#34;293&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(239,154,5)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;335.00&#34; y=&#34;303.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::num::&amp;lt;impl usize&amp;gt;::checked_add (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;332&#34; y=&#34;277&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(209,226,28)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;335.00&#34; y=&#34;287.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::num::&amp;lt;impl usize&amp;gt;::overflowing_add (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;332&#34; y=&#34;261&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(221,70,31)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;335.00&#34; y=&#34;271.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;_$LT$ndarray..zip..Zip$LT$$LP$P1$C$$u20$P2$RP$$C$$u20$D$GT$$GT$::apply::_$u7b$$u7b$closure$u7d$$u7d$::h2b06b61a54da618f (1,195 samples, 23.06%)&lt;/title&gt;&lt;rect x=&#34;78&#34; y=&#34;389&#34; width=&#34;273&#34; height=&#34;15&#34; fill=&#34;rgb(207,205,36)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;81.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;_$LT$ndarray..zip..Zip$LT$$LP$P1$C$$..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::_$LT$impl$u20$ndarray..ArrayBase$LT$S$C$$u20$D$GT$$GT$::zip_mut_with_by_rows::_$u7b$$u7b$closure$u7d$$u7d$::hf8de37080ae87286 (1,195 samples, 23.06%)&lt;/title&gt;&lt;rect x=&#34;78&#34; y=&#34;373&#34; width=&#34;273&#34; height=&#34;15&#34; fill=&#34;rgb(236,80,44)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;81.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;ndarray::impl_methods::_$LT$impl$u20..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;ndarray::zip::Zip&amp;lt; (1,195 samples, 23.06%)&lt;/title&gt;&lt;rect x=&#34;78&#34; y=&#34;357&#34; width=&#34;273&#34; height=&#34;15&#34; fill=&#34;rgb(229,0,10)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;81.00&#34; y=&#34;367.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&amp;lt;ndarray::zip::Zip&amp;lt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;ndarray::zip::Zip&amp;lt;P, D&amp;gt;&amp;gt;::apply_core (1,184 samples, 22.84%)&lt;/title&gt;&lt;rect x=&#34;81&#34; y=&#34;341&#34; width=&#34;270&#34; height=&#34;15&#34; fill=&#34;rgb(206,186,14)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;84.00&#34; y=&#34;351.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&amp;lt;ndarray::zip::Zip&amp;lt;P, D&amp;gt;&amp;gt;::apply_core&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;ndarray::zip::Zip&amp;lt;P, D&amp;gt;&amp;gt;::apply_core_strided (1,183 samples, 22.82%)&lt;/title&gt;&lt;rect x=&#34;81&#34; y=&#34;325&#34; width=&#34;270&#34; height=&#34;15&#34; fill=&#34;rgb(228,36,13)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;84.00&#34; y=&#34;335.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&amp;lt;ndarray::zip::Zip&amp;lt;P, D&amp;gt;&amp;gt;::apply_cor..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::iter::range::&amp;lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&amp;lt;A&amp;gt;&amp;gt;::next (135 samples, 2.60%)&lt;/title&gt;&lt;rect x=&#34;320&#34; y=&#34;309&#34; width=&#34;31&#34; height=&#34;15&#34; fill=&#34;rgb(250,131,20)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;323.00&#34; y=&#34;319.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;co..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::cmp::impls::&amp;lt;impl core::cmp::PartialOrd for usize&amp;gt;::lt (77 samples, 1.49%)&lt;/title&gt;&lt;rect x=&#34;333&#34; y=&#34;293&#34; width=&#34;18&#34; height=&#34;15&#34; fill=&#34;rgb(253,56,11)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;336.00&#34; y=&#34;303.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::zip_mut_with_by_rows (1,203 samples, 23.21%)&lt;/title&gt;&lt;rect x=&#34;77&#34; y=&#34;453&#34; width=&#34;274&#34; height=&#34;15&#34; fill=&#34;rgb(239,163,23)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;80.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;ndarray::impl_methods::&amp;lt;impl ndarray..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;ndarray::zip::Zip&amp;lt; (1,203 samples, 23.21%)&lt;/title&gt;&lt;rect x=&#34;77&#34; y=&#34;437&#34; width=&#34;274&#34; height=&#34;15&#34; fill=&#34;rgb(235,143,33)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;80.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&amp;lt;ndarray::zip::Zip&amp;lt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;ndarray::zip::Zip&amp;lt;P, D&amp;gt;&amp;gt;::apply_core (1,202 samples, 23.19%)&lt;/title&gt;&lt;rect x=&#34;78&#34; y=&#34;421&#34; width=&#34;273&#34; height=&#34;15&#34; fill=&#34;rgb(232,93,9)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;81.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&amp;lt;ndarray::zip::Zip&amp;lt;P, D&amp;gt;&amp;gt;::apply_core&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;ndarray::zip::Zip&amp;lt;P, D&amp;gt;&amp;gt;::apply_core_strided (1,202 samples, 23.19%)&lt;/title&gt;&lt;rect x=&#34;78&#34; y=&#34;405&#34; width=&#34;273&#34; height=&#34;15&#34; fill=&#34;rgb(237,148,7)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;81.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&amp;lt;ndarray::zip::Zip&amp;lt;P, D&amp;gt;&amp;gt;::apply_cor..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::iter::range::&amp;lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&amp;lt;A&amp;gt;&amp;gt;::next (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;351&#34; y=&#34;389&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(206,182,16)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;354.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;usize as core::iter::range::Step&amp;gt;::add_usize (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;351&#34; y=&#34;373&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(212,107,38)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;354.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::num::&amp;lt;impl usize&amp;gt;::checked_add (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;351&#34; y=&#34;357&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(235,171,2)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;354.00&#34; y=&#34;367.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::num::&amp;lt;impl usize&amp;gt;::overflowing_add (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;351&#34; y=&#34;341&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(231,52,42)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;354.00&#34; y=&#34;351.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_ops::assign_ops::&amp;lt;impl core::ops::arith::AddAssign&amp;lt;&amp;amp;&amp;apos;a ndarray::ArrayBase&amp;lt;S2, E&amp;gt;&amp;gt; for ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::add_assign (1,213 samples, 23.40%)&lt;/title&gt;&lt;rect x=&#34;76&#34; y=&#34;501&#34; width=&#34;276&#34; height=&#34;15&#34; fill=&#34;rgb(223,101,13)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;79.00&#34; y=&#34;511.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;ndarray::impl_ops::assign_ops::&amp;lt;impl..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::zip_mut_with (1,213 samples, 23.40%)&lt;/title&gt;&lt;rect x=&#34;76&#34; y=&#34;485&#34; width=&#34;276&#34; height=&#34;15&#34; fill=&#34;rgb(242,11,19)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;79.00&#34; y=&#34;495.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;ndarray::impl_methods::&amp;lt;impl ndarray..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::zip_mut_with_same_shape (1,211 samples, 23.36%)&lt;/title&gt;&lt;rect x=&#34;76&#34; y=&#34;469&#34; width=&#34;276&#34; height=&#34;15&#34; fill=&#34;rgb(241,228,44)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;79.00&#34; y=&#34;479.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;ndarray::impl_methods::&amp;lt;impl ndarray..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_ops::assign_ops::_$LT$impl$u20$core..ops..arith..AddAssign$LT$$RF$$u27$a$u20$ndarray..ArrayBase$LT$S2$C$$u20$E$GT$$GT$$u20$for$u20$ndarray..ArrayBase$LT$S$C$$u20$D$GT$$GT$::add_assign::_$u7b$$u7b$closure$u7d$$u7d$::h86a858ad52faeace (4 samples, 0.08%)&lt;/title&gt;&lt;rect x=&#34;351&#34; y=&#34;453&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(245,95,45)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;354.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;f64 as core::ops::arith::AddAssign&amp;gt;::add_assign (4 samples, 0.08%)&lt;/title&gt;&lt;rect x=&#34;351&#34; y=&#34;437&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(224,163,44)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;354.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::iter::range::&amp;lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&amp;lt;A&amp;gt;&amp;gt;::next (18 samples, 0.35%)&lt;/title&gt;&lt;rect x=&#34;352&#34; y=&#34;453&#34; width=&#34;4&#34; height=&#34;15&#34; fill=&#34;rgb(233,190,5)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;355.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;usize as core::iter::range::Step&amp;gt;::add_usize (18 samples, 0.35%)&lt;/title&gt;&lt;rect x=&#34;352&#34; y=&#34;437&#34; width=&#34;4&#34; height=&#34;15&#34; fill=&#34;rgb(250,54,8)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;355.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::num::&amp;lt;impl usize&amp;gt;::checked_add (18 samples, 0.35%)&lt;/title&gt;&lt;rect x=&#34;352&#34; y=&#34;421&#34; width=&#34;4&#34; height=&#34;15&#34; fill=&#34;rgb(253,107,7)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;355.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::num::&amp;lt;impl usize&amp;gt;::overflowing_add (18 samples, 0.35%)&lt;/title&gt;&lt;rect x=&#34;352&#34; y=&#34;405&#34; width=&#34;4&#34; height=&#34;15&#34; fill=&#34;rgb(229,139,7)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;355.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::as_slice_mut (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;356&#34; y=&#34;453&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(223,55,39)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;359.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::is_standard_layout (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;356&#34; y=&#34;437&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(237,126,19)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;359.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::is_standard_layout::is_standard_layout (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;356&#34; y=&#34;421&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(216,133,6)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;359.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;_$LT$ndarray..dimension..dim..Dim$LT$$u5b$usize$u3b$$u20$_$u5d$$GT$$u20$as$u20$ndarray..dimension..dimension_trait..Dimension$GT$::default_strides::h0e83b923d9e9a1fd (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;356&#34; y=&#34;405&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(206,6,49)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;359.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_ops::assign_ops::&amp;lt;impl core::ops::arith::SubAssign&amp;lt;&amp;amp;&amp;apos;a ndarray::ArrayBase&amp;lt;S2, E&amp;gt;&amp;gt; for ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::sub_assign (34 samples, 0.66%)&lt;/title&gt;&lt;rect x=&#34;352&#34; y=&#34;501&#34; width=&#34;8&#34; height=&#34;15&#34; fill=&#34;rgb(239,189,24)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;355.00&#34; y=&#34;511.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::zip_mut_with (34 samples, 0.66%)&lt;/title&gt;&lt;rect x=&#34;352&#34; y=&#34;485&#34; width=&#34;8&#34; height=&#34;15&#34; fill=&#34;rgb(230,19,28)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;355.00&#34; y=&#34;495.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::zip_mut_with_same_shape (34 samples, 0.66%)&lt;/title&gt;&lt;rect x=&#34;352&#34; y=&#34;469&#34; width=&#34;8&#34; height=&#34;15&#34; fill=&#34;rgb(207,77,39)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;355.00&#34; y=&#34;479.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_ops::assign_ops::_$LT$impl$u20$core..ops..arith..SubAssign$LT$$RF$$u27$a$u20$ndarray..ArrayBase$LT$S2$C$$u20$E$GT$$GT$$u20$for$u20$ndarray..ArrayBase$LT$S$C$$u20$D$GT$$GT$::sub_assign::_$u7b$$u7b$closure$u7d$$u7d$::h54a8f19d90774cbf (15 samples, 0.29%)&lt;/title&gt;&lt;rect x=&#34;356&#34; y=&#34;453&#34; width=&#34;4&#34; height=&#34;15&#34; fill=&#34;rgb(243,36,50)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;359.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;f64 as core::ops::arith::SubAssign&amp;gt;::sub_assign (15 samples, 0.29%)&lt;/title&gt;&lt;rect x=&#34;356&#34; y=&#34;437&#34; width=&#34;4&#34; height=&#34;15&#34; fill=&#34;rgb(251,141,1)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;359.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt; as core::ops::index::IndexMut&amp;lt;I&amp;gt;&amp;gt;::index_mut (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;360&#34; y=&#34;485&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(228,176,54)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;363.00&#34; y=&#34;495.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::slice::&amp;lt;impl core::ops::index::IndexMut&amp;lt;I&amp;gt; for [T]&amp;gt;::index_mut (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;360&#34; y=&#34;469&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(222,176,53)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;363.00&#34; y=&#34;479.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;usize as core::slice::SliceIndex&amp;lt;[T]&amp;gt;&amp;gt;::index_mut (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;360&#34; y=&#34;453&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(237,211,45)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;363.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt;&amp;gt;::push (18 samples, 0.35%)&lt;/title&gt;&lt;rect x=&#34;361&#34; y=&#34;485&#34; width=&#34;4&#34; height=&#34;15&#34; fill=&#34;rgb(242,3,54)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;364.00&#34; y=&#34;495.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt;&amp;gt;::reserve (17 samples, 0.33%)&lt;/title&gt;&lt;rect x=&#34;361&#34; y=&#34;469&#34; width=&#34;4&#34; height=&#34;15&#34; fill=&#34;rgb(229,200,47)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;364.00&#34; y=&#34;479.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T, A&amp;gt;&amp;gt;::reserve (17 samples, 0.33%)&lt;/title&gt;&lt;rect x=&#34;361&#34; y=&#34;453&#34; width=&#34;4&#34; height=&#34;15&#34; fill=&#34;rgb(246,60,47)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;364.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T, A&amp;gt;&amp;gt;::reserve_internal (17 samples, 0.33%)&lt;/title&gt;&lt;rect x=&#34;361&#34; y=&#34;437&#34; width=&#34;4&#34; height=&#34;15&#34; fill=&#34;rgb(251,179,12)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;364.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::alloc::Global as core::alloc::Alloc&amp;gt;::realloc (17 samples, 0.33%)&lt;/title&gt;&lt;rect x=&#34;361&#34; y=&#34;421&#34; width=&#34;4&#34; height=&#34;15&#34; fill=&#34;rgb(225,45,20)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;364.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;alloc::alloc::realloc (17 samples, 0.33%)&lt;/title&gt;&lt;rect x=&#34;361&#34; y=&#34;405&#34; width=&#34;4&#34; height=&#34;15&#34; fill=&#34;rgb(224,148,8)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;364.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;realloc (17 samples, 0.33%)&lt;/title&gt;&lt;rect x=&#34;361&#34; y=&#34;389&#34; width=&#34;4&#34; height=&#34;15&#34; fill=&#34;rgb(254,76,52)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;364.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[libc-2.27.so] (16 samples, 0.31%)&lt;/title&gt;&lt;rect x=&#34;361&#34; y=&#34;373&#34; width=&#34;4&#34; height=&#34;15&#34; fill=&#34;rgb(243,129,10)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;364.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[libc-2.27.so] (13 samples, 0.25%)&lt;/title&gt;&lt;rect x=&#34;362&#34; y=&#34;357&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(253,123,18)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;365.00&#34; y=&#34;367.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;alloc::alloc::exchange_malloc (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;365&#34; y=&#34;485&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(209,9,46)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;368.00&#34; y=&#34;495.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;alloc::alloc::alloc (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;365&#34; y=&#34;469&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(206,37,46)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;368.00&#34; y=&#34;479.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;__libc_malloc (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;365&#34; y=&#34;453&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(211,138,16)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;368.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt;&amp;gt;::reserve (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;365&#34; y=&#34;421&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(237,152,15)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;368.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T, A&amp;gt;&amp;gt;::reserve (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;365&#34; y=&#34;405&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(240,143,42)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;368.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T, A&amp;gt;&amp;gt;::reserve_internal (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;365&#34; y=&#34;389&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(246,63,11)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;368.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::alloc::Global as core::alloc::Alloc&amp;gt;::alloc (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;365&#34; y=&#34;373&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(240,170,52)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;368.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;alloc::alloc::alloc (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;365&#34; y=&#34;357&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(213,159,6)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;368.00&#34; y=&#34;367.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;__libc_malloc (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;365&#34; y=&#34;341&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(221,127,39)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;368.00&#34; y=&#34;351.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::iter::traits::iterator::Iterator::for_each::_$u7b$$u7b$closure$u7d$$u7d$::h84efd45fb6846f5c (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;366&#34; y=&#34;357&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(225,193,28)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;369.00&#34; y=&#34;367.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;_$LT$alloc..vec..Vec$LT$T$GT$$u20$as$u20$alloc..vec..SpecExtend$LT$T$C$$u20$I$GT$$GT$::spec_extend::_$u7b$$u7b$closure$u7d$$u7d$::h9c3f264dad5f87b2 (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;366&#34; y=&#34;341&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(254,118,17)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;369.00&#34; y=&#34;351.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::write (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;366&#34; y=&#34;325&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(250,190,31)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;369.00&#34; y=&#34;335.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;T as ndarray::shape_builder::ShapeBuilder&amp;gt;::into_shape (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;367&#34; y=&#34;309&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(219,138,33)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;370.00&#34; y=&#34;319.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;alloc::vec::from_elem (7 samples, 0.14%)&lt;/title&gt;&lt;rect x=&#34;367&#34; y=&#34;309&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(206,58,39)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;370.00&#34; y=&#34;319.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;T as alloc::vec::SpecFromElem&amp;gt;::from_elem (7 samples, 0.14%)&lt;/title&gt;&lt;rect x=&#34;367&#34; y=&#34;293&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(210,103,43)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;370.00&#34; y=&#34;303.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T&amp;gt;&amp;gt;::with_capacity_zeroed (6 samples, 0.12%)&lt;/title&gt;&lt;rect x=&#34;367&#34; y=&#34;277&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(209,67,0)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;370.00&#34; y=&#34;287.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T, A&amp;gt;&amp;gt;::allocate_in (6 samples, 0.12%)&lt;/title&gt;&lt;rect x=&#34;367&#34; y=&#34;261&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(219,144,39)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;370.00&#34; y=&#34;271.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::alloc::Global as core::alloc::Alloc&amp;gt;::alloc_zeroed (6 samples, 0.12%)&lt;/title&gt;&lt;rect x=&#34;367&#34; y=&#34;245&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(218,146,11)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;370.00&#34; y=&#34;255.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;alloc::alloc::alloc_zeroed (6 samples, 0.12%)&lt;/title&gt;&lt;rect x=&#34;367&#34; y=&#34;229&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(205,204,40)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;370.00&#34; y=&#34;239.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;__libc_calloc (6 samples, 0.12%)&lt;/title&gt;&lt;rect x=&#34;367&#34; y=&#34;213&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(231,38,54)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;370.00&#34; y=&#34;223.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[libc-2.27.so] (4 samples, 0.08%)&lt;/title&gt;&lt;rect x=&#34;368&#34; y=&#34;197&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(234,90,16)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;371.00&#34; y=&#34;207.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;_$LT$core..iter..adapters..Map$LT$I$C$$u20$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$::fold::_$u7b$$u7b$closure$u7d$$u7d$::h3c2405ddaad01b4f (13 samples, 0.25%)&lt;/title&gt;&lt;rect x=&#34;366&#34; y=&#34;373&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(209,73,53)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;369.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;nndl_rust::Network::backprop::_$u7b$$u7b$closure$u7d$$u7d$::hf6708644d898f30b (12 samples, 0.23%)&lt;/title&gt;&lt;rect x=&#34;366&#34; y=&#34;357&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(226,136,17)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;369.00&#34; y=&#34;367.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_constructors::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::zeros (12 samples, 0.23%)&lt;/title&gt;&lt;rect x=&#34;366&#34; y=&#34;341&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(246,216,20)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;369.00&#34; y=&#34;351.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_constructors::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::from_elem (12 samples, 0.23%)&lt;/title&gt;&lt;rect x=&#34;366&#34; y=&#34;325&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(246,58,10)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;369.00&#34; y=&#34;335.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::dimension::size_of_shape_checked (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;369&#34; y=&#34;309&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(248,26,28)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;372.00&#34; y=&#34;319.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::slice::&amp;lt;impl [T]&amp;gt;::iter (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;369&#34; y=&#34;293&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(214,176,35)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;372.00&#34; y=&#34;303.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::&amp;lt;impl *const T&amp;gt;::add (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;369&#34; y=&#34;277&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(219,217,45)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;372.00&#34; y=&#34;287.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::&amp;lt;impl *const T&amp;gt;::offset (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;369&#34; y=&#34;261&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(215,75,12)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;372.00&#34; y=&#34;271.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::iter::traits::iterator::Iterator::for_each::_$u7b$$u7b$closure$u7d$$u7d$::h196eb9eb7e8d762e (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;369&#34; y=&#34;357&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(251,82,12)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;372.00&#34; y=&#34;367.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;_$LT$alloc..vec..Vec$LT$T$GT$$u20$as$u20$alloc..vec..SpecExtend$LT$T$C$$u20$I$GT$$GT$::spec_extend::_$u7b$$u7b$closure$u7d$$u7d$::h9e5ebf4ec37dad8e (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;369&#34; y=&#34;341&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(207,32,38)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;372.00&#34; y=&#34;351.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::write (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;369&#34; y=&#34;325&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(249,36,9)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;372.00&#34; y=&#34;335.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::iter::traits::iterator::Iterator::collect (308 samples, 5.94%)&lt;/title&gt;&lt;rect x=&#34;365&#34; y=&#34;485&#34; width=&#34;70&#34; height=&#34;15&#34; fill=&#34;rgb(209,9,14)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;368.00&#34; y=&#34;495.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;core::i..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt; as core::iter::traits::collect::FromIterator&amp;lt;T&amp;gt;&amp;gt;::from_iter (308 samples, 5.94%)&lt;/title&gt;&lt;rect x=&#34;365&#34; y=&#34;469&#34; width=&#34;70&#34; height=&#34;15&#34; fill=&#34;rgb(207,202,22)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;368.00&#34; y=&#34;479.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&amp;lt;alloc:..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt; as alloc::vec::SpecExtend&amp;lt;T, I&amp;gt;&amp;gt;::from_iter (308 samples, 5.94%)&lt;/title&gt;&lt;rect x=&#34;365&#34; y=&#34;453&#34; width=&#34;70&#34; height=&#34;15&#34; fill=&#34;rgb(220,25,31)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;368.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&amp;lt;alloc:..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt; as alloc::vec::SpecExtend&amp;lt;T, I&amp;gt;&amp;gt;::spec_extend (308 samples, 5.94%)&lt;/title&gt;&lt;rect x=&#34;365&#34; y=&#34;437&#34; width=&#34;70&#34; height=&#34;15&#34; fill=&#34;rgb(217,85,16)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;368.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&amp;lt;alloc:..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::iter::traits::iterator::Iterator::for_each (307 samples, 5.92%)&lt;/title&gt;&lt;rect x=&#34;366&#34; y=&#34;421&#34; width=&#34;69&#34; height=&#34;15&#34; fill=&#34;rgb(238,222,1)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;369.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;core::i..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;core::iter::adapters::Map&amp;lt;I, F&amp;gt; as core::iter::traits::iterator::Iterator&amp;gt;::fold (307 samples, 5.92%)&lt;/title&gt;&lt;rect x=&#34;366&#34; y=&#34;405&#34; width=&#34;69&#34; height=&#34;15&#34; fill=&#34;rgb(228,67,25)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;369.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&amp;lt;core::..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;core::slice::Iter&amp;lt;&amp;apos;a, T&amp;gt; as core::iter::traits::iterator::Iterator&amp;gt;::fold (306 samples, 5.90%)&lt;/title&gt;&lt;rect x=&#34;366&#34; y=&#34;389&#34; width=&#34;69&#34; height=&#34;15&#34; fill=&#34;rgb(217,175,45)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;369.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&amp;lt;core::..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;_$LT$core..iter..adapters..Map$LT$I$C$$u20$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$::fold::_$u7b$$u7b$closure$u7d$$u7d$::hcf8d84009fd76c57 (293 samples, 5.65%)&lt;/title&gt;&lt;rect x=&#34;369&#34; y=&#34;373&#34; width=&#34;66&#34; height=&#34;15&#34; fill=&#34;rgb(224,204,32)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;372.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;_$LT$co..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;nndl_rust::Network::backprop::_$u7b$$u7b$closure$u7d$$u7d$::hc025177ae5e59770 (292 samples, 5.63%)&lt;/title&gt;&lt;rect x=&#34;369&#34; y=&#34;357&#34; width=&#34;66&#34; height=&#34;15&#34; fill=&#34;rgb(246,87,14)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;372.00&#34; y=&#34;367.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;nndl_ru..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_constructors::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::zeros (292 samples, 5.63%)&lt;/title&gt;&lt;rect x=&#34;369&#34; y=&#34;341&#34; width=&#34;66&#34; height=&#34;15&#34; fill=&#34;rgb(220,119,8)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;372.00&#34; y=&#34;351.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;ndarray..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_constructors::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::from_elem (292 samples, 5.63%)&lt;/title&gt;&lt;rect x=&#34;369&#34; y=&#34;325&#34; width=&#34;66&#34; height=&#34;15&#34; fill=&#34;rgb(231,90,21)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;372.00&#34; y=&#34;335.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;ndarray..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;alloc::vec::from_elem (289 samples, 5.58%)&lt;/title&gt;&lt;rect x=&#34;370&#34; y=&#34;309&#34; width=&#34;65&#34; height=&#34;15&#34; fill=&#34;rgb(241,203,48)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;373.00&#34; y=&#34;319.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;alloc::..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;T as alloc::vec::SpecFromElem&amp;gt;::from_elem (289 samples, 5.58%)&lt;/title&gt;&lt;rect x=&#34;370&#34; y=&#34;293&#34; width=&#34;65&#34; height=&#34;15&#34; fill=&#34;rgb(212,98,10)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;373.00&#34; y=&#34;303.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&amp;lt;T as a..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T&amp;gt;&amp;gt;::with_capacity_zeroed (289 samples, 5.58%)&lt;/title&gt;&lt;rect x=&#34;370&#34; y=&#34;277&#34; width=&#34;65&#34; height=&#34;15&#34; fill=&#34;rgb(212,152,18)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;373.00&#34; y=&#34;287.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&amp;lt;alloc:..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T, A&amp;gt;&amp;gt;::allocate_in (289 samples, 5.58%)&lt;/title&gt;&lt;rect x=&#34;370&#34; y=&#34;261&#34; width=&#34;65&#34; height=&#34;15&#34; fill=&#34;rgb(241,134,47)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;373.00&#34; y=&#34;271.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&amp;lt;alloc:..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::alloc::Global as core::alloc::Alloc&amp;gt;::alloc_zeroed (288 samples, 5.56%)&lt;/title&gt;&lt;rect x=&#34;370&#34; y=&#34;245&#34; width=&#34;65&#34; height=&#34;15&#34; fill=&#34;rgb(238,180,15)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;373.00&#34; y=&#34;255.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&amp;lt;alloc:..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;alloc::alloc::alloc_zeroed (288 samples, 5.56%)&lt;/title&gt;&lt;rect x=&#34;370&#34; y=&#34;229&#34; width=&#34;65&#34; height=&#34;15&#34; fill=&#34;rgb(211,21,24)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;373.00&#34; y=&#34;239.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;alloc::..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;__libc_calloc (288 samples, 5.56%)&lt;/title&gt;&lt;rect x=&#34;370&#34; y=&#34;213&#34; width=&#34;65&#34; height=&#34;15&#34; fill=&#34;rgb(207,220,41)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;373.00&#34; y=&#34;223.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;__libc_..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[libc-2.27.so] (286 samples, 5.52%)&lt;/title&gt;&lt;rect x=&#34;370&#34; y=&#34;197&#34; width=&#34;65&#34; height=&#34;15&#34; fill=&#34;rgb(222,0,44)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;373.00&#34; y=&#34;207.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;[libc-2..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[libc-2.27.so] (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;435&#34; y=&#34;181&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(220,125,6)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;438.00&#34; y=&#34;191.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;__rust_dealloc (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;435&#34; y=&#34;293&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(216,7,30)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;438.00&#34; y=&#34;303.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt; as core::ops::drop::Drop&amp;gt;::drop (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;435&#34; y=&#34;469&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(233,144,8)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;438.00&#34; y=&#34;479.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::drop_in_place (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;435&#34; y=&#34;453&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(212,174,26)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;438.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::real_drop_in_place (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;435&#34; y=&#34;437&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(248,70,46)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;438.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::real_drop_in_place (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;435&#34; y=&#34;421&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(230,70,19)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;438.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::real_drop_in_place (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;435&#34; y=&#34;405&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(228,220,18)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;438.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::real_drop_in_place (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;435&#34; y=&#34;389&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(210,227,3)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;438.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::real_drop_in_place (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;435&#34; y=&#34;373&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(216,69,17)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;438.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T, A&amp;gt; as core::ops::drop::Drop&amp;gt;::drop (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;435&#34; y=&#34;357&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(224,225,33)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;438.00&#34; y=&#34;367.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T, A&amp;gt;&amp;gt;::dealloc_buffer (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;435&#34; y=&#34;341&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(243,94,49)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;438.00&#34; y=&#34;351.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::alloc::Global as core::alloc::Alloc&amp;gt;::dealloc (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;435&#34; y=&#34;325&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(237,91,1)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;438.00&#34; y=&#34;335.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;alloc::alloc::dealloc (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;435&#34; y=&#34;309&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(206,88,6)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;438.00&#34; y=&#34;319.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;cfree (4 samples, 0.08%)&lt;/title&gt;&lt;rect x=&#34;436&#34; y=&#34;293&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(227,215,53)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;439.00&#34; y=&#34;303.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;__rust_dealloc (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;437&#34; y=&#34;389&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(220,103,44)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;440.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T, A&amp;gt; as core::ops::drop::Drop&amp;gt;::drop (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;437&#34; y=&#34;453&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(220,170,52)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;440.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T, A&amp;gt;&amp;gt;::dealloc_buffer (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;437&#34; y=&#34;437&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(232,209,38)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;440.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::alloc::Global as core::alloc::Alloc&amp;gt;::dealloc (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;437&#34; y=&#34;421&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(235,126,28)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;440.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;alloc::alloc::dealloc (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;437&#34; y=&#34;405&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(220,221,32)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;440.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;cfree (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;437&#34; y=&#34;389&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(245,62,15)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;440.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::real_drop_in_place (14 samples, 0.27%)&lt;/title&gt;&lt;rect x=&#34;435&#34; y=&#34;485&#34; width=&#34;4&#34; height=&#34;15&#34; fill=&#34;rgb(206,116,0)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;438.00&#34; y=&#34;495.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::real_drop_in_place (9 samples, 0.17%)&lt;/title&gt;&lt;rect x=&#34;437&#34; y=&#34;469&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(216,51,23)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;440.00&#34; y=&#34;479.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::real_drop_in_place (7 samples, 0.14%)&lt;/title&gt;&lt;rect x=&#34;437&#34; y=&#34;453&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(205,226,32)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;440.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::real_drop_in_place (7 samples, 0.14%)&lt;/title&gt;&lt;rect x=&#34;437&#34; y=&#34;437&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(253,18,20)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;440.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T, A&amp;gt; as core::ops::drop::Drop&amp;gt;::drop (7 samples, 0.14%)&lt;/title&gt;&lt;rect x=&#34;437&#34; y=&#34;421&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(252,32,42)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;440.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T, A&amp;gt;&amp;gt;::dealloc_buffer (7 samples, 0.14%)&lt;/title&gt;&lt;rect x=&#34;437&#34; y=&#34;405&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(232,24,51)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;440.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::alloc::Global as core::alloc::Alloc&amp;gt;::dealloc (7 samples, 0.14%)&lt;/title&gt;&lt;rect x=&#34;437&#34; y=&#34;389&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(222,217,2)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;440.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;alloc::alloc::dealloc (7 samples, 0.14%)&lt;/title&gt;&lt;rect x=&#34;437&#34; y=&#34;373&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(248,24,40)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;440.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;cfree (7 samples, 0.14%)&lt;/title&gt;&lt;rect x=&#34;437&#34; y=&#34;357&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(221,99,29)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;440.00&#34; y=&#34;367.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt;&amp;gt;::extend_from_slice (46 samples, 0.89%)&lt;/title&gt;&lt;rect x=&#34;440&#34; y=&#34;389&#34; width=&#34;10&#34; height=&#34;15&#34; fill=&#34;rgb(231,163,10)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;443.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt; as alloc::vec::SpecExtend&amp;lt;&amp;amp;&amp;apos;a T, core::slice::Iter&amp;lt;&amp;apos;a, T&amp;gt;&amp;gt;&amp;gt;::spec_extend (46 samples, 0.89%)&lt;/title&gt;&lt;rect x=&#34;440&#34; y=&#34;373&#34; width=&#34;10&#34; height=&#34;15&#34; fill=&#34;rgb(250,72,25)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;443.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::slice::&amp;lt;impl [T]&amp;gt;::copy_from_slice (46 samples, 0.89%)&lt;/title&gt;&lt;rect x=&#34;440&#34; y=&#34;357&#34; width=&#34;10&#34; height=&#34;15&#34; fill=&#34;rgb(213,26,17)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;443.00&#34; y=&#34;367.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::intrinsics::copy_nonoverlapping (46 samples, 0.89%)&lt;/title&gt;&lt;rect x=&#34;440&#34; y=&#34;341&#34; width=&#34;10&#34; height=&#34;15&#34; fill=&#34;rgb(235,35,21)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;443.00&#34; y=&#34;351.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[libc-2.27.so] (46 samples, 0.89%)&lt;/title&gt;&lt;rect x=&#34;440&#34; y=&#34;325&#34; width=&#34;10&#34; height=&#34;15&#34; fill=&#34;rgb(231,135,48)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;443.00&#34; y=&#34;335.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::alloc::Global as core::alloc::Alloc&amp;gt;::alloc (12 samples, 0.23%)&lt;/title&gt;&lt;rect x=&#34;450&#34; y=&#34;341&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(219,79,14)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;453.00&#34; y=&#34;351.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;alloc::alloc::alloc (12 samples, 0.23%)&lt;/title&gt;&lt;rect x=&#34;450&#34; y=&#34;325&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(235,1,24)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;453.00&#34; y=&#34;335.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;__libc_malloc (12 samples, 0.23%)&lt;/title&gt;&lt;rect x=&#34;450&#34; y=&#34;309&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(215,58,51)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;453.00&#34; y=&#34;319.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[libc-2.27.so] (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;452&#34; y=&#34;293&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(253,66,45)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;455.00&#34; y=&#34;303.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_clone::&amp;lt;impl core::clone::Clone for ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::clone (63 samples, 1.22%)&lt;/title&gt;&lt;rect x=&#34;439&#34; y=&#34;485&#34; width=&#34;14&#34; height=&#34;15&#34; fill=&#34;rgb(235,80,28)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;442.00&#34; y=&#34;495.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;ndarray::OwnedRepr&amp;lt;A&amp;gt; as ndarray::data_traits::DataClone&amp;gt;::clone_with_ptr (60 samples, 1.16%)&lt;/title&gt;&lt;rect x=&#34;439&#34; y=&#34;469&#34; width=&#34;14&#34; height=&#34;15&#34; fill=&#34;rgb(243,3,8)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;442.00&#34; y=&#34;479.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;ndarray::OwnedRepr&amp;lt;A&amp;gt; as core::clone::Clone&amp;gt;::clone (60 samples, 1.16%)&lt;/title&gt;&lt;rect x=&#34;439&#34; y=&#34;453&#34; width=&#34;14&#34; height=&#34;15&#34; fill=&#34;rgb(217,0,30)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;442.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt; as core::clone::Clone&amp;gt;::clone (60 samples, 1.16%)&lt;/title&gt;&lt;rect x=&#34;439&#34; y=&#34;437&#34; width=&#34;14&#34; height=&#34;15&#34; fill=&#34;rgb(253,38,21)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;442.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;alloc::slice::&amp;lt;impl [T]&amp;gt;::to_vec (59 samples, 1.14%)&lt;/title&gt;&lt;rect x=&#34;440&#34; y=&#34;421&#34; width=&#34;13&#34; height=&#34;15&#34; fill=&#34;rgb(252,7,0)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;443.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;alloc::slice::hack::to_vec (59 samples, 1.14%)&lt;/title&gt;&lt;rect x=&#34;440&#34; y=&#34;405&#34; width=&#34;13&#34; height=&#34;15&#34; fill=&#34;rgb(242,214,40)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;443.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt;&amp;gt;::with_capacity (13 samples, 0.25%)&lt;/title&gt;&lt;rect x=&#34;450&#34; y=&#34;389&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(235,227,5)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;453.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T&amp;gt;&amp;gt;::with_capacity (13 samples, 0.25%)&lt;/title&gt;&lt;rect x=&#34;450&#34; y=&#34;373&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(244,16,49)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;453.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T, A&amp;gt;&amp;gt;::allocate_in (13 samples, 0.25%)&lt;/title&gt;&lt;rect x=&#34;450&#34; y=&#34;357&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(208,104,12)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;453.00&#34; y=&#34;367.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::num::&amp;lt;impl usize&amp;gt;::checked_mul (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;453&#34; y=&#34;341&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(244,29,34)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;456.00&#34; y=&#34;351.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::num::&amp;lt;impl usize&amp;gt;::overflowing_mul (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;453&#34; y=&#34;325&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(217,35,51)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;456.00&#34; y=&#34;335.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::iter::range::&amp;lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&amp;lt;A&amp;gt;&amp;gt;::next (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;453&#34; y=&#34;437&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(247,114,33)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;456.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;usize as core::iter::range::Step&amp;gt;::add_usize (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;453&#34; y=&#34;421&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(220,63,30)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;456.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::num::&amp;lt;impl usize&amp;gt;::checked_add (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;453&#34; y=&#34;405&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(248,222,41)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;456.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::num::&amp;lt;impl usize&amp;gt;::overflowing_add (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;453&#34; y=&#34;389&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(251,60,20)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;456.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::as_slice_mut (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;454&#34; y=&#34;437&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(241,100,41)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;457.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::is_standard_layout (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;454&#34; y=&#34;421&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(210,184,8)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;457.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::is_standard_layout::is_standard_layout (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;454&#34; y=&#34;405&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(222,160,16)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;457.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::iter::traits::iterator::Iterator::any (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;454&#34; y=&#34;389&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(221,151,33)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;457.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::iter::traits::iterator::Iterator::try_for_each (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;454&#34; y=&#34;373&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(240,127,15)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;457.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;core::slice::Iter&amp;lt;&amp;apos;a, T&amp;gt; as core::iter::traits::iterator::Iterator&amp;gt;::try_fold (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;454&#34; y=&#34;357&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(212,89,51)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;457.00&#34; y=&#34;367.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_ops::arithmetic_ops::&amp;lt;impl core::ops::arith::Add&amp;lt;&amp;amp;&amp;apos;a ndarray::ArrayBase&amp;lt;S2, E&amp;gt;&amp;gt; for ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::add (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;453&#34; y=&#34;485&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(226,193,19)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;456.00&#34; y=&#34;495.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::zip_mut_with (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;453&#34; y=&#34;469&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(212,99,26)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;456.00&#34; y=&#34;479.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::zip_mut_with_same_shape (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;453&#34; y=&#34;453&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(242,31,7)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;456.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_ops::arithmetic_ops::_$LT$impl$u20$core..ops..arith..Add$LT$$RF$$u27$a$u20$ndarray..ArrayBase$LT$S2$C$$u20$E$GT$$GT$$u20$for$u20$ndarray..ArrayBase$LT$S$C$$u20$D$GT$$GT$::add::_$u7b$$u7b$closure$u7d$$u7d$::hdb62ebe110047a82 (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;454&#34; y=&#34;437&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(227,70,53)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;457.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;f64 as core::ops::arith::Add&amp;gt;::add (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;454&#34; y=&#34;421&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(235,60,45)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;457.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::iter::range::&amp;lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&amp;lt;A&amp;gt;&amp;gt;::next (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;454&#34; y=&#34;421&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(251,126,34)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;457.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;usize as core::iter::range::Step&amp;gt;::add_usize (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;454&#34; y=&#34;405&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(238,72,41)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;457.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::num::&amp;lt;impl usize&amp;gt;::checked_add (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;454&#34; y=&#34;389&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(247,143,39)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;457.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::num::&amp;lt;impl usize&amp;gt;::overflowing_add (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;454&#34; y=&#34;373&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(212,113,13)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;457.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_ops::arithmetic_ops::&amp;lt;impl core::ops::arith::Mul&amp;lt;ndarray::ArrayBase&amp;lt;S2, E&amp;gt;&amp;gt; for ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::mul (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;454&#34; y=&#34;485&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(217,141,37)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;457.00&#34; y=&#34;495.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_ops::arithmetic_ops::&amp;lt;impl core::ops::arith::Mul&amp;lt;&amp;amp;&amp;apos;a ndarray::ArrayBase&amp;lt;S2, E&amp;gt;&amp;gt; for ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::mul (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;454&#34; y=&#34;469&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(240,228,38)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;457.00&#34; y=&#34;479.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::zip_mut_with (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;454&#34; y=&#34;453&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(240,104,35)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;457.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::zip_mut_with_same_shape (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;454&#34; y=&#34;437&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(218,148,6)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;457.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::as_slice_mut (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;455&#34; y=&#34;421&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(212,162,42)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;458.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::is_standard_layout (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;455&#34; y=&#34;405&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(247,19,2)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;458.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::is_standard_layout::is_standard_layout (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;455&#34; y=&#34;389&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(217,106,12)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;458.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::iter::traits::iterator::Iterator::any (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;455&#34; y=&#34;373&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(233,28,9)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;458.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::iter::traits::iterator::Iterator::try_for_each (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;455&#34; y=&#34;357&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(215,27,19)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;458.00&#34; y=&#34;367.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;core::slice::Iter&amp;lt;&amp;apos;a, T&amp;gt; as core::iter::traits::iterator::Iterator&amp;gt;::try_fold (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;455&#34; y=&#34;341&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(210,176,47)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;458.00&#34; y=&#34;351.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::dim (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;455&#34; y=&#34;453&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(248,90,19)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;458.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;ndarray::dimension::dim::Dim&amp;lt;I&amp;gt; as core::clone::Clone&amp;gt;::clone (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;455&#34; y=&#34;437&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(220,116,49)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;458.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::clone::Clone::clone (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;455&#34; y=&#34;421&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(245,120,16)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;458.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::view_mut (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;455&#34; y=&#34;453&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(238,217,16)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;458.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_views::&amp;lt;impl ndarray::ArrayBase&amp;lt;ndarray::ViewRepr&amp;lt;&amp;amp;&amp;apos;a mut A&amp;gt;, D&amp;gt;&amp;gt;::new_ (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;455&#34; y=&#34;437&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(253,208,23)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;458.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;__GI___pthread_mutex_unlock (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;456&#34; y=&#34;421&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(240,202,46)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;459.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;blas_memory_alloc (4 samples, 0.08%)&lt;/title&gt;&lt;rect x=&#34;456&#34; y=&#34;421&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(251,200,22)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;459.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;__GI___pthread_mutex_lock (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;456&#34; y=&#34;405&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(249,136,48)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;459.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;blas_memory_free (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;457&#34; y=&#34;421&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(225,167,34)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;460.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;__GI___pthread_mutex_lock (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;457&#34; y=&#34;405&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(211,49,8)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;460.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;dgemm_itcopy_HASWELL (12 samples, 0.23%)&lt;/title&gt;&lt;rect x=&#34;458&#34; y=&#34;405&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(240,40,4)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;461.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::linalg::impl_linalg::_$LT$impl$u20$ndarray..ArrayBase$LT$S$C$$u20$ndarray..dimension..dim..Dim$LT$$u5b$usize$u3b$$u20$_$u5d$$GT$$GT$$GT$::dot::h6d56249ebe4e2f12 (25 samples, 0.48%)&lt;/title&gt;&lt;rect x=&#34;455&#34; y=&#34;485&#34; width=&#34;6&#34; height=&#34;15&#34; fill=&#34;rgb(217,184,7)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;458.00&#34; y=&#34;495.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;_$LT$ndarray..ArrayBase$LT$S$C$$u20$ndarray..dimension..dim..Dim$LT$$u5b$usize$u3b$$u20$_$u5d$$GT$$GT$$u20$as$u20$ndarray..linalg..impl_linalg..Dot$LT$ndarray..ArrayBase$LT$S2$C$$u20$ndarray..dimension..dim..Dim$LT$$u5b$usize$u3b$$u20$_$u5d$$GT$$GT$$GT$$GT$::dot::hc6e58547238892a7 (25 samples, 0.48%)&lt;/title&gt;&lt;rect x=&#34;455&#34; y=&#34;469&#34; width=&#34;6&#34; height=&#34;15&#34; fill=&#34;rgb(207,42,31)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;458.00&#34; y=&#34;479.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::linalg::impl_linalg::mat_mul_impl (23 samples, 0.44%)&lt;/title&gt;&lt;rect x=&#34;455&#34; y=&#34;453&#34; width=&#34;6&#34; height=&#34;15&#34; fill=&#34;rgb(235,205,24)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;458.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;cblas_dgemm (23 samples, 0.44%)&lt;/title&gt;&lt;rect x=&#34;455&#34; y=&#34;437&#34; width=&#34;6&#34; height=&#34;15&#34; fill=&#34;rgb(241,134,40)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;458.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;dgemm_nn (15 samples, 0.29%)&lt;/title&gt;&lt;rect x=&#34;457&#34; y=&#34;421&#34; width=&#34;4&#34; height=&#34;15&#34; fill=&#34;rgb(253,174,21)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;460.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;dgemm_oncopy_HASWELL (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;460&#34; y=&#34;405&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(234,212,34)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;463.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::alloc::Global as core::alloc::Alloc&amp;gt;::alloc (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;461&#34; y=&#34;405&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(230,203,13)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;464.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;alloc::alloc::alloc (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;461&#34; y=&#34;389&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(238,76,12)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;464.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;__libc_malloc (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;461&#34; y=&#34;373&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(237,186,48)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;464.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt;&amp;gt;::with_capacity (4 samples, 0.08%)&lt;/title&gt;&lt;rect x=&#34;461&#34; y=&#34;453&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(225,54,13)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;464.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T&amp;gt;&amp;gt;::with_capacity (4 samples, 0.08%)&lt;/title&gt;&lt;rect x=&#34;461&#34; y=&#34;437&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(229,38,1)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;464.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T, A&amp;gt;&amp;gt;::allocate_in (4 samples, 0.08%)&lt;/title&gt;&lt;rect x=&#34;461&#34; y=&#34;421&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(210,185,13)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;464.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::num::&amp;lt;impl usize&amp;gt;::checked_mul (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;461&#34; y=&#34;405&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(247,79,53)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;464.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::num::&amp;lt;impl usize&amp;gt;::overflowing_mul (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;461&#34; y=&#34;389&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(218,194,41)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;464.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::view (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;461&#34; y=&#34;453&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(242,44,20)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;464.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;__GI___pthread_mutex_unlock (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;462&#34; y=&#34;421&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(214,137,29)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;465.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;__GI___pthread_mutex_lock (4 samples, 0.08%)&lt;/title&gt;&lt;rect x=&#34;463&#34; y=&#34;405&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(249,131,54)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;466.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;blas_memory_alloc (7 samples, 0.14%)&lt;/title&gt;&lt;rect x=&#34;463&#34; y=&#34;421&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(214,24,18)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;466.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;pthread_mutex_lock@plt (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;464&#34; y=&#34;405&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(247,106,25)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;467.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;blas_memory_free (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;464&#34; y=&#34;421&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(235,97,16)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;467.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;__GI___pthread_mutex_lock (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;464&#34; y=&#34;405&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(207,224,2)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;467.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;dgemm_itcopy_HASWELL (33 samples, 0.64%)&lt;/title&gt;&lt;rect x=&#34;468&#34; y=&#34;405&#34; width=&#34;8&#34; height=&#34;15&#34; fill=&#34;rgb(229,42,5)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;471.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::linalg::impl_linalg::_$LT$impl$u20$ndarray..ArrayBase$LT$S$C$$u20$ndarray..dimension..dim..Dim$LT$$u5b$usize$u3b$$u20$_$u5d$$GT$$GT$$GT$::dot::hcef54f2ce75d3905 (1,109 samples, 21.40%)&lt;/title&gt;&lt;rect x=&#34;461&#34; y=&#34;485&#34; width=&#34;252&#34; height=&#34;15&#34; fill=&#34;rgb(207,171,44)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;464.00&#34; y=&#34;495.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;ndarray::linalg::impl_linalg::_$L..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;_$LT$ndarray..ArrayBase$LT$S$C$$u20$ndarray..dimension..dim..Dim$LT$$u5b$usize$u3b$$u20$_$u5d$$GT$$GT$$u20$as$u20$ndarray..linalg..impl_linalg..Dot$LT$ndarray..ArrayBase$LT$S2$C$$u20$ndarray..dimension..dim..Dim$LT$$u5b$usize$u3b$$u20$_$u5d$$GT$$GT$$GT$$GT$::dot::h48a7db9fda0dd69f (1,109 samples, 21.40%)&lt;/title&gt;&lt;rect x=&#34;461&#34; y=&#34;469&#34; width=&#34;252&#34; height=&#34;15&#34; fill=&#34;rgb(238,45,30)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;464.00&#34; y=&#34;479.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;_$LT$ndarray..ArrayBase$LT$S$C$$u..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::linalg::impl_linalg::mat_mul_impl (1,104 samples, 21.30%)&lt;/title&gt;&lt;rect x=&#34;462&#34; y=&#34;453&#34; width=&#34;251&#34; height=&#34;15&#34; fill=&#34;rgb(239,141,54)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;465.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;ndarray::linalg::impl_linalg::mat..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;cblas_dgemm (1,104 samples, 21.30%)&lt;/title&gt;&lt;rect x=&#34;462&#34; y=&#34;437&#34; width=&#34;251&#34; height=&#34;15&#34; fill=&#34;rgb(214,229,10)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;465.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;cblas_dgemm&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;dgemm_nn (1,090 samples, 21.03%)&lt;/title&gt;&lt;rect x=&#34;465&#34; y=&#34;421&#34; width=&#34;248&#34; height=&#34;15&#34; fill=&#34;rgb(247,20,46)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;468.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;dgemm_nn&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;dgemm_oncopy_HASWELL (1,042 samples, 20.10%)&lt;/title&gt;&lt;rect x=&#34;476&#34; y=&#34;405&#34; width=&#34;237&#34; height=&#34;15&#34; fill=&#34;rgb(246,104,4)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;479.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;dgemm_oncopy_HASWELL&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;713&#34; y=&#34;389&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(239,19,3)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;716.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;713&#34; y=&#34;373&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(232,56,9)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;716.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::alloc::Global as core::alloc::Alloc&amp;gt;::alloc (10 samples, 0.19%)&lt;/title&gt;&lt;rect x=&#34;713&#34; y=&#34;405&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(223,156,37)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;716.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;alloc::alloc::alloc (10 samples, 0.19%)&lt;/title&gt;&lt;rect x=&#34;713&#34; y=&#34;389&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(221,110,40)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;716.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;__libc_malloc (10 samples, 0.19%)&lt;/title&gt;&lt;rect x=&#34;713&#34; y=&#34;373&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(244,101,52)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;716.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[libc-2.27.so] (7 samples, 0.14%)&lt;/title&gt;&lt;rect x=&#34;714&#34; y=&#34;357&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(241,140,31)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;717.00&#34; y=&#34;367.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt;&amp;gt;::with_capacity (12 samples, 0.23%)&lt;/title&gt;&lt;rect x=&#34;713&#34; y=&#34;453&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(229,153,29)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;716.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T&amp;gt;&amp;gt;::with_capacity (11 samples, 0.21%)&lt;/title&gt;&lt;rect x=&#34;713&#34; y=&#34;437&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(242,28,44)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;716.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T, A&amp;gt;&amp;gt;::allocate_in (11 samples, 0.21%)&lt;/title&gt;&lt;rect x=&#34;713&#34; y=&#34;421&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(234,142,2)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;716.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::num::&amp;lt;impl usize&amp;gt;::checked_mul (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;716&#34; y=&#34;405&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(229,160,47)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;719.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::num::&amp;lt;impl usize&amp;gt;::overflowing_mul (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;716&#34; y=&#34;389&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(237,1,6)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;719.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;__GI___pthread_mutex_unlock (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;716&#34; y=&#34;421&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(208,137,38)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;719.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;blas_memory_alloc (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;717&#34; y=&#34;421&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(220,169,19)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;720.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;blas_memory_free (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;718&#34; y=&#34;421&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(233,217,0)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;721.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;__GI___pthread_mutex_lock (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;718&#34; y=&#34;405&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(239,54,20)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;721.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;dgemm_itcopy_HASWELL (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;722&#34; y=&#34;405&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(218,39,43)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;725.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::linalg::impl_linalg::_$LT$impl$u20$ndarray..ArrayBase$LT$S$C$$u20$ndarray..dimension..dim..Dim$LT$$u5b$usize$u3b$$u20$_$u5d$$GT$$GT$$GT$::dot::hd1efb90db040728a (70 samples, 1.35%)&lt;/title&gt;&lt;rect x=&#34;713&#34; y=&#34;485&#34; width=&#34;16&#34; height=&#34;15&#34; fill=&#34;rgb(251,189,6)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;716.00&#34; y=&#34;495.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;_$LT$ndarray..ArrayBase$LT$S$C$$u20$ndarray..dimension..dim..Dim$LT$$u5b$usize$u3b$$u20$_$u5d$$GT$$GT$$u20$as$u20$ndarray..linalg..impl_linalg..Dot$LT$ndarray..ArrayBase$LT$S2$C$$u20$ndarray..dimension..dim..Dim$LT$$u5b$usize$u3b$$u20$_$u5d$$GT$$GT$$GT$$GT$::dot::h9a17b0f2ea36613c (70 samples, 1.35%)&lt;/title&gt;&lt;rect x=&#34;713&#34; y=&#34;469&#34; width=&#34;16&#34; height=&#34;15&#34; fill=&#34;rgb(244,41,15)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;716.00&#34; y=&#34;479.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::linalg::impl_linalg::mat_mul_impl (57 samples, 1.10%)&lt;/title&gt;&lt;rect x=&#34;716&#34; y=&#34;453&#34; width=&#34;13&#34; height=&#34;15&#34; fill=&#34;rgb(233,106,0)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;719.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;cblas_dgemm (57 samples, 1.10%)&lt;/title&gt;&lt;rect x=&#34;716&#34; y=&#34;437&#34; width=&#34;13&#34; height=&#34;15&#34; fill=&#34;rgb(212,13,20)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;719.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;dgemm_nn (44 samples, 0.85%)&lt;/title&gt;&lt;rect x=&#34;719&#34; y=&#34;421&#34; width=&#34;10&#34; height=&#34;15&#34; fill=&#34;rgb(230,184,52)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;722.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;dgemm_oncopy_HASWELL (29 samples, 0.56%)&lt;/title&gt;&lt;rect x=&#34;722&#34; y=&#34;405&#34; width=&#34;7&#34; height=&#34;15&#34; fill=&#34;rgb(234,217,46)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;725.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;nndl_rust::Network::cost_derivative (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;729&#34; y=&#34;485&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(248,181,51)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;732.00&#34; y=&#34;495.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_ops::arithmetic_ops::&amp;lt;impl core::ops::arith::Sub&amp;lt;&amp;amp;&amp;apos;a ndarray::ArrayBase&amp;lt;S2, E&amp;gt;&amp;gt; for &amp;amp;&amp;apos;a ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::sub (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;729&#34; y=&#34;469&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(235,35,4)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;732.00&#34; y=&#34;479.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_ops::arithmetic_ops::&amp;lt;impl core::ops::arith::Sub&amp;lt;&amp;amp;&amp;apos;a ndarray::ArrayBase&amp;lt;S2, E&amp;gt;&amp;gt; for ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::sub (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;729&#34; y=&#34;453&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(235,92,8)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;732.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::zip_mut_with (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;729&#34; y=&#34;437&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(243,88,14)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;732.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::cmp::impls::&amp;lt;impl core::cmp::PartialEq&amp;lt;&amp;amp;&amp;apos;b B&amp;gt; for &amp;amp;&amp;apos;a A&amp;gt;::eq (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;729&#34; y=&#34;421&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(252,173,21)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;732.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::slice::&amp;lt;impl core::cmp::PartialEq&amp;lt;[B]&amp;gt; for [A]&amp;gt;::eq (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;729&#34; y=&#34;405&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(218,47,1)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;732.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;[A] as core::slice::SlicePartialEq&amp;lt;A&amp;gt;&amp;gt;::equal (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;729&#34; y=&#34;389&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(225,212,35)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;732.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::real_drop_in_place (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;729&#34; y=&#34;469&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(223,11,44)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;732.00&#34; y=&#34;479.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::real_drop_in_place (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;729&#34; y=&#34;453&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(222,229,26)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;732.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::real_drop_in_place (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;729&#34; y=&#34;437&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(238,119,41)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;732.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::real_drop_in_place (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;729&#34; y=&#34;421&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(210,65,10)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;732.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T, A&amp;gt; as core::ops::drop::Drop&amp;gt;::drop (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;729&#34; y=&#34;405&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(218,161,8)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;732.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T, A&amp;gt;&amp;gt;::dealloc_buffer (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;729&#34; y=&#34;389&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(208,84,15)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;732.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::alloc::Global as core::alloc::Alloc&amp;gt;::dealloc (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;729&#34; y=&#34;373&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(242,29,43)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;732.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;alloc::alloc::dealloc (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;729&#34; y=&#34;357&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(246,137,34)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;732.00&#34; y=&#34;367.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;cfree (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;729&#34; y=&#34;341&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(216,32,36)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;732.00&#34; y=&#34;351.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_constructors::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::from_shape_vec_unchecked (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;730&#34; y=&#34;437&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(247,186,31)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;733.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_constructors::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::from_vec_dim_stride_unchecked (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;730&#34; y=&#34;421&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(233,8,39)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;733.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;@plt (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;731&#34; y=&#34;325&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(215,116,35)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;734.00&#34; y=&#34;335.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::mapv (36 samples, 0.69%)&lt;/title&gt;&lt;rect x=&#34;730&#34; y=&#34;469&#34; width=&#34;8&#34; height=&#34;15&#34; fill=&#34;rgb(250,116,26)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;733.00&#34; y=&#34;479.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::map (36 samples, 0.69%)&lt;/title&gt;&lt;rect x=&#34;730&#34; y=&#34;453&#34; width=&#34;8&#34; height=&#34;15&#34; fill=&#34;rgb(210,37,31)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;733.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::iterators::to_vec_mapped (35 samples, 0.68%)&lt;/title&gt;&lt;rect x=&#34;730&#34; y=&#34;437&#34; width=&#34;8&#34; height=&#34;15&#34; fill=&#34;rgb(249,2,41)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;733.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;core::slice::Iter&amp;lt;&amp;apos;a, T&amp;gt; as core::iter::traits::iterator::Iterator&amp;gt;::fold (35 samples, 0.68%)&lt;/title&gt;&lt;rect x=&#34;730&#34; y=&#34;421&#34; width=&#34;8&#34; height=&#34;15&#34; fill=&#34;rgb(216,35,22)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;733.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::iterators::to_vec_mapped::_$u7b$$u7b$closure$u7d$$u7d$::h96d4b65474d2726b (34 samples, 0.66%)&lt;/title&gt;&lt;rect x=&#34;731&#34; y=&#34;405&#34; width=&#34;7&#34; height=&#34;15&#34; fill=&#34;rgb(208,98,9)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;734.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::_$LT$impl$u20$ndarray..ArrayBase$LT$S$C$$u20$D$GT$$GT$::mapv::_$u7b$$u7b$closure$u7d$$u7d$::h8da8f33936077f61 (34 samples, 0.66%)&lt;/title&gt;&lt;rect x=&#34;731&#34; y=&#34;389&#34; width=&#34;7&#34; height=&#34;15&#34; fill=&#34;rgb(214,93,23)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;734.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ops::function::FnMut::call_mut (34 samples, 0.66%)&lt;/title&gt;&lt;rect x=&#34;731&#34; y=&#34;373&#34; width=&#34;7&#34; height=&#34;15&#34; fill=&#34;rgb(217,128,15)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;734.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;std::f64::&amp;lt;impl f64&amp;gt;::exp (34 samples, 0.66%)&lt;/title&gt;&lt;rect x=&#34;731&#34; y=&#34;357&#34; width=&#34;7&#34; height=&#34;15&#34; fill=&#34;rgb(230,64,21)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;734.00&#34; y=&#34;367.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;expf64 (32 samples, 0.62%)&lt;/title&gt;&lt;rect x=&#34;731&#34; y=&#34;341&#34; width=&#34;7&#34; height=&#34;15&#34; fill=&#34;rgb(245,98,21)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;734.00&#34; y=&#34;351.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[libm-2.27.so] (27 samples, 0.52%)&lt;/title&gt;&lt;rect x=&#34;732&#34; y=&#34;325&#34; width=&#34;6&#34; height=&#34;15&#34; fill=&#34;rgb(250,28,24)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;735.00&#34; y=&#34;335.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_ops::arithmetic_ops::&amp;lt;impl core::ops::arith::Add&amp;lt;ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt; for f64&amp;gt;::add (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;738&#34; y=&#34;469&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(230,140,38)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;741.00&#34; y=&#34;479.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_ops::arithmetic_ops::&amp;lt;impl core::ops::arith::Add&amp;lt;B&amp;gt; for ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::add (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;738&#34; y=&#34;453&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(244,229,32)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;741.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::unordered_foreach_mut (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;738&#34; y=&#34;437&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(219,25,14)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;741.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::as_slice_memory_order_mut (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;738&#34; y=&#34;421&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(244,14,36)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;741.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::is_contiguous (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;738&#34; y=&#34;405&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(243,180,37)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;741.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::dimension::dimension_trait::Dimension::is_contiguous (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;738&#34; y=&#34;389&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(240,133,5)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;741.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;_$LT$ndarray..dimension..dim..Dim$LT$$u5b$usize$u3b$$u20$_$u5d$$GT$$u20$as$u20$ndarray..dimension..dimension_trait..Dimension$GT$::equal::h151a9fa6ecaa2e70 (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;738&#34; y=&#34;373&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(250,152,14)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;741.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::iter::range::&amp;lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&amp;lt;A&amp;gt;&amp;gt;::next (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;739&#34; y=&#34;437&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(249,88,30)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;742.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;usize as core::iter::range::Step&amp;gt;::add_usize (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;739&#34; y=&#34;421&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(215,58,24)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;742.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::num::&amp;lt;impl usize&amp;gt;::checked_add (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;739&#34; y=&#34;405&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(235,150,6)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;742.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::num::&amp;lt;impl usize&amp;gt;::overflowing_add (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;739&#34; y=&#34;389&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(245,44,44)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;742.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_ops::arithmetic_ops::&amp;lt;impl core::ops::arith::Div&amp;lt;ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt; for f64&amp;gt;::div (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;738&#34; y=&#34;469&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(210,23,6)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;741.00&#34; y=&#34;479.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::unordered_foreach_mut (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;739&#34; y=&#34;453&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(234,120,33)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;742.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_ops::arithmetic_ops::_$LT$impl$u20$core..ops..arith..Div$LT$ndarray..ArrayBase$LT$S$C$$u20$D$GT$$GT$$u20$for$u20$f64$GT$::div::_$u7b$$u7b$closure$u7d$$u7d$::h941efb770ba33155 (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;739&#34; y=&#34;437&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(250,25,22)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;742.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_constructors::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::from_shape_vec_unchecked (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;739&#34; y=&#34;437&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(229,179,16)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;742.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::as_slice_memory_order (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;740&#34; y=&#34;437&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(248,9,9)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;743.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;nndl_rust::sigmoid (49 samples, 0.95%)&lt;/title&gt;&lt;rect x=&#34;729&#34; y=&#34;485&#34; width=&#34;12&#34; height=&#34;15&#34; fill=&#34;rgb(251,12,25)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;732.00&#34; y=&#34;495.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_ops::arithmetic_ops::&amp;lt;impl core::ops::arith::Neg for &amp;amp;&amp;apos;a ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::neg (6 samples, 0.12%)&lt;/title&gt;&lt;rect x=&#34;739&#34; y=&#34;469&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(215,30,47)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;742.00&#34; y=&#34;479.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::map (6 samples, 0.12%)&lt;/title&gt;&lt;rect x=&#34;739&#34; y=&#34;453&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(227,146,37)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;742.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::iterators::to_vec_mapped (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;740&#34; y=&#34;437&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(206,168,45)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;743.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt;&amp;gt;::with_capacity (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;740&#34; y=&#34;421&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(209,171,29)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;743.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T&amp;gt;&amp;gt;::with_capacity (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;740&#34; y=&#34;405&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(205,225,46)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;743.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T, A&amp;gt;&amp;gt;::allocate_in (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;740&#34; y=&#34;389&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(219,157,17)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;743.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::alloc::Global as core::alloc::Alloc&amp;gt;::alloc (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;740&#34; y=&#34;373&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(228,96,15)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;743.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;alloc::alloc::alloc (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;740&#34; y=&#34;357&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(233,58,39)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;743.00&#34; y=&#34;367.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;__libc_malloc (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;740&#34; y=&#34;341&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(212,142,2)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;743.00&#34; y=&#34;351.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::iter::range::&amp;lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&amp;lt;A&amp;gt;&amp;gt;::next (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;741&#34; y=&#34;405&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(206,128,23)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;744.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;usize as core::iter::range::Step&amp;gt;::add_usize (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;741&#34; y=&#34;389&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(242,41,48)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;744.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::num::&amp;lt;impl usize&amp;gt;::checked_add (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;741&#34; y=&#34;373&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(205,205,5)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;744.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::num::&amp;lt;impl usize&amp;gt;::overflowing_add (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;741&#34; y=&#34;357&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(238,13,27)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;744.00&#34; y=&#34;367.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_ops::arithmetic_ops::&amp;lt;impl core::ops::arith::Mul&amp;lt;ndarray::ArrayBase&amp;lt;S2, E&amp;gt;&amp;gt; for ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::mul (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;741&#34; y=&#34;469&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(226,97,36)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;744.00&#34; y=&#34;479.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_ops::arithmetic_ops::&amp;lt;impl core::ops::arith::Mul&amp;lt;&amp;amp;&amp;apos;a ndarray::ArrayBase&amp;lt;S2, E&amp;gt;&amp;gt; for ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::mul (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;741&#34; y=&#34;453&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(224,109,44)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;744.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::zip_mut_with (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;741&#34; y=&#34;437&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(249,103,24)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;744.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::zip_mut_with_same_shape (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;741&#34; y=&#34;421&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(247,82,19)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;744.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_ops::arithmetic_ops::_$LT$impl$u20$core..ops..arith..Mul$LT$$RF$$u27$a$u20$ndarray..ArrayBase$LT$S2$C$$u20$E$GT$$GT$$u20$for$u20$ndarray..ArrayBase$LT$S$C$$u20$D$GT$$GT$::mul::_$u7b$$u7b$closure$u7d$$u7d$::h4a0e51cd65dfa508 (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;741&#34; y=&#34;405&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(220,61,24)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;744.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_ops::arithmetic_ops::&amp;lt;impl core::ops::arith::Sub&amp;lt;ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt; for f64&amp;gt;::sub (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;741&#34; y=&#34;469&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(224,160,52)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;744.00&#34; y=&#34;479.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::unordered_foreach_mut (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;741&#34; y=&#34;453&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(211,183,54)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;744.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::iter::range::&amp;lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&amp;lt;A&amp;gt;&amp;gt;::next (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;741&#34; y=&#34;437&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(222,68,54)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;744.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;usize as core::iter::range::Step&amp;gt;::add_usize (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;741&#34; y=&#34;421&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(206,185,44)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;744.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::num::&amp;lt;impl usize&amp;gt;::checked_add (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;741&#34; y=&#34;405&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(239,216,6)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;744.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::num::&amp;lt;impl usize&amp;gt;::overflowing_add (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;741&#34; y=&#34;389&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(237,173,37)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;744.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::real_drop_in_place (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;741&#34; y=&#34;453&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(253,164,23)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;744.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::real_drop_in_place (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;741&#34; y=&#34;437&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(238,76,25)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;744.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::real_drop_in_place (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;741&#34; y=&#34;421&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(232,200,38)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;744.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::real_drop_in_place (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;741&#34; y=&#34;405&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(229,5,29)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;744.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T, A&amp;gt; as core::ops::drop::Drop&amp;gt;::drop (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;741&#34; y=&#34;389&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(214,198,33)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;744.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T, A&amp;gt;&amp;gt;::dealloc_buffer (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;741&#34; y=&#34;373&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(241,187,40)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;744.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::alloc::Global as core::alloc::Alloc&amp;gt;::dealloc (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;741&#34; y=&#34;357&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(251,3,11)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;744.00&#34; y=&#34;367.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;alloc::alloc::dealloc (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;741&#34; y=&#34;341&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(244,134,3)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;744.00&#34; y=&#34;351.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;cfree (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;741&#34; y=&#34;325&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(235,45,32)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;744.00&#34; y=&#34;335.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_constructors::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::from_shape_vec_unchecked (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;741&#34; y=&#34;421&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(249,22,26)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;744.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_constructors::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::from_vec_dim_stride_unchecked (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;742&#34; y=&#34;405&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(235,171,39)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;745.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;_$LT$ndarray..dimension..dim..Dim$LT$$u5b$usize$u3b$$u20$_$u5d$$GT$$u20$as$u20$ndarray..dimension..dimension_trait..Dimension$GT$::default_strides::h0e83b923d9e9a1fd (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;742&#34; y=&#34;373&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(214,9,20)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;745.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::as_slice_memory_order (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;742&#34; y=&#34;421&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(235,186,15)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;745.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::is_contiguous (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;742&#34; y=&#34;405&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(235,125,46)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;745.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::dimension::dimension_trait::Dimension::is_contiguous (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;742&#34; y=&#34;389&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(235,97,30)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;745.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;_$LT$ndarray..dimension..dim..Dim$LT$$u5b$usize$u3b$$u20$_$u5d$$GT$$u20$as$u20$ndarray..dimension..dimension_trait..Dimension$GT$::equal::h151a9fa6ecaa2e70 (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;742&#34; y=&#34;373&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(254,62,48)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;745.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt;&amp;gt;::with_capacity (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;743&#34; y=&#34;405&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(229,68,11)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;746.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T&amp;gt;&amp;gt;::with_capacity (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;743&#34; y=&#34;389&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(244,113,0)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;746.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T, A&amp;gt;&amp;gt;::allocate_in (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;743&#34; y=&#34;373&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(235,118,53)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;746.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;core::slice::Iter&amp;lt;&amp;apos;a, T&amp;gt; as core::iter::traits::iterator::Iterator&amp;gt;::next (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;743&#34; y=&#34;389&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(254,118,14)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;746.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;core::slice::Iter&amp;lt;&amp;apos;a, T&amp;gt;&amp;gt;::post_inc_start (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;743&#34; y=&#34;373&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(231,13,25)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;746.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::&amp;lt;impl *const T&amp;gt;::offset (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;743&#34; y=&#34;357&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(225,114,24)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;746.00&#34; y=&#34;367.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::write (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;743&#34; y=&#34;373&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(241,219,6)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;746.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;@plt (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;745&#34; y=&#34;309&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(210,33,12)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;748.00&#34; y=&#34;319.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::mapv (64 samples, 1.23%)&lt;/title&gt;&lt;rect x=&#34;741&#34; y=&#34;453&#34; width=&#34;15&#34; height=&#34;15&#34; fill=&#34;rgb(232,62,53)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;744.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::map (64 samples, 1.23%)&lt;/title&gt;&lt;rect x=&#34;741&#34; y=&#34;437&#34; width=&#34;15&#34; height=&#34;15&#34; fill=&#34;rgb(224,112,28)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;744.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::iterators::to_vec_mapped (60 samples, 1.16%)&lt;/title&gt;&lt;rect x=&#34;742&#34; y=&#34;421&#34; width=&#34;14&#34; height=&#34;15&#34; fill=&#34;rgb(221,48,0)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;745.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;core::slice::Iter&amp;lt;&amp;apos;a, T&amp;gt; as core::iter::traits::iterator::Iterator&amp;gt;::fold (58 samples, 1.12%)&lt;/title&gt;&lt;rect x=&#34;743&#34; y=&#34;405&#34; width=&#34;13&#34; height=&#34;15&#34; fill=&#34;rgb(244,223,32)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;746.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::iterators::to_vec_mapped::_$u7b$$u7b$closure$u7d$$u7d$::h96d4b65474d2726b (57 samples, 1.10%)&lt;/title&gt;&lt;rect x=&#34;743&#34; y=&#34;389&#34; width=&#34;13&#34; height=&#34;15&#34; fill=&#34;rgb(240,19,32)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;746.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::_$LT$impl$u20$ndarray..ArrayBase$LT$S$C$$u20$D$GT$$GT$::mapv::_$u7b$$u7b$closure$u7d$$u7d$::h8da8f33936077f61 (56 samples, 1.08%)&lt;/title&gt;&lt;rect x=&#34;743&#34; y=&#34;373&#34; width=&#34;13&#34; height=&#34;15&#34; fill=&#34;rgb(249,34,28)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;746.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ops::function::FnMut::call_mut (56 samples, 1.08%)&lt;/title&gt;&lt;rect x=&#34;743&#34; y=&#34;357&#34; width=&#34;13&#34; height=&#34;15&#34; fill=&#34;rgb(254,182,21)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;746.00&#34; y=&#34;367.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;std::f64::&amp;lt;impl f64&amp;gt;::exp (56 samples, 1.08%)&lt;/title&gt;&lt;rect x=&#34;743&#34; y=&#34;341&#34; width=&#34;13&#34; height=&#34;15&#34; fill=&#34;rgb(234,223,24)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;746.00&#34; y=&#34;351.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;expf64 (56 samples, 1.08%)&lt;/title&gt;&lt;rect x=&#34;743&#34; y=&#34;325&#34; width=&#34;13&#34; height=&#34;15&#34; fill=&#34;rgb(208,24,15)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;746.00&#34; y=&#34;335.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[libm-2.27.so] (48 samples, 0.93%)&lt;/title&gt;&lt;rect x=&#34;745&#34; y=&#34;309&#34; width=&#34;11&#34; height=&#34;15&#34; fill=&#34;rgb(248,114,33)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;748.00&#34; y=&#34;319.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::as_slice_memory_order_mut (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;756&#34; y=&#34;405&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(248,48,48)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;759.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::is_contiguous (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;756&#34; y=&#34;389&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(205,17,54)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;759.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::dimension::dimension_trait::Dimension::is_contiguous (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;756&#34; y=&#34;373&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(233,71,54)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;759.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;_$LT$ndarray..dimension..dim..Dim$LT$$u5b$usize$u3b$$u20$_$u5d$$GT$$u20$as$u20$ndarray..dimension..dimension_trait..Dimension$GT$::equal::h151a9fa6ecaa2e70 (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;756&#34; y=&#34;357&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(219,229,14)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;759.00&#34; y=&#34;367.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_ops::arithmetic_ops::&amp;lt;impl core::ops::arith::Add&amp;lt;ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt; for f64&amp;gt;::add (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;756&#34; y=&#34;453&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(238,226,19)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;759.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_ops::arithmetic_ops::&amp;lt;impl core::ops::arith::Add&amp;lt;B&amp;gt; for ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::add (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;756&#34; y=&#34;437&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(254,6,42)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;759.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::unordered_foreach_mut (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;756&#34; y=&#34;421&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(209,224,1)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;759.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_ops::arithmetic_ops::_$LT$impl$u20$core..ops..arith..Add$LT$B$GT$$u20$for$u20$ndarray..ArrayBase$LT$S$C$$u20$D$GT$$GT$::add::_$u7b$$u7b$closure$u7d$$u7d$::h336cfd83104cd862 (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;756&#34; y=&#34;405&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(215,37,31)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;759.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;_$LT$ndarray..dimension..dim..Dim$LT$$u5b$usize$u3b$$u20$_$u5d$$GT$$u20$as$u20$ndarray..dimension..dimension_trait..Dimension$GT$::default_strides::h0e83b923d9e9a1fd (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;757&#34; y=&#34;373&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(214,184,6)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;760.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::as_slice_memory_order_mut (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;757&#34; y=&#34;421&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(241,166,44)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;760.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::is_contiguous (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;757&#34; y=&#34;405&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(238,58,52)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;760.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::dimension::dimension_trait::Dimension::is_contiguous (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;757&#34; y=&#34;389&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(241,72,50)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;760.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;_$LT$ndarray..dimension..dim..Dim$LT$$u5b$usize$u3b$$u20$_$u5d$$GT$$u20$as$u20$ndarray..dimension..dimension_trait..Dimension$GT$::equal::h151a9fa6ecaa2e70 (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;757&#34; y=&#34;373&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(232,90,25)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;760.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_ops::arithmetic_ops::&amp;lt;impl core::ops::arith::Div&amp;lt;ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt; for f64&amp;gt;::div (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;757&#34; y=&#34;453&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(238,155,2)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;760.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::unordered_foreach_mut (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;757&#34; y=&#34;437&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(222,60,39)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;760.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_ops::arithmetic_ops::_$LT$impl$u20$core..ops..arith..Div$LT$ndarray..ArrayBase$LT$S$C$$u20$D$GT$$GT$$u20$for$u20$f64$GT$::div::_$u7b$$u7b$closure$u7d$$u7d$::h941efb770ba33155 (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;757&#34; y=&#34;421&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(243,203,15)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;760.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_constructors::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::from_shape_vec_unchecked (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;758&#34; y=&#34;421&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(250,184,29)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;761.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;nndl_rust::Network::backprop (1,753 samples, 33.82%)&lt;/title&gt;&lt;rect x=&#34;360&#34; y=&#34;501&#34; width=&#34;399&#34; height=&#34;15&#34; fill=&#34;rgb(220,75,45)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;363.00&#34; y=&#34;511.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;nndl_rust::Network::backprop&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;nndl_rust::sigmoid_prime (81 samples, 1.56%)&lt;/title&gt;&lt;rect x=&#34;741&#34; y=&#34;485&#34; width=&#34;18&#34; height=&#34;15&#34; fill=&#34;rgb(253,131,42)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;744.00&#34; y=&#34;495.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;nndl_rust::sigmoid (78 samples, 1.50%)&lt;/title&gt;&lt;rect x=&#34;741&#34; y=&#34;469&#34; width=&#34;18&#34; height=&#34;15&#34; fill=&#34;rgb(235,10,33)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;744.00&#34; y=&#34;479.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_ops::arithmetic_ops::&amp;lt;impl core::ops::arith::Neg for &amp;amp;&amp;apos;a ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::neg (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;758&#34; y=&#34;453&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(252,53,6)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;761.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::map (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;758&#34; y=&#34;437&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(228,20,48)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;761.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::iterators::to_vec_mapped (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;759&#34; y=&#34;421&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(247,94,45)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;762.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt;&amp;gt;::with_capacity (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;759&#34; y=&#34;405&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(231,78,7)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;762.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T&amp;gt;&amp;gt;::with_capacity (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;759&#34; y=&#34;389&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(228,173,47)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;762.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T, A&amp;gt;&amp;gt;::allocate_in (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;759&#34; y=&#34;373&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(246,213,46)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;762.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::alloc::Global as core::alloc::Alloc&amp;gt;::alloc (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;759&#34; y=&#34;357&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(245,93,8)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;762.00&#34; y=&#34;367.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;alloc::alloc::alloc (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;759&#34; y=&#34;341&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(223,217,51)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;762.00&#34; y=&#34;351.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;__libc_malloc (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;759&#34; y=&#34;325&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(212,163,27)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;762.00&#34; y=&#34;335.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;nndl_rust::Network::sgd (3,265 samples, 62.99%)&lt;/title&gt;&lt;rect x=&#34;18&#34; y=&#34;533&#34; width=&#34;744&#34; height=&#34;15&#34; fill=&#34;rgb(224,114,9)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;21.00&#34; y=&#34;543.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;nndl_rust::Network::sgd&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;nndl_rust::Network::update_mini_batch (3,065 samples, 59.14%)&lt;/title&gt;&lt;rect x=&#34;64&#34; y=&#34;517&#34; width=&#34;698&#34; height=&#34;15&#34; fill=&#34;rgb(236,31,33)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;67.00&#34; y=&#34;527.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;nndl_rust::Network::update_mini_batch&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;nndl_rust::zero_vec_like (12 samples, 0.23%)&lt;/title&gt;&lt;rect x=&#34;759&#34; y=&#34;501&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(245,149,39)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;762.00&#34; y=&#34;511.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::iter::traits::iterator::Iterator::collect (12 samples, 0.23%)&lt;/title&gt;&lt;rect x=&#34;759&#34; y=&#34;485&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(210,84,24)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;762.00&#34; y=&#34;495.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt; as core::iter::traits::collect::FromIterator&amp;lt;T&amp;gt;&amp;gt;::from_iter (12 samples, 0.23%)&lt;/title&gt;&lt;rect x=&#34;759&#34; y=&#34;469&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(221,35,26)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;762.00&#34; y=&#34;479.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt; as alloc::vec::SpecExtend&amp;lt;T, I&amp;gt;&amp;gt;::from_iter (12 samples, 0.23%)&lt;/title&gt;&lt;rect x=&#34;759&#34; y=&#34;453&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(226,207,42)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;762.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt; as alloc::vec::SpecExtend&amp;lt;T, I&amp;gt;&amp;gt;::spec_extend (12 samples, 0.23%)&lt;/title&gt;&lt;rect x=&#34;759&#34; y=&#34;437&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(229,179,11)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;762.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::iter::traits::iterator::Iterator::for_each (12 samples, 0.23%)&lt;/title&gt;&lt;rect x=&#34;759&#34; y=&#34;421&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(205,149,23)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;762.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;core::iter::adapters::Map&amp;lt;I, F&amp;gt; as core::iter::traits::iterator::Iterator&amp;gt;::fold (12 samples, 0.23%)&lt;/title&gt;&lt;rect x=&#34;759&#34; y=&#34;405&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(238,138,54)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;762.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;core::slice::Iter&amp;lt;&amp;apos;a, T&amp;gt; as core::iter::traits::iterator::Iterator&amp;gt;::fold (12 samples, 0.23%)&lt;/title&gt;&lt;rect x=&#34;759&#34; y=&#34;389&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(210,37,23)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;762.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;_$LT$core..iter..adapters..Map$LT$I$C$$u20$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$::fold::_$u7b$$u7b$closure$u7d$$u7d$::hcf8d84009fd76c57 (12 samples, 0.23%)&lt;/title&gt;&lt;rect x=&#34;759&#34; y=&#34;373&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(253,202,51)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;762.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;nndl_rust::Network::backprop::_$u7b$$u7b$closure$u7d$$u7d$::hc025177ae5e59770 (12 samples, 0.23%)&lt;/title&gt;&lt;rect x=&#34;759&#34; y=&#34;357&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(224,52,9)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;762.00&#34; y=&#34;367.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_constructors::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::zeros (12 samples, 0.23%)&lt;/title&gt;&lt;rect x=&#34;759&#34; y=&#34;341&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(221,113,51)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;762.00&#34; y=&#34;351.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_constructors::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::from_elem (12 samples, 0.23%)&lt;/title&gt;&lt;rect x=&#34;759&#34; y=&#34;325&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(234,0,19)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;762.00&#34; y=&#34;335.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;alloc::vec::from_elem (12 samples, 0.23%)&lt;/title&gt;&lt;rect x=&#34;759&#34; y=&#34;309&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(249,5,31)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;762.00&#34; y=&#34;319.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;T as alloc::vec::SpecFromElem&amp;gt;::from_elem (12 samples, 0.23%)&lt;/title&gt;&lt;rect x=&#34;759&#34; y=&#34;293&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(252,31,37)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;762.00&#34; y=&#34;303.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T&amp;gt;&amp;gt;::with_capacity_zeroed (12 samples, 0.23%)&lt;/title&gt;&lt;rect x=&#34;759&#34; y=&#34;277&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(220,75,7)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;762.00&#34; y=&#34;287.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T, A&amp;gt;&amp;gt;::allocate_in (12 samples, 0.23%)&lt;/title&gt;&lt;rect x=&#34;759&#34; y=&#34;261&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(220,217,40)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;762.00&#34; y=&#34;271.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::alloc::Global as core::alloc::Alloc&amp;gt;::alloc_zeroed (12 samples, 0.23%)&lt;/title&gt;&lt;rect x=&#34;759&#34; y=&#34;245&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(206,189,51)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;762.00&#34; y=&#34;255.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;alloc::alloc::alloc_zeroed (12 samples, 0.23%)&lt;/title&gt;&lt;rect x=&#34;759&#34; y=&#34;229&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(253,5,33)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;762.00&#34; y=&#34;239.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;__libc_calloc (12 samples, 0.23%)&lt;/title&gt;&lt;rect x=&#34;759&#34; y=&#34;213&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(212,166,16)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;762.00&#34; y=&#34;223.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[libc-2.27.so] (12 samples, 0.23%)&lt;/title&gt;&lt;rect x=&#34;759&#34; y=&#34;197&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(214,26,13)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;762.00&#34; y=&#34;207.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt;&amp;gt;::push (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;762&#34; y=&#34;517&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(228,94,33)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;765.00&#34; y=&#34;527.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt;&amp;gt;::reserve (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;762&#34; y=&#34;501&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(231,87,20)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;765.00&#34; y=&#34;511.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T, A&amp;gt;&amp;gt;::reserve (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;762&#34; y=&#34;485&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(219,157,45)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;765.00&#34; y=&#34;495.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T, A&amp;gt;&amp;gt;::reserve_internal (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;762&#34; y=&#34;469&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(240,178,50)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;765.00&#34; y=&#34;479.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::alloc::Global as core::alloc::Alloc&amp;gt;::realloc (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;762&#34; y=&#34;453&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(206,225,41)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;765.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;alloc::alloc::realloc (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;762&#34; y=&#34;437&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(252,123,24)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;765.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;realloc (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;762&#34; y=&#34;421&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(219,114,12)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;765.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[libc-2.27.so] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;762&#34; y=&#34;405&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(253,50,32)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;765.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[libc-2.27.so] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;762&#34; y=&#34;389&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(226,220,31)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;765.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;762&#34; y=&#34;373&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(210,177,8)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;765.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;762&#34; y=&#34;357&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(216,46,6)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;765.00&#34; y=&#34;367.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;762&#34; y=&#34;341&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(223,89,10)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;765.00&#34; y=&#34;351.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;762&#34; y=&#34;325&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(206,155,25)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;765.00&#34; y=&#34;335.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;762&#34; y=&#34;309&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(212,219,1)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;765.00&#34; y=&#34;319.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;762&#34; y=&#34;293&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(242,146,21)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;765.00&#34; y=&#34;303.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;762&#34; y=&#34;277&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(230,207,52)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;765.00&#34; y=&#34;287.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;762&#34; y=&#34;261&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(209,96,9)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;765.00&#34; y=&#34;271.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;762&#34; y=&#34;245&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(214,100,39)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;765.00&#34; y=&#34;255.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;762&#34; y=&#34;229&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(214,104,49)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;765.00&#34; y=&#34;239.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;core::iter::adapters::zip::Zip&amp;lt;A, B&amp;gt; as core::iter::traits::iterator::Iterator&amp;gt;::next (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;762&#34; y=&#34;517&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(244,193,3)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;765.00&#34; y=&#34;527.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;core::iter::adapters::zip::Zip&amp;lt;A, B&amp;gt; as core::iter::adapters::zip::ZipImpl&amp;lt;A, B&amp;gt;&amp;gt;::next (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;762&#34; y=&#34;501&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(209,77,39)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;765.00&#34; y=&#34;511.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;core::option::Option&amp;lt;T&amp;gt;&amp;gt;::and_then (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;762&#34; y=&#34;485&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(214,71,53)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;765.00&#34; y=&#34;495.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;alloc::slice::&amp;lt;impl [T]&amp;gt;::to_vec (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;762&#34; y=&#34;517&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(242,44,27)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;765.00&#34; y=&#34;527.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;alloc::slice::hack::to_vec (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;762&#34; y=&#34;501&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(232,164,53)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;765.00&#34; y=&#34;511.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt;&amp;gt;::extend_from_slice (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;762&#34; y=&#34;485&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(225,193,13)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;765.00&#34; y=&#34;495.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt; as alloc::vec::SpecExtend&amp;lt;&amp;amp;&amp;apos;a T, core::slice::Iter&amp;lt;&amp;apos;a, T&amp;gt;&amp;gt;&amp;gt;::spec_extend (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;762&#34; y=&#34;469&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(215,142,9)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;765.00&#34; y=&#34;479.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[libc-2.27.so] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;762&#34; y=&#34;453&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(214,121,30)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;765.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (11 samples, 0.21%)&lt;/title&gt;&lt;rect x=&#34;762&#34; y=&#34;341&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(216,99,15)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;765.00&#34; y=&#34;351.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (11 samples, 0.21%)&lt;/title&gt;&lt;rect x=&#34;762&#34; y=&#34;325&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(230,31,18)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;765.00&#34; y=&#34;335.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (6 samples, 0.12%)&lt;/title&gt;&lt;rect x=&#34;764&#34; y=&#34;309&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(242,168,34)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;767.00&#34; y=&#34;319.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (6 samples, 0.12%)&lt;/title&gt;&lt;rect x=&#34;764&#34; y=&#34;293&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(234,46,43)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;767.00&#34; y=&#34;303.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (6 samples, 0.12%)&lt;/title&gt;&lt;rect x=&#34;764&#34; y=&#34;277&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(228,222,21)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;767.00&#34; y=&#34;287.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (6 samples, 0.12%)&lt;/title&gt;&lt;rect x=&#34;764&#34; y=&#34;261&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(207,179,25)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;767.00&#34; y=&#34;271.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (6 samples, 0.12%)&lt;/title&gt;&lt;rect x=&#34;764&#34; y=&#34;245&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(212,9,18)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;767.00&#34; y=&#34;255.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;764&#34; y=&#34;229&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(219,68,36)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;767.00&#34; y=&#34;239.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;764&#34; y=&#34;213&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(213,156,38)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;767.00&#34; y=&#34;223.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;765&#34; y=&#34;325&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(206,41,40)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;768.00&#34; y=&#34;335.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;765&#34; y=&#34;309&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(253,180,21)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;768.00&#34; y=&#34;319.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt;&amp;gt;::reserve (13 samples, 0.25%)&lt;/title&gt;&lt;rect x=&#34;762&#34; y=&#34;453&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(241,58,4)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;765.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T, A&amp;gt;&amp;gt;::reserve (13 samples, 0.25%)&lt;/title&gt;&lt;rect x=&#34;762&#34; y=&#34;437&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(219,155,11)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;765.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T, A&amp;gt;&amp;gt;::reserve_internal (13 samples, 0.25%)&lt;/title&gt;&lt;rect x=&#34;762&#34; y=&#34;421&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(217,31,40)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;765.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::alloc::Global as core::alloc::Alloc&amp;gt;::alloc (13 samples, 0.25%)&lt;/title&gt;&lt;rect x=&#34;762&#34; y=&#34;405&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(246,63,40)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;765.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;alloc::alloc::alloc (13 samples, 0.25%)&lt;/title&gt;&lt;rect x=&#34;762&#34; y=&#34;389&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(206,53,6)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;765.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;__libc_malloc (13 samples, 0.25%)&lt;/title&gt;&lt;rect x=&#34;762&#34; y=&#34;373&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(223,41,32)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;765.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[libc-2.27.so] (13 samples, 0.25%)&lt;/title&gt;&lt;rect x=&#34;762&#34; y=&#34;357&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(239,153,16)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;765.00&#34; y=&#34;367.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[libc-2.27.so] (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;765&#34; y=&#34;341&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(254,200,18)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;768.00&#34; y=&#34;351.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;__default_morecore (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;765&#34; y=&#34;325&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(243,48,32)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;768.00&#34; y=&#34;335.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;__sbrk (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;765&#34; y=&#34;309&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(209,30,45)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;768.00&#34; y=&#34;319.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;brk (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;765&#34; y=&#34;293&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(231,171,34)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;768.00&#34; y=&#34;303.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;765&#34; y=&#34;277&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(237,203,11)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;768.00&#34; y=&#34;287.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;765&#34; y=&#34;261&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(253,211,5)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;768.00&#34; y=&#34;271.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;765&#34; y=&#34;245&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(234,37,32)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;768.00&#34; y=&#34;255.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;765&#34; y=&#34;229&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(239,133,8)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;768.00&#34; y=&#34;239.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;765&#34; y=&#34;213&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(214,99,18)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;768.00&#34; y=&#34;223.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;765&#34; y=&#34;197&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(229,113,46)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;768.00&#34; y=&#34;207.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;765&#34; y=&#34;181&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(214,56,2)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;768.00&#34; y=&#34;191.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::iter::traits::iterator::Iterator::for_each::_$u7b$$u7b$closure$u7d$$u7d$::hcf552e13efd43222 (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;765&#34; y=&#34;357&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(206,164,31)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;768.00&#34; y=&#34;367.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;_$LT$alloc..vec..Vec$LT$T$GT$$u20$as$u20$alloc..vec..SpecExtend$LT$T$C$$u20$I$GT$$GT$::spec_extend::_$u7b$$u7b$closure$u7d$$u7d$::h69c127b79bd9b1ac (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;765&#34; y=&#34;341&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(224,23,28)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;768.00&#34; y=&#34;351.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::ptr::write (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;765&#34; y=&#34;325&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(207,221,42)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;768.00&#34; y=&#34;335.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;765&#34; y=&#34;309&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(249,81,52)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;768.00&#34; y=&#34;319.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;765&#34; y=&#34;293&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(219,144,12)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;768.00&#34; y=&#34;303.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;766&#34; y=&#34;277&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(240,159,53)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;769.00&#34; y=&#34;287.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;766&#34; y=&#34;261&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(252,46,34)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;769.00&#34; y=&#34;271.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;766&#34; y=&#34;245&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(229,160,13)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;769.00&#34; y=&#34;255.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;766&#34; y=&#34;229&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(254,192,52)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;769.00&#34; y=&#34;239.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;766&#34; y=&#34;213&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(213,37,28)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;769.00&#34; y=&#34;223.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::iter::traits::iterator::Iterator::collect (19 samples, 0.37%)&lt;/title&gt;&lt;rect x=&#34;762&#34; y=&#34;517&#34; width=&#34;5&#34; height=&#34;15&#34; fill=&#34;rgb(247,109,21)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;765.00&#34; y=&#34;527.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt; as core::iter::traits::collect::FromIterator&amp;lt;T&amp;gt;&amp;gt;::from_iter (19 samples, 0.37%)&lt;/title&gt;&lt;rect x=&#34;762&#34; y=&#34;501&#34; width=&#34;5&#34; height=&#34;15&#34; fill=&#34;rgb(217,92,49)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;765.00&#34; y=&#34;511.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt; as alloc::vec::SpecExtend&amp;lt;T, I&amp;gt;&amp;gt;::from_iter (19 samples, 0.37%)&lt;/title&gt;&lt;rect x=&#34;762&#34; y=&#34;485&#34; width=&#34;5&#34; height=&#34;15&#34; fill=&#34;rgb(236,52,32)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;765.00&#34; y=&#34;495.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt; as alloc::vec::SpecExtend&amp;lt;T, I&amp;gt;&amp;gt;::spec_extend (19 samples, 0.37%)&lt;/title&gt;&lt;rect x=&#34;762&#34; y=&#34;469&#34; width=&#34;5&#34; height=&#34;15&#34; fill=&#34;rgb(221,128,51)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;765.00&#34; y=&#34;479.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::iter::traits::iterator::Iterator::for_each (6 samples, 0.12%)&lt;/title&gt;&lt;rect x=&#34;765&#34; y=&#34;453&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(218,169,22)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;768.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;core::iter::adapters::Map&amp;lt;I, F&amp;gt; as core::iter::traits::iterator::Iterator&amp;gt;::fold (6 samples, 0.12%)&lt;/title&gt;&lt;rect x=&#34;765&#34; y=&#34;437&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(237,194,41)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;768.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::iter::traits::iterator::Iterator::fold (6 samples, 0.12%)&lt;/title&gt;&lt;rect x=&#34;765&#34; y=&#34;421&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(216,16,43)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;768.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::iter::traits::iterator::Iterator::try_fold (6 samples, 0.12%)&lt;/title&gt;&lt;rect x=&#34;765&#34; y=&#34;405&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(248,111,33)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;768.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::iter::traits::iterator::Iterator::fold::_$u7b$$u7b$closure$u7d$$u7d$::haecafb67dbc92f7c (6 samples, 0.12%)&lt;/title&gt;&lt;rect x=&#34;765&#34; y=&#34;389&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(222,75,39)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;768.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;_$LT$core..iter..adapters..Map$LT$I$C$$u20$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$::fold::_$u7b$$u7b$closure$u7d$$u7d$::h1f3da6f259bb5018 (6 samples, 0.12%)&lt;/title&gt;&lt;rect x=&#34;765&#34; y=&#34;373&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(236,61,35)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;768.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;nndl_rust::mnist_reader::load_data::_$u7b$$u7b$closure$u7d$$u7d$::hf514a6388114ff12 (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;766&#34; y=&#34;357&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(236,182,26)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;769.00&#34; y=&#34;367.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;325&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(240,136,48)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;335.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;309&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(237,57,50)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;319.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;293&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(246,18,29)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;303.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;277&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(250,95,42)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;287.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;261&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(212,77,33)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;271.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;245&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(244,88,42)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;255.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;229&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(228,221,51)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;239.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;213&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(208,226,10)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;223.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;197&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(217,208,36)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;207.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::vec::Vec&amp;lt;T&amp;gt;&amp;gt;::reserve (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;453&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(205,57,37)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T, A&amp;gt;&amp;gt;::reserve (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;437&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(221,209,29)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::raw_vec::RawVec&amp;lt;T, A&amp;gt;&amp;gt;::reserve_internal (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;421&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(254,206,4)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;alloc::alloc::Global as core::alloc::Alloc&amp;gt;::realloc (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;405&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(253,142,6)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;alloc::alloc::realloc (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;389&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(235,38,2)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;realloc (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;373&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(243,16,7)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[libc-2.27.so] (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;357&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(249,77,25)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;367.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[libc-2.27.so] (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;341&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(248,21,39)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;351.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[libc-2.27.so] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;325&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(228,41,17)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;335.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;flate2::bufreader::BufReader&amp;lt;R&amp;gt; as std::io::BufRead&amp;gt;::fill_buf (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;373&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(227,135,26)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;read (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;357&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(219,26,40)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;367.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;read (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;341&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(238,132,18)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;351.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;read (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;325&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(249,54,33)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;335.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;__libc_read (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;309&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(240,113,8)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;319.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;293&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(253,133,50)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;303.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;277&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(213,85,10)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;287.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;261&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(249,80,4)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;271.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;245&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(242,45,5)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;255.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;229&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(227,165,30)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;239.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;213&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(234,86,11)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;223.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;197&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(205,53,40)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;207.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;181&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(240,54,21)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;191.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;165&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(232,117,45)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;175.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;149&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(239,126,29)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;159.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;133&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(214,132,23)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;143.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;117&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(211,118,14)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;127.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;101&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(251,52,18)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;111.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;85&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(212,129,27)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;95.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;69&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(239,130,47)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;79.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;53&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(239,124,22)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;63.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;37&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(228,77,30)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;47.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;memcpy (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;325&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(248,105,4)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;335.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[libc-2.27.so] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;309&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(244,223,0)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;319.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;flate2::deflate::bufread::DeflateDecoder&amp;lt;R&amp;gt; as std::io::Read&amp;gt;::read (29 samples, 0.56%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;405&#34; width=&#34;7&#34; height=&#34;15&#34; fill=&#34;rgb(230,8,2)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;flate2::zio::read (29 samples, 0.56%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;389&#34; width=&#34;7&#34; height=&#34;15&#34; fill=&#34;rgb(254,85,6)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;flate2::mem::Decompress as flate2::zio::Ops&amp;gt;::run (28 samples, 0.54%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;373&#34; width=&#34;7&#34; height=&#34;15&#34; fill=&#34;rgb(211,174,14)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;flate2::mem::Decompress::decompress (28 samples, 0.54%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;357&#34; width=&#34;7&#34; height=&#34;15&#34; fill=&#34;rgb(210,200,44)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;367.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;mz_inflate (28 samples, 0.54%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;341&#34; width=&#34;7&#34; height=&#34;15&#34; fill=&#34;rgb(214,108,4)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;351.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;tinfl_decompress (27 samples, 0.52%)&lt;/title&gt;&lt;rect x=&#34;768&#34; y=&#34;325&#34; width=&#34;6&#34; height=&#34;15&#34; fill=&#34;rgb(220,125,2)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;771.00&#34; y=&#34;335.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;flate2::gz::read::GzDecoder&amp;lt;R&amp;gt; as std::io::Read&amp;gt;::read (30 samples, 0.58%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;453&#34; width=&#34;7&#34; height=&#34;15&#34; fill=&#34;rgb(205,140,25)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;flate2::gz::bufread::GzDecoder&amp;lt;R&amp;gt; as std::io::Read&amp;gt;::read (30 samples, 0.58%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;437&#34; width=&#34;7&#34; height=&#34;15&#34; fill=&#34;rgb(244,159,51)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;flate2::crc::CrcReader&amp;lt;R&amp;gt; as std::io::Read&amp;gt;::read (30 samples, 0.58%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;421&#34; width=&#34;7&#34; height=&#34;15&#34; fill=&#34;rgb(209,125,8)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;crc32fast::Hasher::update (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;774&#34; y=&#34;405&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(214,40,46)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;777.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;crc32fast::specialized::pclmulqdq::State::update (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;774&#34; y=&#34;389&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(211,79,24)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;777.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;crc32fast::baseline::update_fast_16 (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;774&#34; y=&#34;373&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(210,35,43)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;777.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;crc32fast::baseline::update_slow (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;774&#34; y=&#34;357&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(223,26,28)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;777.00&#34; y=&#34;367.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;&amp;lt;std::io::cursor::Cursor&amp;lt;T&amp;gt; as std::io::Read&amp;gt;::read (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;774&#34; y=&#34;453&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(216,93,43)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;777.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;std::io::impls::&amp;lt;impl std::io::Read for &amp;amp;[u8]&amp;gt;::read (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;774&#34; y=&#34;437&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(224,99,14)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;777.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[libc-2.27.so] (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;774&#34; y=&#34;421&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(226,87,12)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;777.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;774&#34; y=&#34;405&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(206,189,14)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;777.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;774&#34; y=&#34;389&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(249,109,43)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;777.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;774&#34; y=&#34;373&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(215,180,45)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;777.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;774&#34; y=&#34;357&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(222,175,5)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;777.00&#34; y=&#34;367.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;774&#34; y=&#34;341&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(212,110,6)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;777.00&#34; y=&#34;351.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;774&#34; y=&#34;325&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(211,12,39)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;777.00&#34; y=&#34;335.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;774&#34; y=&#34;309&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(237,182,16)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;777.00&#34; y=&#34;319.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;_start (3,327 samples, 64.19%)&lt;/title&gt;&lt;rect x=&#34;18&#34; y=&#34;709&#34; width=&#34;758&#34; height=&#34;15&#34; fill=&#34;rgb(226,59,10)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;21.00&#34; y=&#34;719.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;_start&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;__libc_start_main (3,327 samples, 64.19%)&lt;/title&gt;&lt;rect x=&#34;18&#34; y=&#34;693&#34; width=&#34;758&#34; height=&#34;15&#34; fill=&#34;rgb(215,104,23)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;21.00&#34; y=&#34;703.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;__libc_start_main&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;main (3,327 samples, 64.19%)&lt;/title&gt;&lt;rect x=&#34;18&#34; y=&#34;677&#34; width=&#34;758&#34; height=&#34;15&#34; fill=&#34;rgb(227,163,3)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;21.00&#34; y=&#34;687.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;main&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;lang_start_internal (3,327 samples, 64.19%)&lt;/title&gt;&lt;rect x=&#34;18&#34; y=&#34;661&#34; width=&#34;758&#34; height=&#34;15&#34; fill=&#34;rgb(221,2,33)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;21.00&#34; y=&#34;671.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;lang_start_internal&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;catch_unwind&amp;lt;closure,i32&amp;gt; (3,327 samples, 64.19%)&lt;/title&gt;&lt;rect x=&#34;18&#34; y=&#34;645&#34; width=&#34;758&#34; height=&#34;15&#34; fill=&#34;rgb(224,13,44)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;21.00&#34; y=&#34;655.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;catch_unwind&amp;lt;closure,i32&amp;gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;try&amp;lt;i32,closure&amp;gt; (3,327 samples, 64.19%)&lt;/title&gt;&lt;rect x=&#34;18&#34; y=&#34;629&#34; width=&#34;758&#34; height=&#34;15&#34; fill=&#34;rgb(222,188,7)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;21.00&#34; y=&#34;639.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;try&amp;lt;i32,closure&amp;gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;__rust_maybe_catch_panic (3,327 samples, 64.19%)&lt;/title&gt;&lt;rect x=&#34;18&#34; y=&#34;613&#34; width=&#34;758&#34; height=&#34;15&#34; fill=&#34;rgb(220,70,4)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;21.00&#34; y=&#34;623.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;__rust_maybe_catch_panic&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;do_call&amp;lt;closure,i32&amp;gt; (3,327 samples, 64.19%)&lt;/title&gt;&lt;rect x=&#34;18&#34; y=&#34;597&#34; width=&#34;758&#34; height=&#34;15&#34; fill=&#34;rgb(211,59,28)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;21.00&#34; y=&#34;607.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;do_call&amp;lt;closure,i32&amp;gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;{{closure}} (3,327 samples, 64.19%)&lt;/title&gt;&lt;rect x=&#34;18&#34; y=&#34;581&#34; width=&#34;758&#34; height=&#34;15&#34; fill=&#34;rgb(226,125,3)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;21.00&#34; y=&#34;591.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;{{closure}}&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::h780d4f1c15ceddd2 (3,327 samples, 64.19%)&lt;/title&gt;&lt;rect x=&#34;18&#34; y=&#34;565&#34; width=&#34;758&#34; height=&#34;15&#34; fill=&#34;rgb(208,226,13)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;21.00&#34; y=&#34;575.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::h780d4f1c15ceddd2&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;nndl_rust::main (3,327 samples, 64.19%)&lt;/title&gt;&lt;rect x=&#34;18&#34; y=&#34;549&#34; width=&#34;758&#34; height=&#34;15&#34; fill=&#34;rgb(220,113,24)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;21.00&#34; y=&#34;559.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;nndl_rust::main&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;nndl_rust::mnist_reader::load_data (62 samples, 1.20%)&lt;/title&gt;&lt;rect x=&#34;762&#34; y=&#34;533&#34; width=&#34;14&#34; height=&#34;15&#34; fill=&#34;rgb(229,110,50)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;765.00&#34; y=&#34;543.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;nndl_rust::mnist_reader::MnistData::new (40 samples, 0.77%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;517&#34; width=&#34;9&#34; height=&#34;15&#34; fill=&#34;rgb(253,131,4)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;527.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;std::io::Read::read_to_end (40 samples, 0.77%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;501&#34; width=&#34;9&#34; height=&#34;15&#34; fill=&#34;rgb(224,187,44)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;511.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;std::io::read_to_end (40 samples, 0.77%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;485&#34; width=&#34;9&#34; height=&#34;15&#34; fill=&#34;rgb(251,82,6)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;495.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;std::io::read_to_end_with_reservation (40 samples, 0.77%)&lt;/title&gt;&lt;rect x=&#34;767&#34; y=&#34;469&#34; width=&#34;9&#34; height=&#34;15&#34; fill=&#34;rgb(217,65,7)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;770.00&#34; y=&#34;479.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;std::io::Initializer::initialize (6 samples, 0.12%)&lt;/title&gt;&lt;rect x=&#34;774&#34; y=&#34;453&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(236,219,7)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;777.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;core::intrinsics::write_bytes (6 samples, 0.12%)&lt;/title&gt;&lt;rect x=&#34;774&#34; y=&#34;437&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(219,115,32)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;777.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[libc-2.27.so] (6 samples, 0.12%)&lt;/title&gt;&lt;rect x=&#34;774&#34; y=&#34;421&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(223,209,35)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;777.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (6 samples, 0.12%)&lt;/title&gt;&lt;rect x=&#34;774&#34; y=&#34;405&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(222,185,16)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;777.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;775&#34; y=&#34;389&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(237,221,52)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;778.00&#34; y=&#34;399.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (4 samples, 0.08%)&lt;/title&gt;&lt;rect x=&#34;775&#34; y=&#34;373&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(240,155,53)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;778.00&#34; y=&#34;383.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (4 samples, 0.08%)&lt;/title&gt;&lt;rect x=&#34;775&#34; y=&#34;357&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(242,72,32)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;778.00&#34; y=&#34;367.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (4 samples, 0.08%)&lt;/title&gt;&lt;rect x=&#34;775&#34; y=&#34;341&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(254,18,32)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;778.00&#34; y=&#34;351.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (4 samples, 0.08%)&lt;/title&gt;&lt;rect x=&#34;775&#34; y=&#34;325&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(221,164,31)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;778.00&#34; y=&#34;335.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (4 samples, 0.08%)&lt;/title&gt;&lt;rect x=&#34;775&#34; y=&#34;309&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(209,95,1)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;778.00&#34; y=&#34;319.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;775&#34; y=&#34;293&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(227,34,18)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;778.00&#34; y=&#34;303.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;776&#34; y=&#34;277&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(219,137,8)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;779.00&#34; y=&#34;287.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;cblas_dgemm (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;776&#34; y=&#34;709&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(251,118,22)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;779.00&#34; y=&#34;719.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (26 samples, 0.50%)&lt;/title&gt;&lt;rect x=&#34;776&#34; y=&#34;693&#34; width=&#34;6&#34; height=&#34;15&#34; fill=&#34;rgb(222,131,49)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;779.00&#34; y=&#34;703.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (26 samples, 0.50%)&lt;/title&gt;&lt;rect x=&#34;776&#34; y=&#34;677&#34; width=&#34;6&#34; height=&#34;15&#34; fill=&#34;rgb(235,167,37)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;779.00&#34; y=&#34;687.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (26 samples, 0.50%)&lt;/title&gt;&lt;rect x=&#34;776&#34; y=&#34;661&#34; width=&#34;6&#34; height=&#34;15&#34; fill=&#34;rgb(206,102,1)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;779.00&#34; y=&#34;671.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (26 samples, 0.50%)&lt;/title&gt;&lt;rect x=&#34;776&#34; y=&#34;645&#34; width=&#34;6&#34; height=&#34;15&#34; fill=&#34;rgb(236,183,43)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;779.00&#34; y=&#34;655.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (26 samples, 0.50%)&lt;/title&gt;&lt;rect x=&#34;776&#34; y=&#34;629&#34; width=&#34;6&#34; height=&#34;15&#34; fill=&#34;rgb(241,85,38)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;779.00&#34; y=&#34;639.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (26 samples, 0.50%)&lt;/title&gt;&lt;rect x=&#34;776&#34; y=&#34;613&#34; width=&#34;6&#34; height=&#34;15&#34; fill=&#34;rgb(226,180,48)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;779.00&#34; y=&#34;623.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (26 samples, 0.50%)&lt;/title&gt;&lt;rect x=&#34;776&#34; y=&#34;597&#34; width=&#34;6&#34; height=&#34;15&#34; fill=&#34;rgb(253,157,8)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;779.00&#34; y=&#34;607.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (26 samples, 0.50%)&lt;/title&gt;&lt;rect x=&#34;776&#34; y=&#34;581&#34; width=&#34;6&#34; height=&#34;15&#34; fill=&#34;rgb(231,112,48)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;779.00&#34; y=&#34;591.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;782&#34; y=&#34;677&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(211,79,18)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;785.00&#34; y=&#34;687.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;782&#34; y=&#34;661&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(243,176,36)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;785.00&#34; y=&#34;671.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[ld-2.27.so] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;782&#34; y=&#34;677&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(213,212,2)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;785.00&#34; y=&#34;687.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[ld-2.27.so] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;782&#34; y=&#34;661&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(254,38,26)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;785.00&#34; y=&#34;671.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[ld-2.27.so] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;782&#34; y=&#34;645&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(231,166,38)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;785.00&#34; y=&#34;655.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[ld-2.27.so] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;782&#34; y=&#34;629&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(246,148,42)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;785.00&#34; y=&#34;639.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[ld-2.27.so] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;782&#34; y=&#34;613&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(211,97,26)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;785.00&#34; y=&#34;623.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;__GI___pthread_mutex_lock (3 samples, 0.06%)&lt;/title&gt;&lt;rect x=&#34;783&#34; y=&#34;661&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(238,208,3)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;786.00&#34; y=&#34;671.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;__GI___pthread_mutex_unlock (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;784&#34; y=&#34;661&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(248,137,15)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;787.00&#34; y=&#34;671.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;__pthread_cond_wait (19 samples, 0.37%)&lt;/title&gt;&lt;rect x=&#34;784&#34; y=&#34;661&#34; width=&#34;4&#34; height=&#34;15&#34; fill=&#34;rgb(215,57,13)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;787.00&#34; y=&#34;671.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (19 samples, 0.37%)&lt;/title&gt;&lt;rect x=&#34;784&#34; y=&#34;645&#34; width=&#34;4&#34; height=&#34;15&#34; fill=&#34;rgb(229,78,23)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;787.00&#34; y=&#34;655.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (19 samples, 0.37%)&lt;/title&gt;&lt;rect x=&#34;784&#34; y=&#34;629&#34; width=&#34;4&#34; height=&#34;15&#34; fill=&#34;rgb(230,80,12)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;787.00&#34; y=&#34;639.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (19 samples, 0.37%)&lt;/title&gt;&lt;rect x=&#34;784&#34; y=&#34;613&#34; width=&#34;4&#34; height=&#34;15&#34; fill=&#34;rgb(242,124,18)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;787.00&#34; y=&#34;623.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (19 samples, 0.37%)&lt;/title&gt;&lt;rect x=&#34;784&#34; y=&#34;597&#34; width=&#34;4&#34; height=&#34;15&#34; fill=&#34;rgb(228,36,33)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;787.00&#34; y=&#34;607.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (19 samples, 0.37%)&lt;/title&gt;&lt;rect x=&#34;784&#34; y=&#34;581&#34; width=&#34;4&#34; height=&#34;15&#34; fill=&#34;rgb(254,84,0)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;787.00&#34; y=&#34;591.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (19 samples, 0.37%)&lt;/title&gt;&lt;rect x=&#34;784&#34; y=&#34;565&#34; width=&#34;4&#34; height=&#34;15&#34; fill=&#34;rgb(226,128,20)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;787.00&#34; y=&#34;575.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (19 samples, 0.37%)&lt;/title&gt;&lt;rect x=&#34;784&#34; y=&#34;549&#34; width=&#34;4&#34; height=&#34;15&#34; fill=&#34;rgb(221,101,38)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;787.00&#34; y=&#34;559.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (19 samples, 0.37%)&lt;/title&gt;&lt;rect x=&#34;784&#34; y=&#34;533&#34; width=&#34;4&#34; height=&#34;15&#34; fill=&#34;rgb(244,157,13)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;787.00&#34; y=&#34;543.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (19 samples, 0.37%)&lt;/title&gt;&lt;rect x=&#34;784&#34; y=&#34;517&#34; width=&#34;4&#34; height=&#34;15&#34; fill=&#34;rgb(208,224,48)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;787.00&#34; y=&#34;527.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (19 samples, 0.37%)&lt;/title&gt;&lt;rect x=&#34;784&#34; y=&#34;501&#34; width=&#34;4&#34; height=&#34;15&#34; fill=&#34;rgb(214,49,29)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;787.00&#34; y=&#34;511.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (19 samples, 0.37%)&lt;/title&gt;&lt;rect x=&#34;784&#34; y=&#34;485&#34; width=&#34;4&#34; height=&#34;15&#34; fill=&#34;rgb(210,108,35)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;787.00&#34; y=&#34;495.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (19 samples, 0.37%)&lt;/title&gt;&lt;rect x=&#34;784&#34; y=&#34;469&#34; width=&#34;4&#34; height=&#34;15&#34; fill=&#34;rgb(238,163,15)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;787.00&#34; y=&#34;479.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (19 samples, 0.37%)&lt;/title&gt;&lt;rect x=&#34;784&#34; y=&#34;453&#34; width=&#34;4&#34; height=&#34;15&#34; fill=&#34;rgb(243,103,6)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;787.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (19 samples, 0.37%)&lt;/title&gt;&lt;rect x=&#34;784&#34; y=&#34;437&#34; width=&#34;4&#34; height=&#34;15&#34; fill=&#34;rgb(253,20,3)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;787.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;__sched_yield (40 samples, 0.77%)&lt;/title&gt;&lt;rect x=&#34;788&#34; y=&#34;661&#34; width=&#34;9&#34; height=&#34;15&#34; fill=&#34;rgb(208,123,27)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;791.00&#34; y=&#34;671.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (37 samples, 0.71%)&lt;/title&gt;&lt;rect x=&#34;789&#34; y=&#34;645&#34; width=&#34;8&#34; height=&#34;15&#34; fill=&#34;rgb(217,108,42)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;792.00&#34; y=&#34;655.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (33 samples, 0.64%)&lt;/title&gt;&lt;rect x=&#34;790&#34; y=&#34;629&#34; width=&#34;7&#34; height=&#34;15&#34; fill=&#34;rgb(230,176,12)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;793.00&#34; y=&#34;639.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (21 samples, 0.41%)&lt;/title&gt;&lt;rect x=&#34;793&#34; y=&#34;613&#34; width=&#34;4&#34; height=&#34;15&#34; fill=&#34;rgb(216,214,38)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;796.00&#34; y=&#34;623.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (20 samples, 0.39%)&lt;/title&gt;&lt;rect x=&#34;793&#34; y=&#34;597&#34; width=&#34;4&#34; height=&#34;15&#34; fill=&#34;rgb(219,93,0)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;796.00&#34; y=&#34;607.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (20 samples, 0.39%)&lt;/title&gt;&lt;rect x=&#34;793&#34; y=&#34;581&#34; width=&#34;4&#34; height=&#34;15&#34; fill=&#34;rgb(245,134,19)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;796.00&#34; y=&#34;591.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (18 samples, 0.35%)&lt;/title&gt;&lt;rect x=&#34;793&#34; y=&#34;565&#34; width=&#34;4&#34; height=&#34;15&#34; fill=&#34;rgb(238,143,43)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;796.00&#34; y=&#34;575.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (15 samples, 0.29%)&lt;/title&gt;&lt;rect x=&#34;794&#34; y=&#34;549&#34; width=&#34;3&#34; height=&#34;15&#34; fill=&#34;rgb(207,146,41)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;797.00&#34; y=&#34;559.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (8 samples, 0.15%)&lt;/title&gt;&lt;rect x=&#34;796&#34; y=&#34;533&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(235,211,39)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;799.00&#34; y=&#34;543.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (7 samples, 0.14%)&lt;/title&gt;&lt;rect x=&#34;796&#34; y=&#34;517&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(244,83,18)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;799.00&#34; y=&#34;527.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (7 samples, 0.14%)&lt;/title&gt;&lt;rect x=&#34;796&#34; y=&#34;501&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(249,8,40)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;799.00&#34; y=&#34;511.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (7 samples, 0.14%)&lt;/title&gt;&lt;rect x=&#34;796&#34; y=&#34;485&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(233,33,47)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;799.00&#34; y=&#34;495.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;797&#34; y=&#34;469&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(233,156,48)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;800.00&#34; y=&#34;479.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;797&#34; y=&#34;453&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(230,60,21)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;800.00&#34; y=&#34;463.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;797&#34; y=&#34;437&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(250,73,53)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;800.00&#34; y=&#34;447.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;797&#34; y=&#34;421&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(229,175,34)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;800.00&#34; y=&#34;431.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;797&#34; y=&#34;405&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(215,30,18)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;800.00&#34; y=&#34;415.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[libopenblasp-r0.2.20.so] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;797&#34; y=&#34;645&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(215,157,52)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;800.00&#34; y=&#34;655.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;mmap64 (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;797&#34; y=&#34;629&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(210,14,49)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;800.00&#34; y=&#34;639.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;797&#34; y=&#34;613&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(220,43,39)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;800.00&#34; y=&#34;623.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;797&#34; y=&#34;597&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(211,162,6)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;800.00&#34; y=&#34;607.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;797&#34; y=&#34;581&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(229,37,19)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;800.00&#34; y=&#34;591.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;797&#34; y=&#34;565&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(228,205,48)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;800.00&#34; y=&#34;575.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;797&#34; y=&#34;549&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(250,191,50)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;800.00&#34; y=&#34;559.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;797&#34; y=&#34;533&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(214,130,6)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;800.00&#34; y=&#34;543.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;797&#34; y=&#34;517&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(253,108,44)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;800.00&#34; y=&#34;527.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;clone (96 samples, 1.85%)&lt;/title&gt;&lt;rect x=&#34;776&#34; y=&#34;709&#34; width=&#34;22&#34; height=&#34;15&#34; fill=&#34;rgb(227,9,2)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;779.00&#34; y=&#34;719.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;c..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;start_thread (70 samples, 1.35%)&lt;/title&gt;&lt;rect x=&#34;782&#34; y=&#34;693&#34; width=&#34;16&#34; height=&#34;15&#34; fill=&#34;rgb(248,146,52)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;785.00&#34; y=&#34;703.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[libopenblasp-r0.2.20.so] (68 samples, 1.31%)&lt;/title&gt;&lt;rect x=&#34;782&#34; y=&#34;677&#34; width=&#34;16&#34; height=&#34;15&#34; fill=&#34;rgb(213,182,29)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;785.00&#34; y=&#34;687.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;blas_memory_alloc (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;797&#34; y=&#34;661&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(240,102,3)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;800.00&#34; y=&#34;671.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;__GI___pthread_mutex_lock (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;798&#34; y=&#34;645&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(221,101,15)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;801.00&#34; y=&#34;655.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;798&#34; y=&#34;629&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(250,149,30)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;801.00&#34; y=&#34;639.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;798&#34; y=&#34;613&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(241,116,50)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;801.00&#34; y=&#34;623.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;798&#34; y=&#34;597&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(240,183,54)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;801.00&#34; y=&#34;607.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;798&#34; y=&#34;581&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(216,82,31)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;801.00&#34; y=&#34;591.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;798&#34; y=&#34;565&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(219,202,22)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;801.00&#34; y=&#34;575.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;798&#34; y=&#34;549&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(231,173,21)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;801.00&#34; y=&#34;559.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;dgemm_beta_HASWELL (542 samples, 10.46%)&lt;/title&gt;&lt;rect x=&#34;798&#34; y=&#34;709&#34; width=&#34;123&#34; height=&#34;15&#34; fill=&#34;rgb(233,80,5)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;801.00&#34; y=&#34;719.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;dgemm_beta_HASW..&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;921&#34; y=&#34;693&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(239,60,18)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;924.00&#34; y=&#34;703.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;921&#34; y=&#34;677&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(247,101,47)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;924.00&#34; y=&#34;687.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;921&#34; y=&#34;661&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(206,27,28)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;924.00&#34; y=&#34;671.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;921&#34; y=&#34;645&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(245,54,21)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;924.00&#34; y=&#34;655.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;921&#34; y=&#34;629&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(207,148,35)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;924.00&#34; y=&#34;639.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;921&#34; y=&#34;613&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(247,114,0)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;924.00&#34; y=&#34;623.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;921&#34; y=&#34;597&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(220,85,2)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;924.00&#34; y=&#34;607.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;921&#34; y=&#34;581&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(218,30,30)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;924.00&#34; y=&#34;591.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;921&#34; y=&#34;565&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(210,134,31)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;924.00&#34; y=&#34;575.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;921&#34; y=&#34;549&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(242,128,26)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;924.00&#34; y=&#34;559.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;921&#34; y=&#34;533&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(236,23,8)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;924.00&#34; y=&#34;543.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;921&#34; y=&#34;517&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(216,155,33)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;924.00&#34; y=&#34;527.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;dgemm_kernel_HASWELL (1,170 samples, 22.57%)&lt;/title&gt;&lt;rect x=&#34;921&#34; y=&#34;709&#34; width=&#34;267&#34; height=&#34;15&#34; fill=&#34;rgb(215,25,29)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;924.00&#34; y=&#34;719.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;dgemm_kernel_HASWELL&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;1187&#34; y=&#34;693&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(225,84,12)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;1190.00&#34; y=&#34;703.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;1187&#34; y=&#34;677&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(227,193,10)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;1190.00&#34; y=&#34;687.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;1187&#34; y=&#34;661&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(247,75,25)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;1190.00&#34; y=&#34;671.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;1187&#34; y=&#34;645&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(231,16,13)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;1190.00&#34; y=&#34;655.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;1187&#34; y=&#34;629&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(253,89,42)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;1190.00&#34; y=&#34;639.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;1187&#34; y=&#34;613&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(243,126,33)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;1190.00&#34; y=&#34;623.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;1187&#34; y=&#34;597&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(206,87,52)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;1190.00&#34; y=&#34;607.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;1187&#34; y=&#34;581&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(213,176,31)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;1190.00&#34; y=&#34;591.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;1187&#34; y=&#34;565&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(230,67,32)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;1190.00&#34; y=&#34;575.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;1187&#34; y=&#34;549&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(231,7,30)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;1190.00&#34; y=&#34;559.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;1187&#34; y=&#34;533&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(210,162,34)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;1190.00&#34; y=&#34;543.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;1187&#34; y=&#34;517&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(224,112,20)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;1190.00&#34; y=&#34;527.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;1187&#34; y=&#34;501&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(235,88,32)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;1190.00&#34; y=&#34;511.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;dgemm_nn (2 samples, 0.04%)&lt;/title&gt;&lt;rect x=&#34;1188&#34; y=&#34;709&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(254,84,28)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;1191.00&#34; y=&#34;719.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;nndl-rust (5,178 samples, 99.90%)&lt;/title&gt;&lt;rect x=&#34;10&#34; y=&#34;725&#34; width=&#34;1178&#34; height=&#34;15&#34; fill=&#34;rgb(241,21,11)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;13.00&#34; y=&#34;735.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;nndl-rust&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;ndarray::impl_methods::&amp;lt;impl ndarray::ArrayBase&amp;lt;S, D&amp;gt;&amp;gt;::is_standard_layout::is_standard_layout (1 samples, 0.02%)&lt;/title&gt;&lt;rect x=&#34;1188&#34; y=&#34;709&#34; width=&#34;0&#34; height=&#34;15&#34; fill=&#34;rgb(221,220,13)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;1191.00&#34; y=&#34;719.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;all (5,183 samples, 100%)&lt;/title&gt;&lt;rect x=&#34;10&#34; y=&#34;741&#34; width=&#34;1180&#34; height=&#34;15&#34; fill=&#34;rgb(252,66,54)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;13.00&#34; y=&#34;751.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;perf (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;1188&#34; y=&#34;725&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(232,145,12)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;1191.00&#34; y=&#34;735.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;1188&#34; y=&#34;709&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(219,48,40)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;1191.00&#34; y=&#34;719.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;1188&#34; y=&#34;693&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(242,67,4)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;1191.00&#34; y=&#34;703.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;1188&#34; y=&#34;677&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(233,129,40)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;1191.00&#34; y=&#34;687.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;1188&#34; y=&#34;661&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(241,23,8)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;1191.00&#34; y=&#34;671.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;1188&#34; y=&#34;645&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(253,149,54)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;1191.00&#34; y=&#34;655.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;1188&#34; y=&#34;629&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(245,14,8)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;1191.00&#34; y=&#34;639.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;1188&#34; y=&#34;613&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(241,135,34)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;1191.00&#34; y=&#34;623.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;1188&#34; y=&#34;597&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(232,202,22)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;1191.00&#34; y=&#34;607.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;1188&#34; y=&#34;581&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(254,55,35)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;1191.00&#34; y=&#34;591.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;1188&#34; y=&#34;565&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(242,175,40)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;1191.00&#34; y=&#34;575.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (5 samples, 0.10%)&lt;/title&gt;&lt;rect x=&#34;1188&#34; y=&#34;549&#34; width=&#34;2&#34; height=&#34;15&#34; fill=&#34;rgb(236,139,39)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;1191.00&#34; y=&#34;559.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (4 samples, 0.08%)&lt;/title&gt;&lt;rect x=&#34;1189&#34; y=&#34;533&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(217,217,35)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;1192.00&#34; y=&#34;543.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;g class=&#34;func_g&#34; onmouseover=&#34;s(this)&#34; onmouseout=&#34;c()&#34; onclick=&#34;zoom(this)&#34;&gt;&lt;title&gt;[[kernel.kallsyms]] (4 samples, 0.08%)&lt;/title&gt;&lt;rect x=&#34;1189&#34; y=&#34;517&#34; width=&#34;1&#34; height=&#34;15&#34; fill=&#34;rgb(234,51,34)&#34;/&gt;&lt;text text-anchor=&#34;left&#34; x=&#34;1192.00&#34; y=&#34;527.50&#34; font-size=&#34;12&#34; font-family=&#34;Verdana&#34; fill=&#34;rgb(0, 0, 0)&#34;&gt;&lt;/text&gt;&lt;/g&gt;&lt;/svg&gt;

&lt;/figure&gt;

&lt;p&gt;If you&amp;rsquo;ve never looked at a flamegraph before the idea is that the proportion of
a program&amp;rsquo;s runtime that occurs in a routine is proportional to the width of the
bar for that routine. The main function is at the bottom of the graph and
functions called by main are stacked on top. This gives you a simple view into
what functions take up the most time in a program - anything that is very &amp;ldquo;wide&amp;rdquo;
in the graph is where most of the time is spent and any stack of functions that
is very tall and wide is spending a lot of time in code very deep in a call
stack. Looking at the flamegraph above we can see that about half of the time is
spent in functions with names like &lt;code&gt;dgemm_kernel_HASWELL&lt;/code&gt; &amp;mdash; these are
functions in the OpenBLAS linear alebra library. The rest of the time is spent
doing addition between arrays in `update_mini_batch and allocating arrays &amp;mdash;
all other parts of my program make a negligible contribution to the runtime.&lt;/p&gt;
&lt;p&gt;If we made an analogous flamegraph for the python code, we would see a
similar pattern &amp;mdash; most time is spent doing linear algebra (in the places
where &lt;code&gt;np.dot&lt;/code&gt; is called inside the backpropagation routine). So since most of
the time in either Rust or Python is spent inside a numerical linear algebra
library, we can never hope for a 10x speedup.&lt;/p&gt;
&lt;p&gt;In fact it&amp;rsquo;s worse than that. One of the exercises in the book is to rewrite the
Python code to use vectorized matrix multiplication. In this approach the
backpropagation for all of the samples in each mini-batch happens in a single
set of vectorized matrix multiplication operations. This requires the ability to
matrix multiplication between 3D and 2D arrays. Since each matrix multiplication
operation happens using a larger amount of data than the non-vectorized case,
OpenBLAS is able to more efficiently occupy CPU caches and registers, ultimately
better using the available CPU resources on my laptop. The rewritten Python
version ends up faster than the Rust version, again by a factor of two or so.&lt;/p&gt;
&lt;p&gt;In principle it&amp;rsquo;s possible to apply the same optimization to the Rust code,
however the &lt;code&gt;ndarray&lt;/code&gt; crate does &lt;a href=&#34;https://github.com/rust-ndarray/ndarray/issues/16&#34;&gt;not yet
support&lt;/a&gt; matrix
multiplication for dimensionalities higher than 2. It might also be possible to use
thread parallelization on the mini-batch updates using a library like
&lt;a href=&#34;https://docs.rs/rayon/1.1.0/rayon/&#34;&gt;rayon&lt;/a&gt;. I tried this on my laptop and did
not see any speedups but might have on a beefier machine with more CPU
threads. I could also have tried using a different low-level linear algebra
implementation, for example there are rust bindings &lt;a href=&#34;https://github.com/tensorflow/rust&#34;&gt;for
tensorflow&lt;/a&gt; and
&lt;a href=&#34;https://github.com/LaurentMazare/tch-rs&#34;&gt;torch&lt;/a&gt;, however at that point I feel
like I might as well be using the Python bindings for those libraries.&lt;/p&gt;
&lt;h2 id=&#34;is-rust-suitable-for-data-science-workflows&#34;&gt;Is rust suitable for data science workflows?&lt;/h2&gt;
&lt;p&gt;Right now I have to say that the answer is &amp;ldquo;not yet&amp;rdquo;. I&amp;rsquo;ll definitely reach for
rust in the future when I need to write optimized low-level code with minimal
dependencies. However using it as a full replacement for python or C++ will
require a more stabilized and well-developed ecosystem of packages.&lt;/p&gt;
</description>
		</item>
		<item>
			<title>Loading MNIST Data in Rust</title>
			<link>https://ngoldbaum.github.io/posts/loading-mnist-data-in-rust/</link>
			<pubDate>Thu, 25 Jul 2019 16:41:04 -0400</pubDate>
			<guid isPermaLink="true">https://ngoldbaum.github.io/posts/loading-mnist-data-in-rust/</guid>
			<description>&lt;p&gt;I&amp;rsquo;ve been spending a lot of time here at &lt;a href=&#34;https://recurse.com&#34;&gt;the Recurse
Center&lt;/a&gt; working on problems in the Rust programming
language. In a previous life I had spent a lot of time doing data intensive
numerical work in Python but so far I haven&amp;rsquo;t tried to write similar code in
Rust. This week I&amp;rsquo;ve been going through &lt;a href=&#34;http://michaelnielsen.org/&#34;&gt;Michael
Nielson&amp;rsquo;s&lt;/a&gt; very nice and easy-to-understand online
interactive textbook &lt;a href=&#34;http://neuralnetworksanddeeplearning.com/&#34;&gt;Neural Networks and Deep
Learning&lt;/a&gt; which comes out of the box
with a Python 2.7 implementations of several neural networks. The Python code
makes heavy use of NumPy and most mathematical operations make use of
vectorized computation.&lt;/p&gt;
&lt;p&gt;The most advanced rust equivalent of NumPy is the
&lt;a href=&#34;https://docs.rs/ndarray/0.12.1/ndarray/&#34;&gt;ndarray&lt;/a&gt; crate. It even has a
&lt;a href=&#34;https://docs.rs/ndarray/0.12.1/ndarray/doc/ndarray_for_numpy_users/index.html&#34;&gt;documentation
page&lt;/a&gt;
specifically for users of NumPy. My hope was that porting the code should be
straightforward. It would also give me an opportunity to write some rust code
that handles the inherently mutable internal state of the neural network. I&amp;rsquo;ve
been told that this sort of thing can be tricky in Rust so let&amp;rsquo;s find out
exactly how tricky it is.&lt;/p&gt;
&lt;p&gt;The book is based around the problem of classifying handwritten digits. This
problem is a standard benchmark for machine learning algorithms and a lot of
work has gone into generating a standardized dataset people can use to train and
verify their neural networks. The python code I&amp;rsquo;m porting loads the data using
the &lt;a href=&#34;https://docs.python.org/3/library/pickle.html&#34;&gt;pickle protocol&lt;/a&gt; on pickle
files stored in the code repository. Loading pickle files in rust is not
something I want to dive into too deeply so instead I decided to use the
original MNIST datasets available &lt;a href=&#34;http://yann.lecun.com/exdb/mnist/&#34;&gt;from the MNIST page on Yann LeCun&amp;rsquo;s
website&lt;/a&gt;. These files are stored as &lt;code&gt;idx&lt;/code&gt;
files &amp;mdash; a simple binary format that is fully described at the bottom of the
MNIST page. As previous readers of my blog know I have a little bit of
experience parsing binary formats with rust so this was relatively
straightforward.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;idx&lt;/code&gt; format stores binary array data. There is a magic number that encodes
the type of the data &amp;mdash; although all the files we are going to be working with
store data as unsigned 8 bit integers &amp;mdash; and the number of dimensions, followed
by the size of each dimension and then the data encoded in C order.&lt;/p&gt;
&lt;p&gt;To represent the data as they exist on-disk I defined a struct named &lt;code&gt;MnistData&lt;/code&gt;
that wraps a vector containing the dimensions of the data and then a &lt;code&gt;Vec&amp;lt;u8&amp;gt;&lt;/code&gt;
that contains a flattened representation of the data:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[derive(Debug)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MnistData&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sizes: Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    data: Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;u8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To actually read the data I created an initializer for the &lt;code&gt;MnistData&lt;/code&gt;
struct that looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;impl&lt;/span&gt; MnistData {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt;(f: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;File&lt;/span&gt;) -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;MnistData, std::io::Error&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; gz &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; flate2::GzDecoder::new(f);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; contents: Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;u8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Vec::new();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        gz.read_to_end(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; contents)&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cursor::new(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;contents);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; magic_number &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r.read_i32::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BigEndian&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; sizes: Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Vec::new();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; data: Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;u8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Vec::new();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; magic_number {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;2049&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                sizes.push(r.read_i32::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BigEndian&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;2051&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                sizes.push(r.read_i32::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BigEndian&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                sizes.push(r.read_i32::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BigEndian&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                sizes.push(r.read_i32::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BigEndian&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _ &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; panic!(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        r.read_to_end(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; data)&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Ok(MnistData { sizes, data })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This makes use of the &lt;a href=&#34;https://crates.io/crates/byteorder&#34;&gt;&lt;code&gt;byteorder&lt;/code&gt;&lt;/a&gt; crate,
which provides useful methods on rust&amp;rsquo;s I/O types to interpret bytes as various
kinds of integers in big-endian and little-endian format. It also makes use of
the &lt;a href=&#34;https://crates.io/crates/flate2&#34;&gt;flate2&lt;/a&gt; crate to decompress the gzip
files.&lt;/p&gt;
&lt;p&gt;To actually work with the data we will be converting the images into column
vectors - e.g. formally a 2D array with a shape of &lt;code&gt;(npixels, 1)&lt;/code&gt;. We&amp;rsquo;ll make
use of the &lt;a href=&#34;https://docs.rs/ndarray/0.12.1/ndarray/&#34;&gt;&lt;code&gt;ndarray&lt;/code&gt;&lt;/a&gt; crate, which
provides a type that implements vectorized array computation and matrix
operations. We can also configure &lt;code&gt;ndarray&lt;/code&gt; to use &lt;code&gt;OpenBLAS&lt;/code&gt;, a C and FORTRAN
linear algebra library that provides highly optimized impelentations for various
matrix operations on a large variety of CPUs. If you want to use &lt;code&gt;ndarray&lt;/code&gt; with
OpenBLAS, you need to explicitly turn that on in the &lt;code&gt;Cargo.toml&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;dependencies&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ndarray&lt;/span&gt; = { &lt;span style=&#34;color:#a6e22e&#34;&gt;version&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.12&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;features&lt;/span&gt; = [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;blas&amp;#34;&lt;/span&gt;] }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;blas-src&lt;/span&gt; = { &lt;span style=&#34;color:#a6e22e&#34;&gt;version&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.2.0&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;default-features&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;features&lt;/span&gt; = [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;openblas&amp;#34;&lt;/span&gt;] }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;openblas-src&lt;/span&gt; = { &lt;span style=&#34;color:#a6e22e&#34;&gt;version&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.6.0&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;default-features&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;features&lt;/span&gt; = [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cblas&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;system&amp;#34;&lt;/span&gt;] }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If this works on your operating system and you have the relevant libraries
installed via e.g. your operating system&amp;rsquo;s package manager this will
dramatically accelerate linear algebra operations.&lt;/p&gt;
&lt;p&gt;Now to convert the data as loaded in directly from the &lt;code&gt;idx&lt;/code&gt; file we need to do
a bit of data munging. I decided to create another struct, &lt;code&gt;MnistImage&lt;/code&gt; that has
a copy of the image vector and the classification for the image:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[derive(Debug)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MnistImage&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; image: &lt;span style=&#34;color:#a6e22e&#34;&gt;Array2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;f64&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; classification: &lt;span style=&#34;color:#66d9ef&#34;&gt;u8&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With these definitions, processing the full dataset looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;load_data&lt;/span&gt;(dataset_name: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;) -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;MnistImage&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, std::io::Error&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; filename &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; format!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-labels-idx1-ubyte.gz&amp;#34;&lt;/span&gt;, dataset_name);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; label_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;MnistData::new(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;(File::open(filename))&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; filename &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; format!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-images-idx3-ubyte.gz&amp;#34;&lt;/span&gt;, dataset_name);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; images_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;MnistData::new(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;(File::open(filename))&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; images: Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Array2&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;f64&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Vec::new();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; image_shape &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (images_data.sizes[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; images_data.sizes[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;images_data.sizes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; image_shape;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; image_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; images_data.data[start&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;start &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; image_shape].to_vec();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; image_data: Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;f64&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; image_data.into_iter().map(&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; x &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;f64&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;255.&lt;/span&gt;).collect();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        images.push(Array2::from_shape_vec((image_shape, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), image_data).unwrap());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; classifications: Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;u8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; label_data.data.clone();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; ret: Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;MnistImage&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Vec::new();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (image, classification) &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; images.into_iter().zip(classifications.into_iter()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ret.push(MnistImage {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            image,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            classification,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Ok(ret)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This function takes the name of the dataset &amp;mdash; for example for the &lt;code&gt;t10k&lt;/code&gt;
training data this function should pass in the string &lt;code&gt;t10k&lt;/code&gt; and returns a &lt;code&gt;Vec&lt;/code&gt;
of &lt;code&gt;MnistImage&lt;/code&gt; instances, one for each image in the dataset. To do this it
loads the classification and image files as an &lt;code&gt;MnistData&lt;/code&gt; struct. Then we
figure out the dimensions of the image and thus ultimately what the shape of the
column vector we would like to store should be. Then we create a &lt;code&gt;Vec&lt;/code&gt; from the
portion of the MNIST data corresponding to the image we want to extract, convert
the scale of the image from bytescale to floats ranging from 0 to 1 (we do this
because that&amp;rsquo;s how the data are stored for the Python code), and then finally
create an image array to store the data. Once we&amp;rsquo;ve created all the image arrays
we iterate over the images and classifications, creating an &lt;code&gt;MnistImage&lt;/code&gt;
instance to wrap each image array and classification, which we return.&lt;/p&gt;
&lt;p&gt;All of this code lives in its own module so we only need to expose the
&lt;code&gt;MnistImage&lt;/code&gt; struct and the &lt;code&gt;load_data&lt;/code&gt; function to the rest of our code. I like
how easy it is to enforce separation of concerns in Rust, much easier than in
Python where separations of concern is more of a social convention.&lt;/p&gt;
&lt;p&gt;In the next post I&amp;rsquo;ll go into the process of porting the neural network code to
rust &amp;mdash; stay tuned!&lt;/p&gt;
</description>
		</item>
		<item>
			<title>Building a CO₂ Monitor with Python on a Raspberry Pi</title>
			<link>https://ngoldbaum.github.io/posts/co2-monitor/</link>
			<pubDate>Wed, 26 Jun 2019 16:45:10 -0400</pubDate>
			<guid isPermaLink="true">https://ngoldbaum.github.io/posts/co2-monitor/</guid>
			<description>&lt;p&gt;A few weeks ago I was scrolling through my twitter feed and happened upon this
twitter thread from a friend and sometimes colleague &lt;a href=&#34;http://www.adamgginsburg.com/&#34;&gt;Adam
Ginsburg&lt;/a&gt;, an astronomer at the National Radio
Astronomy Observatory and soon to be a professor at the University of Florida.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve definitely experienced situations where I had to sit in a room with lots of
people and felt more and more tired the longer I spent in the room. I had never
considered that this is more than just being bored, that there might be a
physiological reason for this feeling. This tweet led me to some discussion from
Adam Ginsburg, an astronomer at the National Radio Astronomy Observatory who I
know from my previous life as an astrophysicist, about how he set this up and
where to buy the CO&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; sensor.&lt;/p&gt;
&lt;p&gt;It turns out it&amp;rsquo;s pretty easy to measure the CO&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; concentration in a
room using a sensor that speaks to a computer over a USB connection, in
particular the website co2meter.com sells a small desktop model for $80 plus
shipping, with prettier models starting at $100. It was definitely an impulse
purchase but a few clicks later I was the proud owner of a brand new
CO&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; meter. In my defense the &lt;a href=&#34;https://www.washingtonpost.com/business/2019/06/06/why-crowded-meetings-conference-rooms-make-you-so-so-tired/?noredirect=on&amp;amp;utm_term=.52f1fbf1b878&#34;&gt;washington
post&lt;/a&gt;
also thought this was pretty cool.&lt;/p&gt;
&lt;h2 id=&#34;what-does-the-research-say&#34;&gt;What does the research say?&lt;/h2&gt;
&lt;p&gt;Very high levels of carbon dioxide can lead to &lt;a href=&#34;https://www.ncbi.nlm.nih.gov/pubmed/16499405&#34;&gt;such unpleasant
effects&lt;/a&gt; as a racing heart,
arrhythmia, blurred vision, and impaired consciousness. Very high levels, above
10% concentration (100,000 PPM) can cause convulsions, coma, and death. NASA
engineers &lt;a href=&#34;https://www.youtube.com/watch?v=ry55--J4_VQ&#34;&gt;famously&lt;/a&gt; &lt;a href=&#34;https://history.nasa.gov/SP-350/ch-13-4.html&#34;&gt;had to figure
out&lt;/a&gt; how to adapt CO&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt;
scrubbers intended for the command module to function correctly on the lunar
module to save the astronauts on Apollo 13 from such a fate.&lt;/p&gt;
&lt;p&gt;In the last 10 years research has started to emerge that low but elevated levels
of carbon dioxide, perhaps above 1000 PPM, and definitely above 2000 PPM can
have &lt;a href=&#34;https://www.ncbi.nlm.nih.gov/pubmed/23008272&#34;&gt;measurable cognitive
impacts&lt;/a&gt;. As far as I can see with
my brief literature search (see also &lt;a href=&#34;https://iaqscience.lbl.gov/vent-info&#34;&gt;this
review&lt;/a&gt; compiled by Berkeley Lab),
research in this area is mixed, with some high quality studies showing cognitive
impacts and other equivalently high quality research showing no impacts. Further
research is likely needed in larger samples more representative of the broader
population to be sure. However given those caveats, the effects in some of the
existing studies are dramatic for certain kinds of cognitive tests, especially
when the CO&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; concentration is as much as 5 to 10 times above a
typical background level of 400 PPM in the atmosphere. It&amp;rsquo;s also entirely
anecdotal, but these results also jibe with my personal experience, I often get
sleepy and distracted in crowded, poorly ventilated areas.&lt;/p&gt;
&lt;h2 id=&#34;getting-data-from-the-cosub2sub-meter&#34;&gt;Getting data from the CO&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; meter&lt;/h2&gt;
&lt;p&gt;To talk to the CO&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; from a computer you can use the &lt;code&gt;co2meter&lt;/code&gt; Python
package that is available &lt;a href=&#34;https://github.com/vfilimonov/co2meter&#34;&gt;on github&lt;/a&gt;
and installable &lt;a href=&#34;https://pypi.org/project/CO2meter/&#34;&gt;via &lt;code&gt;pip&lt;/code&gt;&lt;/a&gt;. This package
talks to the USB interface using the &lt;a href=&#34;https://github.com/signal11/hidapi&#34;&gt;&lt;code&gt;hidapi&lt;/code&gt;
interface&lt;/a&gt;, in this case using a &lt;a href=&#34;https://github.com/trezor/cython-hidapi&#34;&gt;Cython
wrapper&lt;/a&gt; around &lt;code&gt;hidapi&lt;/code&gt;. To get this
working on a Linux machine, you will need to install a few packages. On Ubuntu
18.04, I had to do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo apt-get install libusb-1.0-0-dev libudev-dev
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo pip install hidapi co2meter
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I also needed to set up &lt;code&gt;udev&lt;/code&gt; rules for the device interface. The following
content in a file name &lt;code&gt;/etc/udev/rules.d/98-co2mon.rules&lt;/code&gt; worked for me:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cfg&#34; data-lang=&#34;cfg&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;SUBSYSTEM&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;=&amp;#34;usb&amp;#34;, ATTRS{idVendor}==&amp;#34;04d9&amp;#34;, ATTRS{idProduct}==&amp;#34;a052&amp;#34;, GROUP=&amp;#34;plugdev&amp;#34;, MODE=&amp;#34;0666&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;KERNEL&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;=&amp;#34;hidraw*&amp;#34;, ATTRS{idVendor}==&amp;#34;04d9&amp;#34;, ATTRS{idProduct}==&amp;#34;a052&amp;#34;, GROUP=&amp;#34;plugdev&amp;#34;, MODE=&amp;#34;0666&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and then reload the &lt;code&gt;udev&lt;/code&gt; rules:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo udevadm control --reload-rules &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; udevadm trigger
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To check that everything is working, do the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo python -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;import co2meter as co2;mon = co2.CO2monitor();print(mon.info)&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Assuming everything is working correctly, you should see output like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;product_name&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;USB-zyTemp&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;vendor_id&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1241&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;serial_no&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1.40&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;product_id&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;41042&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;manufacturer&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Holtek&amp;#39;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;See the &lt;a href=&#34;https://github.com/vfilimonov/co2meter&#34;&gt;&lt;code&gt;co2meter&lt;/code&gt; documentation&lt;/a&gt; for
more details if you don&amp;rsquo;t use Ubuntu.&lt;/p&gt;
&lt;p&gt;I was only able to get this working by connecting to the USB interface as root,
it&amp;rsquo;s probably possible to adjust these rules to make the interface available to
all users. Since I was ultimately doing this on a machine on the Recurse Center
LAN that would not be exposed to the internet I didn&amp;rsquo;t worry too much about
figuring out how to avoid mandating gathering the data using root
privileges. Any suggestions to fix this would be very appreciated.&lt;/p&gt;
&lt;h2 id=&#34;making-it-work-on-a-raspberry-pi&#34;&gt;Making it work on a Raspberry Pi&lt;/h2&gt;
&lt;p&gt;My ultimate goal was to make a liveplot that people can check throughout the day
to see the CO&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; concentration over time, making it easier to spot when
the air is getting stuffy. That means I can&amp;rsquo;t just attach the meter to my laptop
while I&amp;rsquo;m around RC, it needs to be running 24 hours a day in some
out-of-the-way spot. Thankfully the Recurse Center is lousy with Raspberry Pis -
there&amp;rsquo;s a box of them along with some Parallella and Arduino boards in the
closet - and I was able to scrounge up a Raspberry Pi 3 that was gathering dust.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve never really messed with a Raspberry Pi before and it was a fun experience
getting it set up. I did need to buy a micro-SD card from Target to boot the
Raspberry Pi operating system from. I also wasted time trying to find an SD card
reader for a couple hours before realizing that my Dell XPS 13 laptop has a
built-in microSD card reader. After inserting the card into my laptop I &lt;a href=&#34;https://www.raspberrypi.org/documentation/installation/installing-images/&#34;&gt;flashed
a build of
raspbian&lt;/a&gt;
onto the card using Etcher and booted the Pi and connected the Pi to the
CO&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; meter over USB. I then had to repeat the setup steps I did on my
laptop to gather the measurements from the meter. Since the Pi runs on an ARM
chip, it&amp;rsquo;s a little bit harder to set up a custom python environment without
compiling everything from scratch which takes ages on the Pi&amp;rsquo;s slow CPU and
limited memory. Thankfully there are Debian Arm64 builds of all the dependencies
I needed so this wasn&amp;rsquo;t much trouble. Some of the packages on Raspbian Stretch
are old and I needed to work around bugs and behavior differences in the
versions of libraries I could easily use on the Pi compared with the more recent
versions I had on my laptop. Since I set up my Pi, Raspbian Buster came out,
along with more up-to-date packages in the package manager, so this wouldn&amp;rsquo;t be
a problem this week like it was when I was putting this together last week.&lt;/p&gt;
&lt;h2 id=&#34;gathering-and-liveplotting-data&#34;&gt;Gathering and liveplotting data&lt;/h2&gt;
&lt;p&gt;The code for this part lives in a repository on my GitHub &lt;a href=&#34;https://github.com/ngoldbaum/rc-co2monitor&#34;&gt;called
&lt;code&gt;rc-co2monitor&lt;/code&gt;&lt;/a&gt;. There are two main
pieces, a script called &lt;code&gt;gather_data.py&lt;/code&gt; that gathers the measurements from the
USB interface, saves it, and generates a plot using &lt;code&gt;matplotlib&lt;/code&gt;. The second
piece is a very simple flask webapp that exposes the &lt;code&gt;matplotlib&lt;/code&gt; plot as
content in a webpage that people on the Recurse Center LAN can access. This is a
very bare-bones, not at all fancy setup and there&amp;rsquo;s probably lots of room to
improve aesthetics, the data display, how the data are saved and stored, and to
improve reliability in case the Pi crashes.&lt;/p&gt;
&lt;p&gt;The main loop that generates a data gathering event and creates a plot looks
like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; co2meter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        tb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;time()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mon &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; co2meter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;CO2monitor()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        now &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pandas&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Timestamp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;now()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        output_filename &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.csv&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(now&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;year, now&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;month, now&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;day)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exists(output_filename):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(output_filename, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Time,Concentration,Temperature&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mon&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_data()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mktime(data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;timetuple())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        row &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; t, np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;float64(data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;co2&amp;#34;&lt;/span&gt;]), np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;float64(data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;temp&amp;#34;&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; PPM, &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; °C&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;row))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(output_filename, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            writer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; csv&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;writer(f)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            writer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;writerow(row)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        make_plot()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        tsleep &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; (time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;time() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; tb)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; tsleep &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(tsleep)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I set up an infinite loop that once every 60 seconds reads data from the
CO&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; meter, saves it to a CSV file (and creates the file if it doesn&amp;rsquo;t
yet exist), generates a plot, and then waits until 60 seconds have passed. Each
CSV file only contains one day worth of data. I could have used a database for
this but it seemed simpler to keep everything human readable.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m importing &lt;code&gt;co2meter&lt;/code&gt; here instead of at module level to make it possible to
create plots of the data without having access to a CO&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; meter on a
USB interface, this eases debugging on my laptop.&lt;/p&gt;
&lt;p&gt;To plot the data I gather all data captured within the last 4.5 days an then
plots it using &lt;code&gt;Matplotlib&lt;/code&gt;. I spent some time tweaking the plot to make it look
nice and for the temperature data recorded by the meter made sure to plot using
both Fahrenheit and Celsius scales for the benefit of the many recursers who are
not from the USA. The code to generate the plots is a little too verbose to
include here in this blog post but you can take a look at it on GitHub if you&amp;rsquo;re
curious. The hardest piece of this was - surprisingly to me - localizing the
timestamps I write to the CSV file and adjusting things to be in the US/Eastern
timezone. I&amp;rsquo;ve never really worked with timeseries data that&amp;rsquo;s associated with
dates and I&amp;rsquo;m sure plenty of readers are not surprised this was surprisingly
subtle. I ended up heavily using the &lt;code&gt;pandas&lt;/code&gt; timetamp and datetime machinery,
which worked although it wasn&amp;rsquo;t terribly ergonomic for me.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s what the plot looks like in the end:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ngoldbaum.github.io/co2.png&#34; alt=&#34;CO2 plot&#34;&gt;&lt;/p&gt;
&lt;p&gt;There are definitely spikes in the CO&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; concentration in the
afternoons. The 25th was a very hot day and opening the windows wasn&amp;rsquo;t really an
option, however earlier in the week people noticed that the CO&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt;
concentration was getting high and opened the windows, preventing a very large
spike from developing. You can also see how when people opened the windows on
the 26th, another hot day, the temperature spiked. Unfortunately over the Summer
it&amp;rsquo;s a bit of a tradeoff between being comfortable in terms of temperature and
comfortable in terms of stuffy air.&lt;/p&gt;
&lt;h2 id=&#34;recurse-center-community-reaction&#34;&gt;Recurse Center community reaction&lt;/h2&gt;
&lt;p&gt;Since I set the CO&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; meter up people have started opening up the
windows in the afternoon so I think it&amp;rsquo;s having a real effect, although we&amp;rsquo;ll
see how people react once the CO&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; concentration is high and it&amp;rsquo;s hot
and humid outside. I also presented the monitor project in &lt;a href=&#34;https://docs.google.com/presentation/d/18VCT07ryB_VDw34ojSeqSMqq3uuvf-nrWGNdVvazlSE/edit&#34;&gt;a lightning
talk&lt;/a&gt;.
Afterwards one of the of the Recurse Center asked me what they should do about
the high CO&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; concentration. I didn&amp;rsquo;t really have any great answers
besides perhaps buying more plants for the space, although I think to really
make a dent one would need to buy &lt;em&gt;a lot&lt;/em&gt; of plants or perhaps acquire some vats
of algae.&lt;/p&gt;
&lt;p&gt;In the end I think this was a success. Hopefully this project will be able to
continue running in the space even after I leave. I&amp;rsquo;m planning to watch out for
crashes and see if I can find ways to make it work without any human
intervention since there&amp;rsquo;s no guarantee anyone will want to work on this after I
leave. If you&amp;rsquo;re curious what this looks like in the space, here&amp;rsquo;s a little
portrait of the full setup:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ngoldbaum.github.io/meter.jpg&#34; alt=&#34;The meter in all its glory&#34;&gt;&lt;/p&gt;
</description>
		</item>
		<item>
			<title>Contact</title>
			<link>https://ngoldbaum.github.io/contact/</link>
			<pubDate>Mon, 17 Jun 2019 11:44:59 -0400</pubDate>
			<guid isPermaLink="true">https://ngoldbaum.github.io/contact/</guid>
			<description>&lt;p&gt;&lt;style&gt;
      .ico {
        height: 1.15em;
        width: 1.15em;
        position: relative;
        top: 3px;
      }
      .ico-sm .ico {
        height: .8em;
        width: .8em;
      }
      .ico-md .ico {
        height: 1.5em;
        width: 1.5em;
      }
      .ico-xl .ico {
        height: 2em;
        width: 2em;
      }
      .ico-xxl .ico {
        height: 3em;
        width: 3em;
      }
  &lt;/style&gt;&lt;svg aria-hidden=&#34;true&#34; class=&#34;default ico ico-mail-opened &#34;  xmlns=&#34;http://www.w3.org/2000/svg&#34; class=&#34;icon icon-tabler icon-tabler-mail-opened&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34;/&gt;
  &lt;path d=&#34;M3 9l9 6l9 -6l-9 -6l-9 6&#34; /&gt;
  &lt;path d=&#34;M21 9v10a2 2 0 0 1 -2 2h-14a2 2 0 0 1 -2 -2v-10&#34; /&gt;
  &lt;path d=&#34;M3 19l6 -6&#34; /&gt;
  &lt;path d=&#34;M15 13l6 6&#34; /&gt;
&lt;/svg&gt;
 &lt;a href=&#34;mailto:nathan.goldbaum@gmail.com&#34;&gt;nathan.goldbaum@gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;svg aria-hidden=&#34;true&#34; class=&#34;default ico ico-phone &#34;  xmlns=&#34;http://www.w3.org/2000/svg&#34; class=&#34;icon icon-tabler icon-tabler-phone&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34;/&gt;
  &lt;path d=&#34;M5 4h4l2 5l-2.5 1.5a11 11 0 0 0 5 5l1.5 -2.5l5 2v4a2 2 0 0 1 -2 2a16 16 0 0 1 -15 -15a2 2 0 0 1 2 -2&#34; /&gt;
&lt;/svg&gt;
 (720)-201-2231&lt;/p&gt;
&lt;p&gt;&lt;svg aria-hidden=&#34;true&#34; class=&#34;material ico ico-github &#34;  xmlns=&#34;http://www.w3.org/2000/svg&#34; id=&#34;mdi-github&#34; viewBox=&#34;0 0 24 24&#34;&gt;&lt;path d=&#34;M12,2A10,10 0 0,0 2,12C2,16.42 4.87,20.17 8.84,21.5C9.34,21.58 9.5,21.27 9.5,21C9.5,20.77 9.5,20.14 9.5,19.31C6.73,19.91 6.14,17.97 6.14,17.97C5.68,16.81 5.03,16.5 5.03,16.5C4.12,15.88 5.1,15.9 5.1,15.9C6.1,15.97 6.63,16.93 6.63,16.93C7.5,18.45 8.97,18 9.54,17.76C9.63,17.11 9.89,16.67 10.17,16.42C7.95,16.17 5.62,15.31 5.62,11.5C5.62,10.39 6,9.5 6.65,8.79C6.55,8.54 6.2,7.5 6.75,6.15C6.75,6.15 7.59,5.88 9.5,7.17C10.29,6.95 11.15,6.84 12,6.84C12.85,6.84 13.71,6.95 14.5,7.17C16.41,5.88 17.25,6.15 17.25,6.15C17.8,7.5 17.45,8.54 17.35,8.79C18,9.5 18.38,10.39 18.38,11.5C18.38,15.32 16.04,16.16 13.81,16.41C14.17,16.72 14.5,17.33 14.5,18.26C14.5,19.6 14.5,20.68 14.5,21C14.5,21.27 14.66,21.59 15.17,21.5C19.14,20.16 22,16.42 22,12A10,10 0 0,0 12,2Z&#34; /&gt;&lt;/svg&gt;
 &lt;a href=&#34;https://github.com/ngoldbaum&#34;&gt;ngoldbaum&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;svg aria-hidden=&#34;true&#34; class=&#34;material ico ico-linkedin &#34;  xmlns=&#34;http://www.w3.org/2000/svg&#34; id=&#34;mdi-linkedin&#34; viewBox=&#34;0 0 24 24&#34;&gt;&lt;path d=&#34;M19 3A2 2 0 0 1 21 5V19A2 2 0 0 1 19 21H5A2 2 0 0 1 3 19V5A2 2 0 0 1 5 3H19M18.5 18.5V13.2A3.26 3.26 0 0 0 15.24 9.94C14.39 9.94 13.4 10.46 12.92 11.24V10.13H10.13V18.5H12.92V13.57C12.92 12.8 13.54 12.17 14.31 12.17A1.4 1.4 0 0 1 15.71 13.57V18.5H18.5M6.88 8.56A1.68 1.68 0 0 0 8.56 6.88C8.56 5.95 7.81 5.19 6.88 5.19A1.69 1.69 0 0 0 5.19 6.88C5.19 7.81 5.95 8.56 6.88 8.56M8.27 18.5V10.13H5.5V18.5H8.27Z&#34; /&gt;&lt;/svg&gt;
 &lt;a href=&#34;https://www.linkedin.com/in/ngoldbaum/&#34;&gt;ngoldbaum&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;svg aria-hidden=&#34;true&#34; class=&#34;material ico ico-stack-overflow &#34;  xmlns=&#34;http://www.w3.org/2000/svg&#34; id=&#34;mdi-stack-overflow&#34; viewBox=&#34;0 0 24 24&#34;&gt;&lt;path d=&#34;M17.36,20.2V14.82H19.15V22H3V14.82H4.8V20.2H17.36M6.77,14.32L7.14,12.56L15.93,14.41L15.56,16.17L6.77,14.32M7.93,10.11L8.69,8.5L16.83,12.28L16.07,13.9L7.93,10.11M10.19,6.12L11.34,4.74L18.24,10.5L17.09,11.87L10.19,6.12M14.64,1.87L20,9.08L18.56,10.15L13.2,2.94L14.64,1.87M6.59,18.41V16.61H15.57V18.41H6.59Z&#34; /&gt;&lt;/svg&gt;
 &lt;a href=&#34;https://stackoverflow.com/users/1382869/ngoldbaum&#34;&gt;ngoldbaum&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;svg aria-hidden=&#34;true&#34; class=&#34;custom ico ico-lobsters &#34;  xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;0 0 16 16&#34;&gt;&lt;path d=&#34;M0,0c0,5.33,0,10.67,0,16c5.33,0,10.67,0,16,0c0-5.33,0-10.67,0-16C10.67,0,5.33,0,0,0z M13.14,13.45c-3.2,0-6.43,0-9.63,0c0-0.1,0-0.2,0-0.3c0-0.11,0-0.22,0-0.33c0-0.11,0-0.1,0.1-0.11c0.23-0.02,0.46-0.03,0.69-0.07c0.46-0.08,0.67-0.31,0.74-0.78c0.02-0.14,0.03-0.29,0.03-0.43c0-2.25,0-4.5,0-6.74c0-0.18-0.02-0.36-0.04-0.53C4.99,3.85,4.79,3.66,4.5,3.55c-0.27-0.1-0.55-0.11-0.83-0.13c-0.05,0-0.1,0-0.15,0c0-0.03,0-0.06,0-0.08c0-0.19,0-0.38,0-0.57c0-0.07,0.02-0.09,0.09-0.09c1.04,0,2.07,0,3.11,0c0.71,0,1.42,0,2.13,0c0.07,0,0.1,0.01,0.1,0.09c-0.01,0.19,0,0.37,0,0.56c0,0.03,0,0.05,0,0.08c-0.14,0.01-0.28,0-0.41,0.02c-0.2,0.03-0.4,0.06-0.59,0.11C7.6,3.65,7.42,3.89,7.38,4.22c-0.02,0.15-0.03,0.3-0.03,0.45c0,2.13,0,4.26,0,6.39c0,0.27,0.03,0.54,0.06,0.8c0.03,0.29,0.22,0.48,0.49,0.58c0.23,0.09,0.48,0.11,0.72,0.12c0.63,0.02,1.25,0.01,1.86-0.15c0.88-0.22,1.47-0.77,1.76-1.64c0.09-0.28,0.13-0.57,0.2-0.86c0.01-0.02,0.03-0.06,0.05-0.06c0.23,0,0.42,0,0.66,0C13.11,11.06,13.16,12.25,13.14,13.45z&#34;/&gt;&lt;/svg&gt;
 &lt;a href=&#34;https://lobste.rs/u/ngoldbaum&#34;&gt;ngoldbaum&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;svg aria-hidden=&#34;true&#34; class=&#34;custom ico ico-hacker-news &#34;  xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;0 0 448 512&#34;&gt;&lt;path d=&#34;M0 32v448h448V32H0zm21.2 197.2H21c.1-.1.2-.3.3-.4 0 .1 0 .3-.1.4zm218 53.9V384h-31.4V281.3L128 128h37.3c52.5 98.3 49.2 101.2 59.3 125.6 12.3-27 5.8-24.4 60.6-125.6H320l-80.8 155.1z&#34;/&gt;&lt;/svg&gt;
 &lt;a href=&#34;https://news.ycombinator.com/user?id=ngoldbaum&#34;&gt;ngoldbaum&lt;/a&gt;&lt;/p&gt;
</description>
		</item>
		<item>
			<title>The Rust Module System and Useful Crates for CLI Apps</title>
			<link>https://ngoldbaum.github.io/posts/helpful-rust-cli-crates/</link>
			<pubDate>Wed, 12 Jun 2019 10:06:24 -0400</pubDate>
			<guid isPermaLink="true">https://ngoldbaum.github.io/posts/helpful-rust-cli-crates/</guid>
			<description>&lt;p&gt;Today I&amp;rsquo;ll be continuing my
&lt;a href=&#34;https://ngoldbaum.github.io/posts/my-first-post/&#34;&gt;series&lt;/a&gt;
&lt;a href=&#34;https://ngoldbaum.github.io/posts/repo-contents/&#34;&gt;of&lt;/a&gt;
&lt;a href=&#34;https://ngoldbaum.github.io/posts/revlog/&#34;&gt;posts&lt;/a&gt; on the rust implementation of
the Mercurial version control system I&amp;rsquo;ve been working on. In this post I&amp;rsquo;ll be
focusing on what I learned this week about the rust module system as well as a
few helpful crates I discovered to aid in command-line argument parsing and
error handling.&lt;/p&gt;
&lt;h1 id=&#34;whats-in-a-name&#34;&gt;What&amp;rsquo;s in a Name?&lt;/h1&gt;
&lt;p&gt;Since my last post I&amp;rsquo;ve landed on a name for my project that&amp;rsquo;s a bit nicer than
&lt;code&gt;hg-rust&lt;/code&gt;. From now on this project will be known as &lt;code&gt;rug&lt;/code&gt;. I&amp;rsquo;ve renamed the
repository on sr.ht and the code now lives at
&lt;a href=&#34;https://hg.sr.ht/~ngoldbaum/rug&#34;&gt;https://hg.sr.ht/~ngoldbaum/rug&lt;/a&gt;. There should be redirects in place so the URLs
in my old posts will continue to work. I&amp;rsquo;d also like to come up with a
logo. Perhaps a rug with a crab on it that&amp;rsquo;s playing with a droplet of mercury?
Probably not healthy for poor &lt;a href=&#34;https://rustacean.net/&#34;&gt;Ferris&lt;/a&gt;&amp;hellip;&lt;/p&gt;
&lt;h1 id=&#34;the-rust-module-system&#34;&gt;The Rust Module System&lt;/h1&gt;
&lt;p&gt;As of my last post, &lt;a href=&#34;https://hg.sr.ht/~ngoldbaum/rug/browse/ae0220d9fb018d4890f3b7a8ab7585d49f74899c/src/main.rs&#34;&gt;all of the
code&lt;/a&gt;
lived in a single &lt;code&gt;main.rs&lt;/code&gt; file that had grown to more than 200 lines of
code. Long modules like this can make it difficult to understand exactly how
everything interrelates. &lt;a href=&#34;https://doc.rust-lang.org/book/ch07-00-managing-growing-projects-with-packages-crates-and-modules.html&#34;&gt;Following the rust
book&lt;/a&gt;
I decided to break out the code in my project into submodules organized
according to the logical structure of the existing code.&lt;/p&gt;
&lt;p&gt;First, I &lt;a href=&#34;https://hg.sr.ht/~ngoldbaum/rug/rev/0585ddebf295fc6ce623086dc4904671b579aaec&#34;&gt;moved the
code&lt;/a&gt;
that defines the various custom structs I wrote last week out of &lt;code&gt;main.rs&lt;/code&gt; and
into a new &lt;code&gt;revlogs&lt;/code&gt; module. At this point my &lt;code&gt;main.rs&lt;/code&gt; file was much, much
simpler:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::env;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::fs::File;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mod&lt;/span&gt; revlogs;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;std&lt;/span&gt;::io::Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; args: Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; env::args().collect();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; fname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;args[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; File::open(fname)&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; revlog &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; revlogs::Revlog::new(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; f)&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    println!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, revlog);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Ok(())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Before this change all of the code that defined the &lt;code&gt;Revlog&lt;/code&gt; struct lived above
the definition of the &lt;code&gt;main&lt;/code&gt; function. Now that code has been replaced with a
single line: &lt;code&gt;mod revlogs&lt;/code&gt;. This line tells the rust compiler that there is
either a file named &lt;code&gt;revlogs.rs&lt;/code&gt; or a file named &lt;code&gt;revlogs/mod.rs&lt;/code&gt;. The latter
allows splitting out a module even further into submodules. The other
modification to the &lt;code&gt;main&lt;/code&gt; function is the way I&amp;rsquo;m creating the &lt;code&gt;Revlog&lt;/code&gt;
instance. Rather than being able to use the &lt;code&gt;Revlog&lt;/code&gt; name directly, I need to
refer to it as &lt;code&gt;revlogs::Revlog&lt;/code&gt;.  I could have also said &lt;code&gt;use revlogs::Revlog&lt;/code&gt;
above main to bring the &lt;code&gt;Revlog&lt;/code&gt; struct into scope, but I prefer to avoid doing
that too much to make it clear where things are defined as I&amp;rsquo;m glancing at the
code.&lt;/p&gt;
&lt;p&gt;I also needed to make the &lt;code&gt;Revlog&lt;/code&gt; struct public, along with the &lt;code&gt;new&lt;/code&gt; method I
implemented on it to create new Revlog instances from a file stream, so the
struct definition now looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[derive(Debug)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Revlog&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    inline: &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    generaldelta: &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    entries: Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;RevlogEntry&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And the signature for the &lt;code&gt;new&lt;/code&gt; method now begins with &lt;code&gt;pub fn new&lt;/code&gt; instead of just &lt;code&gt;fn new&lt;/code&gt;. I haven&amp;rsquo;t thought in detail about what &lt;em&gt;should&lt;/em&gt; be public versus what the
compiler insists has to be public due to how I&amp;rsquo;m using these modules. I think
for a command-line application it doesn&amp;rsquo;t matter so much what my public API is
because no one will be consuming it, but for a library it&amp;rsquo;s probably
important. I will come back to these considerations later and see if I can
understand how to manage separation of concerns in rust in more detail.&lt;/p&gt;
&lt;p&gt;Next I &lt;a href=&#34;https://hg.sr.ht/~ngoldbaum/rug/rev/18cff5dfd47d45ed6167c4dd5a51f8e1b2d0e82f&#34;&gt;further split
out&lt;/a&gt;
out the code for the &lt;code&gt;Revlog&lt;/code&gt; struct into submodules for the &lt;code&gt;Entry&lt;/code&gt;, &lt;code&gt;Content&lt;/code&gt;,
and &lt;code&gt;Header&lt;/code&gt; structs and &lt;a href=&#34;https://hg.sr.ht/~ngoldbaum/rug/rev/6cbbe3b1683453eba4382b8ab04f5c043cd10e5e&#34;&gt;then
moved&lt;/a&gt;
the &lt;code&gt;content&lt;/code&gt; and &lt;code&gt;entry&lt;/code&gt; modules to be submodules of the &lt;code&gt;entry&lt;/code&gt; submodule. Now
everything is nice and modular, each module is relatively short, and the code is
structured according to the logical structure of the data structure the code
describes. Nice!&lt;/p&gt;
&lt;h2 id=&#34;error-handling-with-the-snafu-crate&#34;&gt;Error Handling with the Snafu Crate&lt;/h2&gt;
&lt;p&gt;Error handling in rust is still something that confuses me. It&amp;rsquo;s very different
from how error handling works in Python with exceptions. In rust functions that
might raise errors return an enum called &lt;code&gt;Result&lt;/code&gt; that wraps either a valid
return value or an error. One problem I have with this is that the errors in the
rust standard library do not contain context (e.g. a backtrace) unless you
explicitly add a context to the error. Any context associated with the error
needs to be present at the location the error gets created, calling sites higher
up the call stack that might have more information that would be usable to
create a more helpful error message must consume the error and transform it into
a new error with the appropriate context, all completely manually. Finally,
rust&amp;rsquo;s static type system means that errors of one type are not necessarily
convertible to errors of another type, so one must either explicitly convert
errors from one type to another or manually define the conversion methods to and
from a custom error type to other error types. This leads to a proliferation of
boilerplate code for each error type.&lt;/p&gt;
&lt;p&gt;The rust error handling story is still somewhat in flux. For example, &lt;a href=&#34;https://github.com/rust-lang/rfcs/blob/master/text/2504-fix-error.md&#34;&gt;RFC
2504&lt;/a&gt;
describes an ongoing effort to reword the &lt;code&gt;Error&lt;/code&gt; type in the standard
library. In online discussions people might suggest using the
&lt;a href=&#34;https://github.com/rust-lang-nursery/error-chain&#34;&gt;&lt;code&gt;error-chain&lt;/code&gt;&lt;/a&gt; crate, the
&lt;a href=&#34;https://github.com/rust-lang-nursery/failure&#34;&gt;&lt;code&gt;failure&lt;/code&gt;&lt;/a&gt; crate, or suggest just
using the standard library &lt;code&gt;Error&lt;/code&gt; type and having lots of boilerplate in code
to handle conversions. As of early Summer 2019, the consensus seems to have
moved to the &lt;a href=&#34;https://github.com/shepmaster/snafu&#34;&gt;&lt;code&gt;snafu&lt;/code&gt;&lt;/a&gt; crate. From my
perspective, one of the main advantages of &lt;code&gt;snafu&lt;/code&gt; over &lt;code&gt;failure&lt;/code&gt; is that
&lt;code&gt;snafu&lt;/code&gt; has much better documentation that contains clear usage examples. That&amp;rsquo;s
the main reason I chose to use it. A &lt;a href=&#34;https://old.reddit.com/r/rust/comments/bubtu8/which_error_crate_are_going_to_use_in_2019/&#34;&gt;recent reddit
thread&lt;/a&gt;
summarizes the state of things in 2019. I&amp;rsquo;m hoping that in the next year or two
this situation will grow more clear.&lt;/p&gt;
&lt;p&gt;The philosophy behind the Snafu crate is to transform instances of errors
generated by standard library code or code outside of a developers control into
application-specific errors that are variants of a generic enum that represents
generic errors an application can produce. One defines an enum, in my case I
called it &lt;code&gt;RugError&lt;/code&gt;, with variants that correspond to various kinds of errors:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; snafu::{Backtrace, Snafu}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[derive(Debug, Snafu)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RugError&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[snafu(display(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rug must be run from inside a valid directory&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;))]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    NotAValidDirectory {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        backtrace: &lt;span style=&#34;color:#a6e22e&#34;&gt;Backtrace&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        source: &lt;span style=&#34;color:#a6e22e&#34;&gt;std&lt;/span&gt;::io::Error,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[snafu(display(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rug must be run from inside a repository&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;))]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    NotARepository { backtrace: &lt;span style=&#34;color:#a6e22e&#34;&gt;Backtrace&lt;/span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[snafu(display(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The changelog file is not present in repository {}: {}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;                    path.display(), source))]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    NoChangelog {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        path: &lt;span style=&#34;color:#a6e22e&#34;&gt;PathBuf&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        source: &lt;span style=&#34;color:#a6e22e&#34;&gt;std&lt;/span&gt;::io::Error,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        backtrace: &lt;span style=&#34;color:#a6e22e&#34;&gt;Backtrace&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[snafu(display(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The revlog file {} cannot be parsed: {}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;, path.display(), source))]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    CannotParseRevlog {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        path: &lt;span style=&#34;color:#a6e22e&#34;&gt;PathBuf&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        source: &lt;span style=&#34;color:#a6e22e&#34;&gt;std&lt;/span&gt;::io::Error,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        backtrace: &lt;span style=&#34;color:#a6e22e&#34;&gt;Backtrace&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I&amp;rsquo;ve told the compiler that my &lt;code&gt;RugError&lt;/code&gt; enum derives from the &lt;code&gt;Snafu&lt;/code&gt;
attribute. Each variant in the &lt;code&gt;RugError&lt;/code&gt; enum is given a &lt;code&gt;snafu&lt;/code&gt; attribute, which allows
me to customize the error message based on context-specific data. Together these
attributes generate all of the error-conversion boilerplate that I would
otherwise need to write myself to allow instances of my error type to be created
from standard library errors.&lt;/p&gt;
&lt;p&gt;Each error type can optionally define a &lt;code&gt;source&lt;/code&gt; and &lt;code&gt;backtrace&lt;/code&gt; field. If
&lt;code&gt;source&lt;/code&gt; is defined, it maps to an error type. That means that the corresponding
variant must be created only from errors of the corresponding type. If one tries
to create an error from an incompatible error type that will lead to a type
mismatch and failed compilation. If &lt;code&gt;source&lt;/code&gt; is not provided, that means one is
creating an error from the &lt;code&gt;None&lt;/code&gt; variant of some &lt;code&gt;Option&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If the &lt;code&gt;backtrace&lt;/code&gt; field is defined, the error type generated by snafu will
contain a backtrace and when the error is printed out in a &lt;code&gt;Debug&lt;/code&gt; or
&lt;code&gt;Display&lt;/code&gt; representation, the backtrace will also be printed. This is extremely
helpful if it isn&amp;rsquo;t clear where exactly an error of some type might be generated
in the code or if it isn&amp;rsquo;t clear how a piece of code is ultimately getting
called by the application. Finally there can also be optional fields that
contain metadata one can use to construct a nice error message. For example the
&lt;code&gt;CannotParseRevlog&lt;/code&gt; variant in my &lt;code&gt;RugError&lt;/code&gt; enum contains a &lt;code&gt;path&lt;/code&gt; field that
represents the path to the changelog file that cannot be parsed. The error
message generated by &lt;code&gt;CannotParseRevlog&lt;/code&gt; uses both the &lt;code&gt;path&lt;/code&gt; and the &lt;code&gt;source&lt;/code&gt;
field to generate the error message.&lt;/p&gt;
&lt;p&gt;To make use of these errors, the &lt;code&gt;snafu&lt;/code&gt; crate provides the &lt;code&gt;ResultExt&lt;/code&gt; and
&lt;code&gt;OptionExt&lt;/code&gt; trait to extend the standard library &lt;code&gt;Result&lt;/code&gt; and &lt;code&gt;Option&lt;/code&gt; enums
with new methods that can transform errors at call sites. I made use of the
&lt;code&gt;context&lt;/code&gt; method in a few places. For example, here is the function that
determines whether the current working directory is a mercurial repository:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; snafu::{OptionExt, ResultExt}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hg_dir&lt;/span&gt;(current_dir: &lt;span style=&#34;color:#a6e22e&#34;&gt;PathBuf&lt;/span&gt;) -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PathBuf, RugError&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;loop&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; anc.next() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Some(d) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; d,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            None &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt; None,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; possible_hg_dir &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p.join(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.hg&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; possible_hg_dir.is_dir() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt; Some(possible_hg_dir);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .context(NotARepository)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This function takes no arguments and returns a &lt;code&gt;Result&lt;/code&gt; that can represent
either one of the custom errors I defined - a variant of the &lt;code&gt;RugError&lt;/code&gt; enum, or
the path of the &lt;code&gt;.hg&lt;/code&gt; directory in the root of the repository, represented by a
rust &lt;code&gt;PathBuf&lt;/code&gt; object. The &lt;code&gt;loop&lt;/code&gt; block returns an anonymous &lt;code&gt;Option&lt;/code&gt; (e.g. it&amp;rsquo;s
not bound to a variable name), that I call &lt;code&gt;context&lt;/code&gt; on. I pass &lt;code&gt;context&lt;/code&gt; the
&lt;code&gt;NotARepository&lt;/code&gt; variant. The &lt;code&gt;context&lt;/code&gt; function converts the &lt;code&gt;None&lt;/code&gt; variant of
the &lt;code&gt;Option&lt;/code&gt; into the &lt;code&gt;NotARepository&lt;/code&gt; error. If the error ever bubbled back to
&lt;code&gt;main&lt;/code&gt; it would get printed along with a backtrace because &lt;code&gt;NotARepository&lt;/code&gt; has
a &lt;code&gt;backtrace&lt;/code&gt; field. All of this happens automatically - this is the magic of
the &lt;code&gt;snafu&lt;/code&gt; crate!&lt;/p&gt;
&lt;p&gt;Side note - this uses a newish feature of rust - the &lt;code&gt;break&lt;/code&gt; statement can
return values from inside a &lt;code&gt;loop&lt;/code&gt; block. This feature was very handy here.
Without it I would have needed to create a function that did the loop and
explicitly returned an &lt;code&gt;Option&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I can also call &lt;code&gt;context&lt;/code&gt; on a &lt;code&gt;Result&lt;/code&gt;. For example, here&amp;rsquo;s the line where I
try to open the changelog file. If it isn&amp;rsquo;t present, I create a custom error
that includes the path to the file that is supposed to exist:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; File::open(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;fname).context(NoChangelog { path: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fname&lt;/span&gt; })&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;One downside of the &lt;code&gt;snafu&lt;/code&gt; approach to error handling is that I need to be
careful to ensure standard library errors get converted into &lt;code&gt;RugError&lt;/code&gt;
variants. In practice this means replacing usages of &lt;code&gt;?&lt;/code&gt; with
&lt;code&gt;context(SomeError)?&lt;/code&gt;, This can definitely be more verbose, however it also
forces me to think about the meaning of my code and what exactly each error
state really means. I&amp;rsquo;m hopeful that this will make debugging easier and lead to
fewer cases where I&amp;rsquo;m looking at opaque, poorly-described errors.&lt;/p&gt;
&lt;h2 id=&#34;command-line-argument-parsing-with-clap-and-structopt&#34;&gt;Command Line Argument Parsing with &lt;code&gt;clap&lt;/code&gt; and &lt;code&gt;structopt&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Of course it&amp;rsquo;s possible to parse command line arguments fully manually by
consuming the iterator over arguments returned by the &lt;code&gt;std::env::args&lt;/code&gt; function,
as described in &lt;a href=&#34;https://doc.rust-lang.org/book/ch12-01-accepting-command-line-arguments.html&#34;&gt;the
book&lt;/a&gt;. This
works but requires a lot of wheel-reinventing to get common behaviors like
subcommands, positional arguments, optional arguments, and help output to work
properly. It makes sense to delegate that work to an external library.&lt;/p&gt;
&lt;p&gt;My first attempt at this used the &lt;code&gt;clap&lt;/code&gt; library. In my usage of &lt;code&gt;clap&lt;/code&gt; I
generated the command line arguments for the &lt;code&gt;rug log&lt;/code&gt; subcommand like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; clap::{App, AppSettings, SubCommand};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;(), RugError&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; matches &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; App::new(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rug&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .version(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.1&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .author(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Nathan Goldbaum&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .about(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A rust implementation of some hg functionality&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .setting(AppSettings::ArgRequiredElseHelp)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .subcommand(SubCommand::with_name(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .get_matches();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; matches.subcommand_name() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Some(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            hg_log()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _ &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; panic!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;should be unreachable!&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Ok(())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The name of the &lt;code&gt;App&lt;/code&gt; corresponds to the name of the CLI binary. The &lt;code&gt;version&lt;/code&gt;,
&lt;code&gt;author&lt;/code&gt;, and &lt;code&gt;about&lt;/code&gt; fields populate information in the help text for the
binary reported by &lt;code&gt;rug --help&lt;/code&gt;. The &lt;code&gt;setting&lt;/code&gt; usage tells &lt;code&gt;clap&lt;/code&gt; to print the
help text if someone calls &lt;code&gt;rug&lt;/code&gt; with no arguments. Finally the &lt;code&gt;subcommand&lt;/code&gt;
creates a &lt;code&gt;log&lt;/code&gt; subcommand that for now takes no arguments.&lt;/p&gt;
&lt;p&gt;Finally to initiate the control flow for the program, I match over the name of
the subcommand that a user supplied and then do the work of running &lt;code&gt;rug log&lt;/code&gt; if
someone passes in &lt;code&gt;log&lt;/code&gt;. Note that the default branch is marked as unreachable,
that&amp;rsquo;s because any other subcommand name will be caught and result in an error
message reported to the user at the command line. Here&amp;rsquo;s a small command-line
session to see all of that in action:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ rug
rug 0.1
Nathan Goldbaum
A rust implementation of some hg functionality

USAGE:
    rug &amp;lt;SUBCOMMAND&amp;gt;

FLAGS:
    -h, --help       Prints help information
    -V, --version    Prints version information

SUBCOMMANDS:
    help    Prints this message or the help of the given subcommand(s)
    log

$ rug notacommand
error: Found argument &amp;#39;notacommand&amp;#39; which wasn&amp;#39;t expected, or isn&amp;#39;t valid in this context

USAGE:
    rug &amp;lt;SUBCOMMAND&amp;gt;

For more information try --help
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I also get colored output in the error case to visually highlight the important
parts of the error message to the user - the colored output doesn&amp;rsquo;t show up in
this post so don&amp;rsquo;t worry that you can&amp;rsquo;t see it here. I get all of this fancy
functionality more or less &amp;ldquo;for free&amp;rdquo; just by setting up &lt;code&gt;clap&lt;/code&gt;. I like it!&lt;/p&gt;
&lt;p&gt;One thing I don&amp;rsquo;t like is that I&amp;rsquo;m matching over strings. In general &lt;code&gt;clap&lt;/code&gt; will
return strings to me that represent the values of command line
options. That will work but will be brittle. I also won&amp;rsquo;t be able to use the
ability of rust to check that I&amp;rsquo;m using all of the variants of an enum in a
match statement at compile time - so I might forget to implement a feature and
the compiler won&amp;rsquo;t alert me about it.&lt;/p&gt;
&lt;p&gt;This problem is solved by &lt;code&gt;structopt&lt;/code&gt;, another crate that wraps &lt;code&gt;clap&lt;/code&gt; and
allows one to define the command-line arguments and subcommands in terms of and
enums or structs. Here is the equivalent &lt;code&gt;structopt&lt;/code&gt; code to my usage of &lt;code&gt;clap&lt;/code&gt;
above:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[derive(StructOpt)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[structopt(
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    name = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rug&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    about = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A rust implementation of some hg functionality&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    author = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Nathan Goldbaum&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    version = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    raw(setting = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;structopt::clap::AppSettings::ArgRequiredElseHelp&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Rug&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[structopt(name = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Log {},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; Rug::from_args() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Rug::Log {} &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; hg_log() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Ok(_) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Err(e) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; println!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, e),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We define an &lt;code&gt;enum&lt;/code&gt; whose variants represent all of the different
subcommands. Each subcommand can then in turn define arguments that it
accepts. In &lt;code&gt;main&lt;/code&gt; I instantiate an instance of the enum from the command-line
arguments and match over the result. Since the result will be variants of the
enum, I know that I&amp;rsquo;ve handled all possible subcommands, otherwise I would
generate a compiler error.&lt;/p&gt;
&lt;p&gt;At this point I&amp;rsquo;m pretty happy with the state of things. The only thing that
bothers me about structopt (and generically with code that uses rust&amp;rsquo;s
&lt;a href=&#34;https://doc.rust-lang.org/reference/attributes.html&#34;&gt;attribute&lt;/a&gt; system) is that
I&amp;rsquo;m programming inside of the attribute block, which feels a bit like writing
code inside of a string: outside of normal control flow. My editor doesn&amp;rsquo;t
highlight this code like normal code. The whole thing feels very magical. That
said, I&amp;rsquo;m OK with the magic if it allows me to avoid a ton of boilerplate and
make my code more maintainable.&lt;/p&gt;
</description>
		</item>
		<item>
			<title>Project Euler</title>
			<link>https://ngoldbaum.github.io/posts/project-euler/</link>
			<pubDate>Thu, 06 Jun 2019 10:23:45 -0400</pubDate>
			<guid isPermaLink="true">https://ngoldbaum.github.io/posts/project-euler/</guid>
			<description>&lt;h1 id=&#34;the-first-20-project-euler-problems&#34;&gt;The first 20 Project Euler problems&lt;/h1&gt;
&lt;p&gt;During my first week here at RC I decided to attend a session led by another
recurser on &lt;a href=&#34;https://projecteuler.net/&#34;&gt;Project Euler&lt;/a&gt;, an online coding
challenge based on a series of discrete math problems. The problems are written
to lend themselves to a computational solution. There are hundreds of problems
and the problems get increasingly hard past the first 100. While the early
problems are definitely easier than the later ones, they still take some doing
to finish and are a great way to quickly work on a bunch of problems to learn a
new programming language.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m getting more and more used to thinking about Rust code in an idiomatic way,
but I don&amp;rsquo;t think I&amp;rsquo;m comfortable enough to call myself a
&lt;a href=&#34;https://rustacean.net/&#34;&gt;rustacean&lt;/a&gt; yet. To further my goal of oxidizing my
brain with rust knowledge, I decided to start working through project euler
problems sequentially. I&amp;rsquo;ve recently finished the first 20 problems and I though
I&amp;rsquo;d share the highlights of what I learned about rust along the way.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;d like to peruse my solutions, they&amp;rsquo;re all &lt;a href=&#34;https://github.com/ngoldbaum/project_euler&#34;&gt;on
GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;functional-processing-pipelines&#34;&gt;Functional processing pipelines&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m used to Python, where computation tends to happen in an imperative
way. Although Python does have &lt;a href=&#34;https://docs.python.org/3.7/howto/functional.html&#34;&gt;functional programming
features&lt;/a&gt;, real-world code
I&amp;rsquo;ve seen tends to avoid it or use them sparingly instead of composing an entire
computation or block of code as a functional data processing pipeline. Guido van
Rossum is also &lt;a href=&#34;https://developers.slashdot.org/story/13/08/25/2115204/interviews-guido-van-rossum-answers-your-questions&#34;&gt;of the
opinion&lt;/a&gt;
that some of these features should be removed from the language and &lt;a href=&#34;https://www.artima.com/weblogs/viewpost.jsp?thread=98196&#34;&gt;tried to
remove&lt;/a&gt; &lt;code&gt;lambda&lt;/code&gt;,
&lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, from Python 3 and succeeded in removing &lt;code&gt;reduce&lt;/code&gt; as a builtin
and moving it to &lt;code&gt;functools&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In Rust it&amp;rsquo;s much more natural to process a collection of things by creating an
iterator over the collection and then applying transformations to the elements
of the iterator as needed and, if necessary, doing a reduction step to
process the transformed elements of the collection. One advantage of this
approach is that if we&amp;rsquo;re handed an abstract iterator that lazily generates
data, this approach will avoid needing to hold all the elements of the iterator
in memory.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://projecteuler.net/problem=6&#34;&gt;Problem 6&lt;/a&gt; asks us to compute the
difference between the sum of the squares and the square of the sum of the
natural numbers up to 100. This lends itself to a nice straightforward
functional solution:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; maxnum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; sumsquares: &lt;span style=&#34;color:#66d9ef&#34;&gt;u64&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;maxnum&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;).map(&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;x).sum();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; sum: &lt;span style=&#34;color:#66d9ef&#34;&gt;u64&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;maxnum&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;).sum();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; squaresum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sum&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;sum;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    println!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, squaresum &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; sumsquares);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To me the rust &lt;code&gt;map&lt;/code&gt; syntax looked a little strange at first but I&amp;rsquo;m starting to
get used to it. The &lt;code&gt;|foo|&lt;/code&gt; syntax defines a &lt;em&gt;closure&lt;/em&gt;. &lt;a href=&#34;https://doc.rust-lang.org/rust-by-example/fn/closures.html&#34;&gt;Closures in
rust&lt;/a&gt; are a bit like
python&amp;rsquo;s &lt;code&gt;lambda&lt;/code&gt; statement, it lets us name a temporary variable that is valid
inside the scope of the &lt;code&gt;map&lt;/code&gt; function call. In this case it represents a single
value in the range iterator defined by &lt;code&gt;1..maxnum+1&lt;/code&gt;. After mapping the numbers
to their square, we then sum the values. Since range iterators lazily generate
data, our solution never needs to hold all of the values of the iterator in
memory - cool!&lt;/p&gt;
&lt;h2 id=&#34;generating-prime-numbers&#34;&gt;Generating prime numbers&lt;/h2&gt;
&lt;p&gt;Several of the Project Euler problems require generating large numbers of prime
numbers quickly. The brute force approach to this is called &lt;a href=&#34;https://en.wikipedia.org/wiki/Trial_division&#34;&gt;trial
division&lt;/a&gt;. For a natural number
&lt;code&gt;$n$&lt;/code&gt;, we check whether all natural numbers &lt;code&gt;$1 &amp;lt; m &amp;lt; n$&lt;/code&gt; have the property &lt;code&gt;$n \mod m \ne 0$&lt;/code&gt;. There are some straightforward performance optizations one can
apply to speed this up. If &lt;code&gt;$n$&lt;/code&gt; is divisible by 2 then it can&amp;rsquo;t be prime, so we
reject it. If it&amp;rsquo;s not divisible by 2 then it can&amp;rsquo;t be divisible by any larger
even number either, so we can skip all even numbers - a 2x performance
boost. We can get an even bigger performance improvement for large &lt;code&gt;$n$&lt;/code&gt; by
realizing that one need not check any integer bigger than &lt;code&gt;$\sqrt{n}$&lt;/code&gt;, since if
&lt;code&gt;$n$&lt;/code&gt; is divisible by a number bigger than &lt;code&gt;$\sqrt{n}$&lt;/code&gt; it must also be
divisible by a number smaller than &lt;code&gt;$\sqrt{n}$&lt;/code&gt;, which we would have already
checked. We need to go all the way up to &lt;code&gt;$\sqrt{n}$&lt;/code&gt; in case &lt;code&gt;$n$&lt;/code&gt; is a perfect
square.&lt;/p&gt;
&lt;p&gt;Another approach is to use the &lt;a href=&#34;https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes&#34;&gt;Sieve of
Eratosthenes&lt;/a&gt;, an ancient
algorithm for generating all primes up to a limit. Start with a list of all the
natural numbers from two to $n$ and then for each number, find all the multiples
of $n$ in the list and mark them as not prime. Once all the numbers in the list
up to &lt;code&gt;$n/2$&lt;/code&gt; have been tested, all the numbers that have not been discarded
must be prime. For Problem #7 I ended up coding this up like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;MAX&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1_000_000&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sieve&lt;/span&gt;(n: &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; data: Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;MAX&lt;/span&gt;).collect();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; isprime: Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vec![&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;; data.len()];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    isprime[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i, d) &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; data.iter().enumerate() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;d;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;isprime[i] &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; offset &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; ((i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;offset)&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;isprime.len()).step_by(offset) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            isprime[j &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; primes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; isprime.iter().enumerate().fold(vec![], &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; acc, (index, value)&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;value {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            acc.push(index)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        acc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    primes[n]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This approach uses a &lt;code&gt;Vec&amp;lt;usize&amp;gt;&lt;/code&gt; called &lt;code&gt;data&lt;/code&gt; to contain the prime numbers and
a &lt;code&gt;Vec&amp;lt;bool&amp;gt;&lt;/code&gt; to contain the list of numbers that are prime in &lt;code&gt;data&lt;/code&gt;. We make
use of &lt;code&gt;enumerate&lt;/code&gt; in two places to generate an indexed iterator over a list of
numbers, a pattern I like to use from Python where one array indexes another
array. It&amp;rsquo;s nice how the approaches I like to use in Python tend to be adaptable
in Rust despite the languages being very different.&lt;/p&gt;
&lt;p&gt;It turns out that Problem 10 also needs a large number of prime numbers, so we
can reuse this function with a small adaptation there.&lt;/p&gt;
&lt;h2 id=&#34;the-num-crate-and-the-bigint-type&#34;&gt;The &lt;code&gt;num&lt;/code&gt; crate and the &lt;code&gt;BigInt&lt;/code&gt; type&lt;/h2&gt;
&lt;p&gt;Many of the problems in Project Euler generate integers that cannot be
represented using the integer data types built into rust. In Python, integers
transparently get promoted from machine integers to arbitrary-precision integers
(see &lt;a href=&#34;https://www.python.org/dev/peps/pep-0237/&#34;&gt;PEP 237&lt;/a&gt; for more details about
python integers) transparently, so we don&amp;rsquo;t need to worry about the
distinction. Rust is a lower-level language and wants you to carefully consider
the memory cost of an operation, so it won&amp;rsquo;t automatically convert integers when
they overflow. However, in debug mode, &lt;a href=&#34;https://github.com/nox/rust-rfcs/blob/master/text/0560-integer-overflow.md&#34;&gt;integer overflow does trigger a
panic&lt;/a&gt;!
I find this delightful compared with my experiences in other low-level languages
like C or C++:&lt;/p&gt;
&lt;p&gt;In this way we know immediately when the builtin integer types are no longer
sufficient and we need to switch to an arbitrary-precision integer arithmetic
library.&lt;/p&gt;
&lt;p&gt;Currently, the most popular library for this sort of thing on
&lt;a href=&#34;https://crates.io&#34;&gt;crates.io&lt;/a&gt; is the &lt;a href=&#34;https://crates.io/crates/num&#34;&gt;&lt;code&gt;num&lt;/code&gt;&lt;/a&gt;
crate, in particular the &lt;code&gt;num::bigint::BigInt&lt;/code&gt; type. Rather than coercing
integers automatically to be instances of &lt;code&gt;BigInt&lt;/code&gt; by overriding the arithmetic
operators as a Python library probably would do, the approach here is to force
users to specify which numbers exactly are &lt;code&gt;BigInt&lt;/code&gt; instances by explicitly
converting.&lt;/p&gt;
&lt;p&gt;I used &lt;code&gt;num&lt;/code&gt; for 5 of the first 20 problems, in problems 8, 13, 15, 16,
and 20. The usage from Problem 20, which asks to compute the sum of the digits
of &lt;code&gt;$100!$&lt;/code&gt;, is probably the most readable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; num::bigint::{BigInt, ToBigInt};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; num::traits::{One, Zero};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100.&lt;/span&gt;to_bigint().unwrap();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; ret: &lt;span style=&#34;color:#a6e22e&#34;&gt;BigInt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; One::one();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; zero: &lt;span style=&#34;color:#a6e22e&#34;&gt;BigInt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Zero::zero();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; zero {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ret &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;num;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        num &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; digits &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; format!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, ret)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .chars()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .map(&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; c.to_digit(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;).expect(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;not a digit!&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .collect::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;u32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    println!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, digits.iter().sum::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;u32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;First, we convert 100 to a &lt;code&gt;BigInt&lt;/code&gt; using the &lt;code&gt;to_bigint&lt;/code&gt; method that the
&lt;code&gt;ToBigInt&lt;/code&gt; trait defines on rust&amp;rsquo;s buitin integer types. Adding new features to
standard library types like this would be very strange in Python, but in rust
it&amp;rsquo;s very natural. Since we explicitly bring the &lt;code&gt;ToBigInt&lt;/code&gt; trait into scope
it&amp;rsquo;s still explicit, however care must be taken to understand the side effects
of bringing traits into scope.&lt;/p&gt;
&lt;p&gt;Next we define bigints to represent one and zero. The &lt;code&gt;num&lt;/code&gt; package helpfully
provides traits to generate &lt;code&gt;BigInt&lt;/code&gt; instances directly. From there the math
looks more or less identical to how we&amp;rsquo;d write it for a builtin type, however
with a &lt;code&gt;BigInt&lt;/code&gt; this will not overflow. One difference is that the
multiplication step needs to borrow the data in the &lt;code&gt;BigInt&lt;/code&gt; with the &lt;code&gt;&amp;amp;&lt;/code&gt;
operator:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; zero {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ret &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;num;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    num &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This borrow isn&amp;rsquo;t necessary for machine integers because they implement the Copy
trait and can be cheaply copied. A &lt;code&gt;BigInt&lt;/code&gt; is a wrapper for the byte buffer
that could be arbitrarily long and stores that data on the heap, so we need to
explicitly borrow or copy whenever we use the value.&lt;/p&gt;
&lt;p&gt;Finally we format the bigint as a string to get a base 10 representation,
convert the digits of the string to integers, and sum the digits.&lt;/p&gt;
&lt;h2 id=&#34;problem-11-largest-product-of-four-numbers-in-a-grid&#34;&gt;Problem 11: Largest product of four numbers in a grid&lt;/h2&gt;
&lt;p&gt;In &lt;a href=&#34;https://projecteuler.net/problem=11&#34;&gt;this problem&lt;/a&gt; we are given a 20x20 grid
of natural numbers and asked to find the sequence of 4 neighboring numbers (in
any direction, including along diagonals) that has the largest product.&lt;/p&gt;
&lt;p&gt;This problem lends itself to using a 2D array data structure to store the grid
of numbers. Because I like &lt;code&gt;NumPy&lt;/code&gt;, I decided to use the
&lt;a href=&#34;https://crates.io/crates/ndarray&#34;&gt;ndarray&lt;/a&gt; crate, which provides a ND array
data structure that acts a lot like a NumPy array.&lt;/p&gt;
&lt;p&gt;To generate the array, I first read the data into a Vec containing Vecs of &lt;code&gt;u64&lt;/code&gt;
entries:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; rows &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; contents.split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;).collect::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; rows &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rows
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .iter()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .map(&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        r.split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .filter_map(&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;d&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; d.parse::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;u64&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;().ok())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .collect::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;u64&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.collect::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;u64&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A tricky bit here is my usage of
&lt;a href=&#34;https://doc.rust-lang.org/std/result/enum.Result.html#method.ok&#34;&gt;&lt;code&gt;ok()&lt;/code&gt;&lt;/a&gt; to
convert a &lt;code&gt;Result&lt;/code&gt; into an &lt;code&gt;Option&lt;/code&gt;, which allows me to use &lt;code&gt;filter_map&lt;/code&gt; and
avoid using &lt;code&gt;unwrap&lt;/code&gt;. Since I know &lt;em&gt;a priori&lt;/em&gt; that the input table doesn&amp;rsquo;t have
blanks this is mostly a semantic dance and I could probably get away with using
&lt;code&gt;unwrap&lt;/code&gt;, but it&amp;rsquo;s nice to know of ways to generate code that provably cannot
panic and crash.&lt;/p&gt;
&lt;p&gt;Next I generate 2D 20x20 array and read the data into it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; nrows &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rows.len();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ncols &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rows[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].len();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; array &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ndarray::Array::zeros((nrows, ncols));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;nrows {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;ncols {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        array[(i, j)] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rows[i][j];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now to actually check sequences, I defined a wrapper type for a 4-tuple and gave
it a &lt;code&gt;prod&lt;/code&gt; method to calculate the product of the numbers in the sequence:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Sequence&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;u64&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;u64&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;u64&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;u64&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;impl&lt;/span&gt; Sequence {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prod&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;self) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;u64&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        (self.&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;).&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (self.&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;).&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (self.&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;).&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (self.&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;).&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And I wrote a &lt;code&gt;check&lt;/code&gt; function that checks to make sure if the product of the
sequence is greater than a number:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check&lt;/span&gt;(s: Option&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Sequence&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, largeprod: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mut&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;u64&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; s {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Some(x) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; product &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x.prod();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; product &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;largeprod {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;largeprod &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; product
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        None &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note how this function accepts an &lt;code&gt;Option&amp;lt;Sequence&amp;gt;&lt;/code&gt;. This lets us transparently
handle cases where there isn&amp;rsquo;t a valid sequence and ignore them without
carefully designing our code to avoid testing places near the edge of the array
where we cannot generate a sequence 4 numbers long.&lt;/p&gt;
&lt;p&gt;Finally we need code that generates sequences that go to the right, up, rising
diagonally, or falling diagonally from a starting location defined by the tuple
of indices &lt;code&gt;(i, j)&lt;/code&gt;. Here&amp;rsquo;s the code to generate horizontal sequences, the other
types are analogous:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;horizontal_sequence&lt;/span&gt;(i: &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;, j: &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;, m: &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;, arr: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Array&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;u64&lt;/span&gt;, Ix2&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) -&amp;gt; Option&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Sequence&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; (i, j) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        (i, j) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; None,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _ &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; Some(Sequence((
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            arr[(i, j)],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            arr[(i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, j)],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            arr[(i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, j)],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            arr[(i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, j)],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ))),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If the sequence goes off the edge of the array, we return &lt;code&gt;None&lt;/code&gt;, otherwise we
return a &lt;code&gt;Sequence&lt;/code&gt; to test.&lt;/p&gt;
&lt;p&gt;Finally, we check all the possible sequences:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; largeprod &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;nrows {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;ncols {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// horizontal sequences
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        check(horizontal_sequence(i, j, nrows, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;array), &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; largeprod);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        check(vertical_sequence(i, j, nrows, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;array), &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; largeprod);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        check(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            rising_diagonal_sequence(i, j, nrows, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;array),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; largeprod,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        check(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            falling_diagonal_sequence(i, j, nrows, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;array),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; largeprod,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;println!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, largeprod);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The slightly unsightly formatting here is generated for me automatically by
&lt;code&gt;rustfmt&lt;/code&gt;. Sometimes I disagree with it but it&amp;rsquo;s better in my opinion not to
fight and just live with the standard automatic code formatting for the sake of
sanity.&lt;/p&gt;
&lt;p&gt;This is an example of &lt;a href=&#34;https://ngoldbaum.github.io/posts/dynamic-programming/&#34;&gt;dynamic
programming&lt;/a&gt;, where we
come up with a clever way of exhaustively but efficiently testing all possible
cases without repeating work.&lt;/p&gt;
&lt;h2 id=&#34;problem-17-converting-numbers-to-english&#34;&gt;Problem 17: Converting Numbers to English&lt;/h2&gt;
&lt;p&gt;In &lt;a href=&#34;https://projecteuler.net/problem=17&#34;&gt;this problem&lt;/a&gt; we&amp;rsquo;re asked to generate
English versions of all of the natural numbers up to 1000 and then count how
many non-hyphen and non-whitespace characters are in all of the numbers.&lt;/p&gt;
&lt;p&gt;I found it most natural in rust to use a &lt;code&gt;match&lt;/code&gt; statement:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;englishify&lt;/span&gt;(i: &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;) -&amp;gt; String {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; i {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt;.to_owned(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;two&amp;#34;&lt;/span&gt;.to_owned(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;three&amp;#34;&lt;/span&gt;.to_owned(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;four&amp;#34;&lt;/span&gt;.to_owned(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;five&amp;#34;&lt;/span&gt;.to_owned(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;six&amp;#34;&lt;/span&gt;.to_owned(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;seven&amp;#34;&lt;/span&gt;.to_owned(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eight&amp;#34;&lt;/span&gt;.to_owned(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nine&amp;#34;&lt;/span&gt;.to_owned(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ten&amp;#34;&lt;/span&gt;.to_owned(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eleven&amp;#34;&lt;/span&gt;.to_owned(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;twelve&amp;#34;&lt;/span&gt;.to_owned(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;thirteen&amp;#34;&lt;/span&gt;.to_owned(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fourteen&amp;#34;&lt;/span&gt;.to_owned(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fifteen&amp;#34;&lt;/span&gt;.to_owned(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sixteen&amp;#34;&lt;/span&gt;.to_owned(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;seventeen&amp;#34;&lt;/span&gt;.to_owned(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eighteen&amp;#34;&lt;/span&gt;.to_owned(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nineteen&amp;#34;&lt;/span&gt;.to_owned(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;twenty&amp;#34;&lt;/span&gt;.to_owned(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;thirty&amp;#34;&lt;/span&gt;.to_owned(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;forty&amp;#34;&lt;/span&gt;.to_owned(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fifty&amp;#34;&lt;/span&gt;.to_owned(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sixty&amp;#34;&lt;/span&gt;.to_owned(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;seventy&amp;#34;&lt;/span&gt;.to_owned(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eighty&amp;#34;&lt;/span&gt;.to_owned(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ninety&amp;#34;&lt;/span&gt;.to_owned(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;one thousand&amp;#34;&lt;/span&gt;.to_owned(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _ &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; hundreds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; tens &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; hundreds &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ones &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; hundreds &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; tens &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; ret: String &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; String::new();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; hundreds &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                ret &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;(englishify(hundreds) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; hundred&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; tens &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; remainder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; hundreds &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; remainder &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    ret &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; and &amp;#34;&lt;/span&gt;.to_owned() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;englishify(i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; hundreds &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; hundreds &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    ret &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; and &amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                ret &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;englishify(tens &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ones &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    ret &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;.to_owned() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;englishify(ones))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ret
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ret
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For all of the numbers whose English spellings cannot be generated
algorithmically, we have special cases in the match statement. For all other
cases, we generate the phrase algorithmically by considering the hundreds, tens,
and ones digits of the number and calling &lt;code&gt;englishify&lt;/code&gt; recursively.&lt;/p&gt;
&lt;p&gt;The usage of &lt;code&gt;to_owned()&lt;/code&gt; in many of the match cases is a little ugly, but this
way it&amp;rsquo;s clear that the return value of &lt;code&gt;englishify&lt;/code&gt; owns the data for the
string. I think it might also be possible to store references to &lt;code&gt;&#39;static &amp;amp;[str]&lt;/code&gt; instances and then build the result by dereferencing the references, but
that seemed more complicated than this approach, even if there&amp;rsquo;s more copying
happening.&lt;/p&gt;
&lt;p&gt;With this function, calculating the result is a straightforward functional
processing pipeline on the range of numbers between one and 1000:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; numbers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1001&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .map(&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; englishify(n).replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;).replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .collect::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dbg!(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;numbers);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; nchars &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; numbers.iter().fold(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;acc, x&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; acc &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; x.len());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    println!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, nchars);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we made use of the &lt;code&gt;fold&lt;/code&gt; function, which allows us to define custom
accumulation logic, although we could have done the same thing with a &lt;code&gt;map(|x| x.len()).sum()&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;more-project-euler&#34;&gt;More Project Euler?&lt;/h2&gt;
&lt;p&gt;From here on I think I&amp;rsquo;m going to be a bit more sparing in my problem selection
and not try to exhaustively do them all. Hopefully I&amp;rsquo;ll have some more blog
posts about Project Euler problems as I run into particularly interesting ones
or ones that teach me something new about rust.&lt;/p&gt;
</description>
		</item>
		<item>
			<title>Dynamic Programming</title>
			<link>https://ngoldbaum.github.io/posts/dynamic-programming/</link>
			<pubDate>Fri, 24 May 2019 15:24:59 -0400</pubDate>
			<guid isPermaLink="true">https://ngoldbaum.github.io/posts/dynamic-programming/</guid>
			<description>&lt;p&gt;Today I&amp;rsquo;m going to be pausing the Mercurial content in favor of material I
learned today in the algoganza study group here at the Recurse Center. This
study group is working together to learn content that commonly comes up in job
interviews and to prepare for the dreaded whiteboard technical
interview. Today&amp;rsquo;s session focused on a new concept for me, dynamic programming,
an approach one can use to solve problems that are conceptually amenable to a
recursive approach, but where the naive recursive approach might be very slow.&lt;/p&gt;
&lt;h2 id=&#34;a-problem-amenable-to-recursion&#34;&gt;A Problem Amenable to Recursion&lt;/h2&gt;
&lt;p&gt;To explore these ideas let&amp;rsquo;s think about the Fibonacci sequence. We can
calculate Fibonacci number &lt;code&gt;$n$&lt;/code&gt; with the formula &lt;code&gt;$F_n = F_{n-1} + F_{n-2}$&lt;/code&gt;. For &lt;code&gt;$n=0$&lt;/code&gt; and &lt;code&gt;$n=1$&lt;/code&gt; we impose &lt;code&gt;$F_0 = 0$&lt;/code&gt; and &lt;code&gt;$F_1 = 1$&lt;/code&gt;. The
first few numbers in this sequence are &lt;code&gt;$0, 1, 1, 2, 3, 5, 8, 13, \ldots$&lt;/code&gt;. This
formula is amenable to a recursive implementation because we can calculate new
numbers in the sequence using only information we collected about previous
numbers in the sequence.&lt;/p&gt;
&lt;p&gt;We can write a recursive implementation of the &lt;code&gt;$F_n$&lt;/code&gt; function in Python like
this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt;(n):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; fib(n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; fib(n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This works but is &lt;em&gt;extremely&lt;/em&gt; slow:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;In [2]: %time fib(5)
CPU times: user 20 µs, sys: 1 µs, total: 21 µs
Wall time: 29.1 µs
Out[2]: 5

In [3]: %time fib(10)
CPU times: user 153 µs, sys: 8 µs, total: 161 µs
Wall time: 98.9 µs
Out[3]: 55

In [4]: %time fib(15)
CPU times: user 0 ns, sys: 2.02 ms, total: 2.02 ms
Wall time: 1.33 ms
Out[4]: 610

In [5]: %time fib(20)
CPU times: user 2.81 ms, sys: 179 µs, total: 2.99 ms
Wall time: 2.48 ms
Out[5]: 6765

In [6]: %time fib(25)
CPU times: user 51.1 ms, sys: 0 ns, total: 51.1 ms
Wall time: 49.6 ms
Out[6]: 75025

In [7]: %time fib(30)
CPU times: user 204 ms, sys: 0 ns, total: 204 ms
Wall time: 202 ms
Out[7]: 832040

In [8]: %time fib(35)
CPU times: user 2.03 s, sys: 691 µs, total: 2.03 s
Wall time: 2.03 s
Out[8]: 9227465

In [9]: %time fib(40)
CPU times: user 22.9 s, sys: 3.65 ms, total: 22.9 s
Wall time: 22.9 s
Out[9]: 102334155
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The problem is that we are calling the &lt;code&gt;fib&lt;/code&gt; function far more times than we
actually need to. Rather than calculating, say, &lt;code&gt;fib(15)&lt;/code&gt; only once, we instead
calculate it over and over again for all numbers greater than 15.&lt;/p&gt;
&lt;h2 id=&#34;memoization&#34;&gt;Memoization&lt;/h2&gt;
&lt;p&gt;One way to improve this approach is to use &lt;em&gt;memoization&lt;/em&gt;. That is, we cache the
output of our &lt;code&gt;fib&lt;/code&gt; function the first time we call the function for a given
&lt;code&gt;n&lt;/code&gt;.  If we call the function again for the same &lt;code&gt;n&lt;/code&gt;, we use the cached output
we saved and avoid recursively recomputing all Fibonacci numbers smaller than
&lt;code&gt;n&lt;/code&gt;. The easiest way to implement memoization in Python is to use a decorator:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;memoize&lt;/span&gt;(f):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cache &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;wrapped&lt;/span&gt;(n):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; cache:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            cache[n] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f(n)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; cache[n]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; wrapped
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@memoize&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt;(n):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; fib(n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; fib(n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we&amp;rsquo;ve created a decorator &lt;code&gt;memoize&lt;/code&gt; that stores a dictionary that caches
the results of the function, using the inputs to the function as the cache
keys. We then apply the &lt;code&gt;memoize&lt;/code&gt; decorator to the &lt;code&gt;fib&lt;/code&gt; function, which is
unchanged from above. This implementation is &lt;em&gt;substantially&lt;/em&gt; faster, we&amp;rsquo;re now
able to calculate &lt;code&gt;$F_{100}$&lt;/code&gt; in less than a millisecond:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;In [14]: %time fib(100)
CPU times: user 299 µs, sys: 0 ns, total: 299 µs
Wall time: 316 µs
Out[14]: 354224848179261915075
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Memoization can be very useful if we don&amp;rsquo;t mind paying the memory cost of
storing all inputs and outputs to all functions. All we need to do is create a
cache and save results to the cache. The rest of the algorithm is completely
unchanged and we still retain all the intuition we developed while thinking
about the recursive approach.&lt;/p&gt;
&lt;h2 id=&#34;dynamic-fibonacci&#34;&gt;Dynamic Fibonacci&lt;/h2&gt;
&lt;p&gt;There is a more optimal way to do this problem, using a dynamic programming
approach. To see why this might be the case, consider how the recursive and
memoized approaches we examined already are &lt;em&gt;top-down&lt;/em&gt; approaches. We coded
things in a very general way such that our implementation doesn&amp;rsquo;t know ahead of
time how many times the &lt;code&gt;fib&lt;/code&gt; function will get called or when it will
eventually get called with arguments that trigger the terminating conditions for
the recursion (e.g. &lt;code&gt;n = 1&lt;/code&gt; and &lt;code&gt;n = 0&lt;/code&gt;). However, we know ahead of time that to
calculate the 40th Fibonacci number, we are definitely going to need the 0th
through 39th number. A more clever &lt;em&gt;bottom-up&lt;/em&gt; algorithm takes advantage of this
knowledge. A dynamic Fibonacci solver looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt;(n):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nm1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nm2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, n&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        fibi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nm1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; nm2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        nm1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nm2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        nm2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fibi
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; fibi
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This version uses constant memory and runs in &lt;code&gt;$O(n)$&lt;/code&gt; time. It also doesn&amp;rsquo;t use
the call stack to store temporary variables and is not susceptible to raising
errors due to running out stack frames (in Python) or overflowing the stack and
triggering undefined behavior (in an unsafe compiled language like C).&lt;/p&gt;
&lt;h2 id=&#34;making-change&#34;&gt;Making change&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s close this out with a discussion of one more problem that is amenable to
this sort of approach. Here we&amp;rsquo;d like to know how many different ways we can
make change for a dollar using US currency (that is, using pennies, nickles,
dimes, quarters, half-dollars, and dollar coins). It may not be obvious that
this problem is amenable to a recursive approach. One way to see this is to
realize that one subset of solutions is the set of ways to make change for
99 cents along with one more penny. Another set is the set of ways to make
change for 95 cents along with another nickel, 90 cents with a dime, and so
on. All of these solutions depend on the solution of a smaller version of the
problem - a classic signal that recursion might be useful. What about the other
solutions? Well, we know that, for example, there is only one way to take a way
to make change for 99 cents and make it a way to make change for a dollar: add
another cent. So that means we&amp;rsquo;ve accounted for all of the ways to make a dollar
with the set of coins that includes pennies. So the other set of solutions is
the way to make change for a dollar using all coins &lt;em&gt;but&lt;/em&gt; pennies. Again, we are
dealing with a smaller problem, another recursive path.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s take a look at Python code for this recursive algorithm:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;make_change&lt;/span&gt;(amount, denominations):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(denominations) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; amount &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; amount &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    num_with_amount &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; make_change(amount &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; denominations[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], denominations)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    num_without_denom &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; make_change(amount, denominations[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; num_with_amount &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; num_without_denom
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The terminating cases might look a little weird. The first, checking the number
of denominations to consider, handles the case where we&amp;rsquo;re asked to make change
with no coins at all. There&amp;rsquo;s no way to make change in this case, so the number
of ways to make change from this branch of the recursive call graph is zero. The
second case, when we&amp;rsquo;re asked to make change for 0 cents, corresponds to the
case where we&amp;rsquo;ve made exact change already, so this branch contributes exactly
one way to make change. Finally, if we&amp;rsquo;re asked to make change for a negative
amount of currency that means that again this is an invalid way to make change
for a dollar (the value of the coins goes over a dollar).&lt;/p&gt;
&lt;p&gt;As with the Fibonacci numbers, this is a top-down approach. What would the
bottom-up dynamic approach look like? One way to do it is to make use of a table
that caches the results for simple cases and then builds up more complicated
cases as we go:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; itertools
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;make_change_dynamic&lt;/span&gt;(amount, denominations):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Generate all combinations of the given denominations&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# e.g. for a penny and a nickel, this would be just a penny, just a &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# nickel, and a penny and a nickel&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    combinations &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, len(denominations) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; itertools&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;combinations(denominations, l):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            combinations&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(x)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# table to cache results&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    TABLE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# terminating case for making change for 0 cents&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; combinations:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TABLE[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, c] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, amount &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# terminating case for making change with no money&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TABLE[i, ()] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; combinations:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; c[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;# terminating case for making change for negative cents&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                TABLE[i, c] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; c[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;# exact change&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                TABLE[i, c] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                TABLE[i, c] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TABLE[i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; c[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], c] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; TABLE[i, c[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; TABLE[amount, denominations]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I suspect that there&amp;rsquo;s probably a fancier version that can compute the
result with constant memory like the Fibonacci case we discussed above.&lt;/p&gt;
&lt;h2 id=&#34;futher-reading&#34;&gt;Futher Reading&lt;/h2&gt;
&lt;p&gt;Another blog post diving into some more in-depth theory:
&lt;a href=&#34;https://blog.racket-lang.org/2012/08/dynamic-programming-versus-memoization.html&#34;&gt;https://blog.racket-lang.org/2012/08/dynamic-programming-versus-memoization.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A set of dynamic programming practice problems:
&lt;a href=&#34;https://atcoder.jp/contests/dp/tasks&#34;&gt;https://atcoder.jp/contests/dp/tasks&lt;/a&gt;&lt;/p&gt;
</description>
		</item>
		<item>
			<title>Storing versioned data with revlogs</title>
			<link>https://ngoldbaum.github.io/posts/revlog/</link>
			<pubDate>Thu, 23 May 2019 09:31:46 -0400</pubDate>
			<guid isPermaLink="true">https://ngoldbaum.github.io/posts/revlog/</guid>
			<description>&lt;p&gt;Mercurial makes use of the &lt;a href=&#34;https://www.mercurial-scm.org/wiki/Revlog&#34;&gt;revlog data
format&lt;/a&gt; for storing versioned data of
all kinds on-disk. The design constraints that led to the choice of this data
format are described &lt;a href=&#34;https://www.mercurial-scm.org/wiki/Presentations?action=AttachFile&amp;amp;do=view&amp;amp;target=ols-mercurial-paper.pdf&#34;&gt;in a paper by Matt
Mackall&lt;/a&gt;,
the original author of Mercurial. There is also internal technical documentation
for the revlog data format included &lt;a href=&#34;https://www.mercurial-scm.org/repo/hg/file/default/mercurial/help/internals/revlogs.txt&#34;&gt;in Mercurial&amp;rsquo;s online
help&lt;/a&gt;,
accessible via &lt;code&gt;hg help internals.revlogs&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;what-is-a-revlog-exactly&#34;&gt;What is a revlog exactly?&lt;/h2&gt;
&lt;p&gt;A revlog - short for a revision log - is an append-only data structure for
storing discrete data entries that relate to other entries via a directed
acyclic graph (a
&lt;a href=&#34;https://en.wikipedia.org/wiki/Directed_acyclic_graph&#34;&gt;DAG&lt;/a&gt;). For Mercurial&amp;rsquo;s
usage, the DAG in question is the graph of changes to the repository. Each entry
in a revlog consists of metadata and compressed revision data for the entry. The
metadata contains a cryptographic hash of the content of the revision, the size
of the content and metadata, and references to the &lt;em&gt;parent&lt;/em&gt; entries for the
revlog. Each entry in a revlog can only have two parents. This is one of the
reasons that Mercurial does &lt;em&gt;not&lt;/em&gt; allow &lt;a href=&#34;http://www.freblogg.com/2016/12/git-octopus-merge.html&#34;&gt;octopus
merges&lt;/a&gt;, where revisions
can have an arbitrary number of parents. The revision data are stored in a
compressed format, either containing the full content of a file at a given
revision or as a delta relative to the state of the file at a previous
revision. Whether or not a revision contains a delta or the full content of a
file depends on how much data would be required to reconstruct the file
(e.g. the length of the already existing delta chain or the size of the change
in the revision). By storing occasional snapshots, Mercurial can reconstruct
repository content at any revision without going through all of the history of
the project and also without storing an unreasonable amount of data for each
revision. The style of delta chains with occasional snapshots is inspired by
video compression technology, where information about each frame is stored as
deltas to the previous frame, with occasional keyframes containing the entire
content of a frame of video.&lt;/p&gt;
&lt;h2 id=&#34;kinds-of-revlogs&#34;&gt;Kinds of revlogs&lt;/h2&gt;
&lt;p&gt;Mercurial stores all versioned data using three different kinds of revlog files,
&lt;em&gt;changelogs&lt;/em&gt;, &lt;em&gt;manifestlogs&lt;/em&gt;, and &lt;em&gt;filelogs&lt;/em&gt;. Each of these have the same format, a
header followed by zlib-compressed content, but differ in the meaning of the
content. Changelogs store metadata about each commit, reading from this file is
sufficient to get most information displayed by &lt;code&gt;hg log&lt;/code&gt;. Manifestlogs store the
manifest of the repository - a list of files contained in the repository at a
revision. Filelogs contain the revision information for individual files tracked
in a repository. Each of these revlogs are linked to each other. The changelog
contains a reference to a manifestlog entry, that manifestlog entry will in turn
contain references to filelog entries. By reading data from each of these revlog
files in turn, one can get the state of the files tracked by the repository at
each revision. This is how &lt;code&gt;hg update&lt;/code&gt; works to update the state of the working
directory to a different revision.&lt;/p&gt;
&lt;h2 id=&#34;content-of-a-revlog-file&#34;&gt;Content of a revlog file&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s take a look at a revlog file from the test repository we created in &lt;a href=&#34;https://ngoldbaum.github.io/posts/repo-contents/&#34;&gt;a
previous blog post&lt;/a&gt;. For now
we&amp;rsquo;re going to be looking at the &lt;em&gt;changelog&lt;/em&gt; file,
&lt;code&gt;.hg/store/00changelog.i&lt;/code&gt;. This revlog file contains information about each
commit in the repository. Note that most revlogs used by Mercurial store the
content of individual files in the repository, but since revlogs are a generic
store for versioned data they can store versioned metadata like commit
descriptions and authors as well.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cd test-repository/.hg/store
$ xxd 00changelog.i
00000000: 0001 0001 0000 0000 0000 006f 0000 0077  ...........o...w
00000010: 0000 0000 0000 0000 ffff ffff ffff ffff  ................
00000020: 6f33 46b9 4a1f bee7 0a81 0370 8fd6 d485  o3F.J......p....
00000030: edc8 8602 0000 0000 0000 0000 0000 0000  ................
00000040: 789c 25c8 410e 0221 0c00 c03b afe0 05a6  x.%.A..!...;....
00000050: 85b6 6062 8c37 6f7e c194 2dbb 9200 7b59  ..`b.7o~..-...{Y
00000060: ff6f e21e 6732 5052 b41a 2d20 1346 4939  .o..g2PR..- .FI9
00000070: 8914 415e 0024 64ae d722 d956 f7d2 e3a3  ..A^.$d..&amp;#34;.V....
00000080: d33f f76e 45bf c3df e63f 3044 8a8f 6d68  .?.nE....?0D..mh
00000090: eb97 651f 7787 cc99 23a6 401e 8900 9cbe  ..e.w...#.@.....
000000a0: d7d6 ab73 6ad6 e6e6 4ffe 00b4 ba22 1400  ...sj...O....&amp;#34;..
000000b0: 0000 0000 6f00 0000 0000 7800 0000 8400  ....o.....x.....
000000c0: 0000 0100 0000 0100 0000 00ff ffff ff0e  ................
000000d0: 80b4 9a8e dc08 c2d9 ffcd cd7f d71b 55de  ..............U.
000000e0: 9a7f 7f00 0000 0000 0000 0000 0000 0078  ...............x
000000f0: 9c25 c94b 0a02 310c 00d0 7d4f 9113 483f  .%.K..1...}O..H?
00000100: 894d 41c4 9d3b af20 eda4 1d0b fdc0 50c1  .MA..;. ......P.
00000110: e30b ba7d 4fce 1c74 287a 4317 10a9 38b4  ...}O..t(zC...8.
00000120: deb1 f7cc 2892 434e 44c9 ea8c ea11 d72b  ....(.CND......+
00000130: 0eb8 cf26 29be 3b5c c60f 8c75 e86e 7b8f  ...&amp;amp;).;\...u.n{.
00000140: b59d b6d9 afca 1031 39e3 89c1 206a ade2  .......19... j..
00000150: b3d4 9695 8a22 75ec d0e7 9161 e5cf 8235  .....&amp;#34;u....a...5
00000160: e17f 5fb0 0c27 1c                        .._..&amp;#39;.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Hmm, no luck about any of the data in this file being human-readable - it
appears to be more or less random binary data that we&amp;rsquo;re going to need to do a
bit more work to decode. We should perhaps not be surprised about this, since
revlogs store revision data in a compressed format - we&amp;rsquo;d need to be able to see
the uncompressed revision data to get human-readable text back.&lt;/p&gt;
&lt;p&gt;According to the Mercurial documentation (in particular &lt;code&gt;hg help internals.revlogs&lt;/code&gt;, see
&lt;a href=&#34;https://www.mercurial-scm.org/repo/hg/help/internals.revlogs&#34;&gt;here&lt;/a&gt;), the first
four bytes of the revlog encodes the version of the revlog data format used by
the file as well as various feature flags. In this case the bytes are
&lt;code&gt;00010001&lt;/code&gt;, which corresponds to a file that uses v1 of the revlog format and
sets a feature flag that says revision data are stored &lt;em&gt;inline&lt;/em&gt; in this
file. This &lt;code&gt;v1&lt;/code&gt; version of the revlog format is called RevlogNG - NG is short for
next generation, which made a lot of sense when it replaced Mercurial&amp;rsquo;s original
revlog format in 2006. These days practically all repositories use one variant
or another of the &lt;code&gt;v1&lt;/code&gt; RevlogNG format. Data for revlog entries can either be
stored interleaved with metadata entries or in a separate data file. Interleaved
data are used for relatively small revlogs while separate data files are stored
for large revlogs. This ensures revlog metadata can always be parsed without
also needing to scan through large amounts of revision data.&lt;/p&gt;
&lt;p&gt;Following the header is the first entry. Each entry consists of metadata and
revision data:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The number of bytes from the beginning of the file (6 bytes)&lt;/li&gt;
&lt;li&gt;Bit flags for special behavior. For now we will ignore these. (2 bytes)&lt;/li&gt;
&lt;li&gt;The length of the compressed revision data or delta stored in the entry. (4
bytes)&lt;/li&gt;
&lt;li&gt;The length of the full revision data in uncompressed format, not the size
of an uncompressed delta if the entry stores a delta. (4 bytes)&lt;/li&gt;
&lt;li&gt;Base revision to use when restoring the full text from a delta. If the base
revision is the current revision, the revision stores the full text. (4
bytes).&lt;/li&gt;
&lt;li&gt;A &lt;em&gt;linkrev&lt;/em&gt;, the revision number of a revision that this entry is linked to. This
allows a revision in one revlog to refer to a revision in a different
revlog. For example, the revlog entry for a file points to the revlog entry in
the &lt;code&gt;00changelog.i&lt;/code&gt; changeset index file for the changeset that produced the
revlog entry. (4 bytes)&lt;/li&gt;
&lt;li&gt;Signed integer revision of the first parent (&lt;code&gt;p1&lt;/code&gt;), -1 indicates no parent. (4
bytes)&lt;/li&gt;
&lt;li&gt;Signed integer revision of the second parent (&lt;code&gt;p2&lt;/code&gt;), -1 indicates no
parent. (4 bytes)&lt;/li&gt;
&lt;li&gt;Hash of the revision&amp;rsquo;s content. (32 bytes).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Currently Mercurial uses a SHA-1 hash. Since SHA-1 hashes are 20 bytes long, the
remaining 12 bytes are set to zero. In the future repositories will use a
different, more secure hash function that can use up to 32 bytes to store
hashes. Since the offset to revision 0 will always be zero, it is elided. The
4-byte header takes the place of the offset for the first revision. The linkrev
and parent revisions are stored as integer revision numbers. The linkrev is the
revision number in the linked revlog file while the parent revisions are the
revision numbers in the current revlog.&lt;/p&gt;
&lt;p&gt;For inline revlogs, the raw revision data follows the index entry, with no
header or padding in between. For non-inline revlogs, the data for the entry are
written at the offset specified in the first six bytes of the index entry. For
non-inline revlogs, the data are stored in a file with a &lt;code&gt;&amp;quot;.d&amp;quot;&lt;/code&gt; filename suffix
while the revlog index entries are stored in a &lt;code&gt;&amp;quot;.i&amp;quot;&lt;/code&gt; file. The revision entires
themselves consist of an optional one-byte header followed by the revision
data. The byte is either &lt;code&gt;\0&lt;/code&gt;, for entries that are header-only and contain no
revision data, &lt;code&gt;u&lt;/code&gt;, for uncompressed revision data, and &lt;code&gt;x&lt;/code&gt;, for zlib compressed
revision data.&lt;/p&gt;
&lt;h2 id=&#34;representing-revlogs-in-rust&#34;&gt;Representing revlogs in rust&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve written a basic parser for this data format in Rust and &lt;a href=&#34;https://hg.sr.ht/~ngoldbaum/hg-rust/browse/466e0f40365e/revlogs/src/main.rs&#34;&gt;put it up on
hg.sr.ht&lt;/a&gt;,
a free (for the time being) service for hosting Mercurial repositories. The data are stored
using two structs, one for the header:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RevlogHeader&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    offset: &lt;span style=&#34;color:#66d9ef&#34;&gt;u64&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;// really 6 bytes but easier to represent as a u64
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    bitflags: [&lt;span style=&#34;color:#66d9ef&#34;&gt;u8&lt;/span&gt;; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    compressedlength: &lt;span style=&#34;color:#66d9ef&#34;&gt;u32&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    uncompressedlength: &lt;span style=&#34;color:#66d9ef&#34;&gt;u32&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    baserev: &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    linkrev: &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p1rev: &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p2rev: &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    hash: [&lt;span style=&#34;color:#66d9ef&#34;&gt;u8&lt;/span&gt;; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And another for the content of the revlog entry itself, which includes a header
as well as uncompressed content of the revlog:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RevlogEntry&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    header: &lt;span style=&#34;color:#a6e22e&#34;&gt;RevlogHeader&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    content: &lt;span style=&#34;color:#a6e22e&#34;&gt;RevlogContent&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The content field is represented using an enum:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RevlogContent&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Generic(String),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For now the enum only has a single variant, and is a trivial wrapper for a
String. The next step is to add special handling for changelogs,
manifestlogs, and filelogs, so this will eventually look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RevlogContent&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Changelog(ChangelogEntry),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Manigestlog(ManifestlogEntry),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Filelog(FilelogEntry),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will allow me to add special handling and pretty-printers or the different
kinds of revlogs used by Mercurial.&lt;/p&gt;
&lt;p&gt;To actually read the changelog entries, we need to read the header, get the size
of the content of the revlog entry from the header, read the content, and
finally decompress the content. Since revlog headers are always 64 bytes, to get
the header we read 64 bytes of the changelog file and parse those destructure
the header content into the logical described above into the fields of the
&lt;code&gt;RevlogHeader&lt;/code&gt; struct:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; byteorder::{BigEndian, ReadBytesExt};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::io;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;impl&lt;/span&gt; RevlogHeader {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt;(buffer: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;u8&lt;/span&gt;; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;]) -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;RevlogHeader, io::Error&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; cursor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cursor::new(buffer &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;u8&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Ok(RevlogHeader {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            offset: &lt;span style=&#34;color:#a6e22e&#34;&gt;cursor&lt;/span&gt;.read_u48::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BigEndian&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;u64&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            bitflags: &lt;span style=&#34;color:#a6e22e&#34;&gt;cursor&lt;/span&gt;.read_u16::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BigEndian&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;.to_be_bytes(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            compressedlength: &lt;span style=&#34;color:#a6e22e&#34;&gt;cursor&lt;/span&gt;.read_u32::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BigEndian&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            uncompressedlength: &lt;span style=&#34;color:#a6e22e&#34;&gt;cursor&lt;/span&gt;.read_u32::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BigEndian&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            baserev: &lt;span style=&#34;color:#a6e22e&#34;&gt;cursor&lt;/span&gt;.read_i32::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BigEndian&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            linkrev: &lt;span style=&#34;color:#a6e22e&#34;&gt;cursor&lt;/span&gt;.read_i32::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BigEndian&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            p1rev: &lt;span style=&#34;color:#a6e22e&#34;&gt;cursor&lt;/span&gt;.read_i32::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BigEndian&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            p2rev: &lt;span style=&#34;color:#a6e22e&#34;&gt;cursor&lt;/span&gt;.read_i32::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;BigEndian&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            hash: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;u8&lt;/span&gt;; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                cursor.read_exact(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; res)&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                res
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I made use of the &lt;a href=&#34;https://docs.rs/byteorder/1.3.1/byteorder/&#34;&gt;byteorder&lt;/a&gt;, which
provides a nice interface for converting bytes of a binary stream into
big-endian or little-endian integers. We store the hash as a raw array of bytes,
but we can display it in a nice way like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;header.hash.iter().map(&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; format!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{:02x}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,b)).collect().join(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will convert the bytes into hexadecimal digits, collect those digits into a
vector of strings, and then joins the strings into a single hash digest. This
code is in the &lt;code&gt;fmt::Display&lt;/code&gt; implementation for &lt;code&gt;RevlogHeader&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once we have the header, we read the content, and then decompress the content
using &lt;code&gt;zlib&lt;/code&gt;. In practice we make use of &lt;a href=&#34;https://crates.io/crates/flate2&#34;&gt;the flate2
crate&lt;/a&gt;, which provides an interface for
decompressing &lt;code&gt;zlib&lt;/code&gt; streams:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; flate2::read::ZlibDecoder;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; gz &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ZlibDecoder::new(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;zlib_buffer[&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; decompressed_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; String::new();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; decompressed_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gz.read_to_string(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; decompressed_data)&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With all of that, we&amp;rsquo;re able to read the data in the changelog file for the test
repository we are working with:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cargo run
header:
offset: 0
bitflags: [0, 0]
compressed length: 111
uncompressed length: 119
base revision: 0
linked revision: 0
p1: -1
p2: -1
hash: 6f3346b94a1fbee70a8103708fd6d485edc88602000000000000000000000000

content: 8047a1de3d215413678766b615c006285e9b68df
Nathan Goldbaum &amp;lt;nathan12343@gmail.com&amp;gt;
1558531724 14400
a_file

adding a_file

header:
offset: 111
bitflags: [0, 0]
compressed length: 120
uncompressed length: 132
base revision: 1
linked revision: 1
p1: 0
p2: -1
hash: 0e80b49a8edc08c2d9ffcdcd7fd71b55de9a7f7f000000000000000000000000

content: d68909f0c439445f34273877884dde9eb55b20e4
Nathan Goldbaum &amp;lt;nathan12343@gmail.com&amp;gt;
1558531758 14400
a_file

adding more text to a_file
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here we can see that changelog entries store a hash that encodes a reference to
a manifestlog entry, the commit author and e-mail, a timestamp and timezone
offset, a list of files that are touched by the changeset, and the commit
description.&lt;/p&gt;
&lt;p&gt;Next up I will be exploring the content of manifestlog and filelog files, with
the ultimate goal of being able to reconstruct snapshots of a repository at a
given revision, implementing the functionality of &lt;code&gt;hg update&lt;/code&gt;.&lt;/p&gt;
</description>
		</item>
		<item>
			<title>What&#39;s in a repository?</title>
			<link>https://ngoldbaum.github.io/posts/repo-contents/</link>
			<pubDate>Tue, 21 May 2019 16:08:55 -0400</pubDate>
			<guid isPermaLink="true">https://ngoldbaum.github.io/posts/repo-contents/</guid>
			<description>&lt;p&gt;When you look inside of a code repository you will likely first see just the
contents of a codebase at a particular revision. However, the repository also
contains a compressed version of the contents of every file at every version of
the codebase. For a Mercurial repository, these compressed data are contained in
a hidden &lt;code&gt;.hg/&lt;/code&gt; directory. In this blog post I&amp;rsquo;m going to try to figure out what
data are contained in this directory and how it&amp;rsquo;s structured.&lt;/p&gt;
&lt;p&gt;To follow along you will need to have Mercurial installed. I&amp;rsquo;m going to use the
latest version, Mercurial 5.0, which you can install in a number of ways,
perhaps easiest using the &lt;code&gt;pip&lt;/code&gt; associated with a Python 2.7
installation. Mercurial 5.0 has beta support for Python 3.5 or newer, so you can
use that as well if you do not have a Python 2.7 installation set up. To
install, do the following:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ pip install mercurial --user
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you use &lt;code&gt;pip install --user&lt;/code&gt; like I have here you will also need to ensure
that &lt;code&gt;$HOME/.local/bin&lt;/code&gt; is in your PATH environment variable.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s take a look at the contents of the &lt;code&gt;.hg&lt;/code&gt; directory for a real-world
repository. For this purpose let&amp;rsquo;s use the repository for Mercurial itself -
Mercurial development is tracked using Mercurial, naturally:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ hg clone https://mercurial-scm.org/repo/hg
real URL is https://www.mercurial-scm.org/repo/hg
destination directory: hg
requesting all changes
adding changesets
adding manifests
adding file changes
added 42325 changesets with 80197 changes to 3352 files (+1 heads)
179808 new obsolescence markers
new changesets 9117c6561b0b:2338bdea4474
updating to bookmark @
1964 files updated, 0 files merged, 0 files removed, 0 files unresolved
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Depending on how fast your internet connection is, this operation might take a
while to finish. Mercurial is telling us a lot of information here in its debug
output that might be helpful for understanding Mercurial&amp;rsquo;s internals. First, it
tries to figure out if we&amp;rsquo;ve given it a URL or some other URI it can resolve. We
gave it an HTTPS URL so it just uses that to communicate with the Mercurial
instance running on Mercurial-scm.org. Second, it prints &amp;ldquo;Requesting all
changes&amp;rdquo; when it begins to pull the changes from the remote repository. This
happens in three steps, first obtaining the &lt;em&gt;changesets&lt;/em&gt;, then the &lt;em&gt;manifests&lt;/em&gt;,
and finally the &lt;em&gt;file changes&lt;/em&gt;. Each of these correspond to different kinds of
&lt;em&gt;revlog&lt;/em&gt; files on-disk that we will be looking at shortly. Briefly, the &lt;em&gt;revlog&lt;/em&gt;
is the file format that Mercurial uses to store versioned data, let it be
metadata, the manifest of files in a repository at any given time, and the
contents of each file at each revision in history.&lt;/p&gt;
&lt;p&gt;After these steps, Mercurial lets us know how much data it has processed. For
this repository there are more than 40,000 commits to more than 3000 files over
the history of the repository. Next it tells us that this repository contains
almost 200,000 &lt;em&gt;obsolecence markers&lt;/em&gt;, this is a data format used by the &lt;a href=&#34;https://www.mercurial-scm.org/wiki/EvolveExtension&#34;&gt;evolve
extension&lt;/a&gt;, which is one of
Mercurial&amp;rsquo;s coolest features but is also beyond the scope of this post, I will
try to return to it in the future. The next couple of messages let us know which
changes were added (since we&amp;rsquo;re cloning, we&amp;rsquo;ve added all of the changes in the
repository, this message is more useful if we are only pulling a subset of the
changes), and lets us know that this repository has something called a bookmark
that is named &lt;code&gt;@&lt;/code&gt; defined. We will talk more about bookmarks later, but if you
are familiar with git, &lt;code&gt;@&lt;/code&gt; is a bit like the &lt;code&gt;&#39;master&#39;&lt;/code&gt; branch in that new
clones will have a checkout of &lt;code&gt;@&lt;/code&gt; in the working directory of the
repository. Finally, it creates the working directory, which contains almost
2000 files. Note that this count is substantially less than the 3000 files that
have ever been defined in the repository, some files that were present in the
past have since been removed.&lt;/p&gt;
&lt;p&gt;OK, now that we&amp;rsquo;ve cloned the repository, let&amp;rsquo;s take a look at what&amp;rsquo;s inside the
&lt;code&gt;.hg&lt;/code&gt; directory:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cd hg/.hg
$ ls -lh
total 136K
-rw-rw-r-- 1 goldbaum goldbaum   57 May 21 16:26 00changelog.i
-rw-rw-r-- 1 goldbaum goldbaum   43 May 21 16:30 bookmarks
-rw-rw-r-- 1 goldbaum goldbaum    1 May 21 16:30 bookmarks.current
-rw-rw-r-- 1 goldbaum goldbaum    8 May 21 16:30 branch
drwxrwxr-x 2 goldbaum goldbaum 4.0K May 21 16:30 cache
-rw-rw-r-- 1 goldbaum goldbaum  88K May 21 16:38 dirstate
-rw-rw-r-- 1 goldbaum goldbaum  501 May 21 16:30 hgrc
-rw-rw-r-- 1 goldbaum goldbaum   59 May 21 16:26 requires
drwxrwxr-x 3 goldbaum goldbaum 4.0K May 21 16:30 store
-rw-rw-r-- 1 goldbaum goldbaum    0 May 21 16:27 undo.bookmarks
-rw-rw-r-- 1 goldbaum goldbaum    7 May 21 16:27 undo.branch
-rw-rw-r-- 1 goldbaum goldbaum   41 May 21 16:27 undo.desc
-rw-rw-r-- 1 goldbaum goldbaum   40 May 21 16:27 undo.dirstate
drwxrwxr-x 2 goldbaum goldbaum 4.0K May 21 16:35 wcache
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Hmm, this is a lot of stuff. Let&amp;rsquo;s make this a little simpler by starting with a
new repository with a single file and only a couple of commits:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cd ../../
$ mkdir test-repository
$ cd test-repository
$ hg init
$ echo &amp;#34;some data&amp;#34; &amp;gt; a_file
$ hg add a_file
$ hg commit -m &amp;#34;adding a_file&amp;#34;
$ echo &amp;#34;some more data &amp;gt;&amp;gt; a_file
$ hg commit -m &amp;#34;adding some more text to a_file&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This creates a repository containing a single file with two revisions:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ hg log --graph
@  changeset:   1:0e80b49a8edc
|  tag:         tip
|  user:        Nathan Goldbaum &amp;lt;nathan12343@gmail.com&amp;gt;
|  date:        Wed May 22 09:29:18 2019 -0400
|  summary:     adding more text to a_file
|
o  changeset:   0:6f3346b94a1f
   user:        Nathan Goldbaum &amp;lt;nathan12343@gmail.com&amp;gt;
   date:        Wed May 22 09:28:44 2019 -0400
   summary:     adding a_file
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;rsquo;s take a look at the contents of the &lt;code&gt;.hg&lt;/code&gt; directory in this new more
trivial repository:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;☿ ls -lh .hg
total 44K
-rw-rw-r-- 1 goldbaum goldbaum   57 May 22 09:27 00changelog.i
drwxrwxr-x 2 goldbaum goldbaum 4.0K May 22 09:29 cache
-rw-rw-r-- 1 goldbaum goldbaum   63 May 22 09:28 dirstate
-rw-rw-r-- 1 goldbaum goldbaum   26 May 22 09:29 last-message.txt
-rw-rw-r-- 1 goldbaum goldbaum   59 May 22 09:27 requires
drwxrwxr-x 3 goldbaum goldbaum 4.0K May 22 09:29 store
-rw-rw-r-- 2 goldbaum goldbaum   63 May 22 09:28 undo.backup.dirstate
-rw-rw-r-- 1 goldbaum goldbaum    0 May 22 09:29 undo.bookmarks
-rw-rw-r-- 1 goldbaum goldbaum    7 May 22 09:29 undo.branch
-rw-rw-r-- 1 goldbaum goldbaum    9 May 22 09:29 undo.desc
-rw-rw-r-- 2 goldbaum goldbaum   63 May 22 09:28 undo.dirstate
drwxrwxr-x 2 goldbaum goldbaum 4.0K May 22 09:29 wcache
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Still a decent number of files but definitely less complex. There is a very
&lt;a href=&#34;https://www.mercurial-scm.org/wiki/FileFormats&#34;&gt;helpful page&lt;/a&gt; on the &lt;a href=&#34;https://www.mercurial-scm.org/wiki/&#34;&gt;Mercurial
wiki&lt;/a&gt; that describes Mercurial&amp;rsquo;s custom
file formats, so we can look there to decide which of these files is important.&lt;/p&gt;
&lt;p&gt;The first, &lt;code&gt;00changelog.i&lt;/code&gt; is there to inform older versions of Mercurial that
this repository was created with a newer version and is incompatible with the
old version. Mercurial development proceeds with &lt;a href=&#34;https://www.mercurial-scm.org/wiki/CompatibilityRules&#34;&gt;strict backward
compatibility&lt;/a&gt;
guarantees so repositories created by older versions of Mercurial should
continue to work with newer versions forever, however there&amp;rsquo;s guarantee that an
old Mercurial client should be able to read a repository created by a new
one. Since Mercurial is a distributed system it is important for it to be able
to talk to various versions of itself over the network or when operating on
repositories on disk.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;cache&lt;/code&gt; and &lt;code&gt;wcache&lt;/code&gt; directories contain caches of various kinds used by
Mercurial and some extensions:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ls -lh .hg/cache
total 1.4M
-rw-rw-r-- 1 goldbaum goldbaum  148 May 21 16:30 branch2-base
-rw-rw-r-- 1 goldbaum goldbaum  42K May 21 16:30 evoext-obscache-00
-rw-rw-r-- 1 goldbaum goldbaum 992K May 21 16:30 hgtagsfnodes1
-rw-rw-r-- 1 goldbaum goldbaum   14 May 21 16:30 rbc-names-v1
-rw-rw-r-- 1 goldbaum goldbaum 331K May 21 16:30 rbc-revs-v1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;These aren&amp;rsquo;t documented on the wiki (last updated in 2013) and appear to contain
opaque binary data. I&amp;rsquo;m going to ignore these for now.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;dirstate&lt;/code&gt; file contains information about the state of the working
directory (e.g. everything in the repository &lt;em&gt;except&lt;/em&gt; for the &lt;code&gt;.hg&lt;/code&gt;
directory). Quote the Mercurial wiki:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This file contains information on the current state of the working directory
in a binary format. It begins with two 20-byte hashes, for first and second
parent, followed by an entry for each file. Each file entry is of the
following form:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;lt;1-byte state&amp;gt;&amp;lt;4-byte mode&amp;gt;&amp;lt;4-byte size&amp;gt;&amp;lt;4-byte mtime&amp;gt;&amp;lt;4-byte name
length&amp;gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;If the name contains a null character, it is split into two strings, with the
second being the copy source for move and copy operations.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;In addition there is a &lt;a href=&#34;https://www.mercurial-scm.org/wiki/DirState&#34;&gt;wiki page&lt;/a&gt;
devoted just to this file that contains more information.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s take a look at the contents of the &lt;code&gt;dirstate&lt;/code&gt; file for our repository:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ xxd .hg/dirstate
00000000: 0e80 b49a 8edc 08c2 d9ff cdcd 7fd7 1b55  ...............U
00000010: de9a 7f7f 0000 0000 0000 0000 0000 0000  ................
00000020: 0000 0000 0000 0000 6e00 0081 b400 0000  ........n.......
00000030: 195c e54e 9600 0000 0661 5f66 696c 65    .\.N.....a_file
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you&amp;rsquo;re unfamiliar with hexadecimal output, I&amp;rsquo;m using the &lt;code&gt;xxd&lt;/code&gt; tool to
quickly preview the binary content of the &lt;code&gt;dirstate&lt;/code&gt; file. The first column
tells you how many bytes into the file we are. Each set of 4 hex characters
corresponds to two bytes in the file. If we look above to where we examined the
output of &lt;code&gt;hg log&lt;/code&gt; for this repository, you can see that the first 20 bytes of
this file is the SHA1 &lt;a href=&#34;https://www.mercurial-scm.org/wiki/Nodeid&#34;&gt;nodeid&lt;/a&gt;
associated with the most recent change (&lt;code&gt;hg log&lt;/code&gt; only shows the first 12 bytes
of the nodeid for brevity). The &lt;code&gt;nodeid&lt;/code&gt; for a changeset is also sometimes
called a &lt;em&gt;changeset hash&lt;/em&gt;. It is a cryptographically unique identifier for a
commit generated by hashing the commit contents along with some metadata for the
commit. The next 20 bytes is filled with zeros. This is a special nodeid called
the &lt;em&gt;nullid&lt;/em&gt; that represents a nonexistent commit. These two commits are the
&lt;em&gt;parents of the working directory&lt;/em&gt;, these are usually referred to as &lt;code&gt;p1&lt;/code&gt; and
&lt;code&gt;p2&lt;/code&gt;. In this case &lt;em&gt;p1&lt;/em&gt; is the most recent commit, and since the last commit was
not a merge, &lt;em&gt;p2&lt;/em&gt; is set to the nullid. In addition to being &lt;code&gt;p2&lt;/code&gt; for non-merge
commits, an empty repository with no commits will have both &lt;code&gt;p1&lt;/code&gt; and &lt;code&gt;p2&lt;/code&gt; set to
the nullid. An interesting consequence of this choice is that completely
unrelated repositories can be merged with no issues, since ultimately all
repositories histories descend from the &amp;ldquo;commit&amp;rdquo; associated with the nullid.&lt;/p&gt;
&lt;p&gt;Following the nodeid entries for the parents of the commit is the state entry
for the only file in this repository, &lt;code&gt;a_file&lt;/code&gt;. This consists of a set of binary
encoded metadata for the file, first a one-byte &amp;ldquo;state&amp;rdquo;, which for this file is
&amp;ldquo;n&amp;rdquo;, corresponding to a &amp;ldquo;normal&amp;rdquo; state. Other options include &amp;ldquo;a&amp;rdquo; for added, &amp;ldquo;r&amp;rdquo;
for removed, and &amp;ldquo;m&amp;rdquo; for merged. Following this is 4 bytes containing the &amp;ldquo;mode&amp;rdquo;
of the file. This corresponds to the bytes &lt;code&gt;000081b4&lt;/code&gt;. In this case the first
two bytes are null and the UNIX file permissions are encoded in the last two
bytes. In this case it corresponds to the octal permission code &lt;code&gt;664&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ stat -c &amp;#34;%a %n&amp;#34; a_file
664 a_file
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;How this is calculated based on the contents of the &lt;code&gt;dirstate&lt;/code&gt; file is a little
confusing to me, I&amp;rsquo;d like to come back to this later. Internally Mercurial is
doing something like this python code:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import os
&amp;gt;&amp;gt;&amp;gt; mode = &amp;#39;%3o&amp;#39; % (0x000081b4 &amp;amp; 0o777 &amp;amp; ~os.umask(0))
&amp;gt;&amp;gt;&amp;gt; mode
&amp;#39;664&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The first operation makes some sense, masking with &lt;code&gt;0o777&lt;/code&gt; ignores the first two
and half bytes. The 8 may indicate that the next 12 bits correspond to three
octal characters, and then the next three characters are the file mask. I&amp;rsquo;m not
sure why we additionally need to mask with &lt;code&gt;~os.umask(0)&lt;/code&gt;. Digging into the
history of Mercurial, it looks like this extra masking step &lt;a href=&#34;https://www.mercurial-scm.org/repo/hg/rev/9ab2b3b730ee&#34;&gt;was
added&lt;/a&gt; to fix issues on
windows and wasn&amp;rsquo;t in the original implementation, so let&amp;rsquo;s just ignore it for
now.&lt;/p&gt;
&lt;p&gt;The next 4 bytes contain the size of the file in bytes (in this case the entry
is &lt;code&gt;0x19&lt;/code&gt;, or 25 bytes). As an aside, this makes me wonder what happens if you
add a file bigger than &lt;code&gt;0xFFFFFFFF&lt;/code&gt; bytes! After this come 4 more bytes for the
modification time, in this case stored as the UNIX timestamp &lt;code&gt;0x5ce54e96&lt;/code&gt;, about
9:30 AM EST on May 22 2019 when this blog post was being written. This will also
be not-great in 2038 when the UNIX epoch overflows a 32 bit integer. Next we
have 4 bytes for the length of the name of the file, in this case &amp;lsquo;0x6&amp;rsquo;, or
plain old 6 to you and me, the number of characters in the filename. Finally the
filename itself, which is encoded in UTF-8, but in this case we can get away
with just reading off the ASCII in the hex dump.&lt;/p&gt;
&lt;p&gt;Ok, that covers the &lt;code&gt;dirstate&lt;/code&gt; file. There&amp;rsquo;s still a few more files left, so
let&amp;rsquo;s quickly go over those.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;last-message.txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This file contains the content of the last commit message, presumably for
caching purposes or so people can set up prompts that don&amp;rsquo;t need to actually
start up the Mercurial executable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;requires&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A record of repository requirements. This tells Mercurial clients what
features must be supported in order to work with the repository. Old clients
that do not have support for newer features will refuse to load a repository
that lists requirements from newer Mercurial versions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;undo.*&lt;/code&gt; files&lt;/p&gt;
&lt;p&gt;Files used by the deprecated &amp;ldquo;hg rollback&amp;rdquo; command to undo the last
transaction. I will ignore these since they are only useful for a deprecated
feature in Mercurial.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally there is one last directory, the &lt;code&gt;store&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ls .hg/store
00changelog.i  data     phaseroots  undo.backupfiles
00manifest.i   fncache  undo        undo.phaseroots
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The primary purpose of this directory is to store the bulk of the repository
data, in the form of &lt;a href=&#34;https://www.mercurial-scm.org/wiki/Revlog&#34;&gt;revlog&lt;/a&gt;
files. This is a special data structure that was invented by Mercurial&amp;rsquo;s
original developer to store versioned data in a compressed manner. We will come
back to revlogs and the contents of this directory in the &lt;a href=&#34;https://ngoldbaum.github.io/posts/revlog/&#34;&gt;next blog
post&lt;/a&gt;.&lt;/p&gt;
</description>
		</item>
		<item>
			<title>What this blog is for</title>
			<link>https://ngoldbaum.github.io/posts/my-first-post/</link>
			<pubDate>Mon, 20 May 2019 17:15:33 -0400</pubDate>
			<guid isPermaLink="true">https://ngoldbaum.github.io/posts/my-first-post/</guid>
			<description>&lt;p&gt;Hello from my second day at &lt;a href=&#34;https://recurse.com&#34;&gt;the recurse center&lt;/a&gt;. I&amp;rsquo;ll be
at RC for the next 12 weeks working on programming-focused projects, &lt;a href=&#34;https://www.recurse.com/manual#sec-pairing&#34;&gt;pair
programming&lt;/a&gt;, job-hunting, preparing
for interviews, and exploring and enjoying Brooklyn and the rest of NYC. I&amp;rsquo;ll be
using this blog to keep notes on the projects I&amp;rsquo;ll be working on and to share
more generally with the rest of the world. Hopefully it will also keep me honest
and on-task.&lt;/p&gt;
&lt;p&gt;Day one mostly consisted of orientation and getting-to-know-you time. In the
afternoon I spent time getting my new XPS 13 developer edition laptop set up and
customized they way I like for development. This is my first time using desktop
linux in about a decade and it&amp;rsquo;s taking some getting used to, but thankfully the
XPS 13 seems to not have any annoying hardware issues or buggy drivers. I also
got the bare bones template for this blog set up using
&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; and GitHub pages.&lt;/p&gt;
&lt;p&gt;Today I&amp;rsquo;ll be starting on the main project I&amp;rsquo;m planning to work on: a deep dive
into the &lt;a href=&#34;https://www.mercurial-scm.org/&#34;&gt;Mercurial version control system&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;why-mercurial&#34;&gt;Why Mercurial?&lt;/h2&gt;
&lt;p&gt;I used to use Mercurial a bunch in the context of development for
&lt;a href=&#34;https://yt-project.org&#34;&gt;yt&lt;/a&gt; and &lt;a href=&#34;https://enzo-project.org&#34;&gt;enzo&lt;/a&gt;
development. In the past few years both projects switched from Mercurial to
git. This reflects less on the quality of Mercurial as a software project and
more on the status of the ecosystem around Mercurial. Git has GitHub, GitLab,
and a plethora of other free tools and services that never took shape around
Mercurial. While Atlassian&amp;rsquo;s Bitbucket does support Mercurial, it&amp;rsquo;s clear that
development time is not currently focused on improving things for Mercurial
users. While recently the &lt;a href=&#34;https://sourcehut.org/&#34;&gt;sourcehut&lt;/a&gt; project added
Mercurial support, the ecosystem around hg is still very barebones. This works
for large companies that use hg like Facebook because they can create a custom
environment and code-hosting solution that works for their systems, but open
source projects that make use of Mercurial will have trouble attracting
contributors due to unfamiliarity with the tooling around the version control
system.&lt;/p&gt;
&lt;p&gt;In my opinion, this state of things is a shame since Mercurial has a lot of
advantages over Git. Just to take one example, by far my favorite feature of
Mercurial is its consistent and simple user experience. One clear example is how
&lt;code&gt;git checkout&lt;/code&gt; does completely different things in different contexts. If I want
to switch to an existing branch, that&amp;rsquo;s &lt;code&gt;git checkout &amp;lt;branch&amp;gt;&lt;/code&gt;. If I want to
create a new branch, that&amp;rsquo;s &lt;code&gt;git checkout -b&lt;/code&gt;. If I want to change the content
of a file in my working directly to reflect the content in the current branch,
that&amp;rsquo;s &lt;code&gt;git checkout &amp;lt;path&amp;gt;&lt;/code&gt;. These are all completely separate operations. With
Mercurial, these operations would be &lt;code&gt;hg update &amp;lt;branch&amp;gt;&lt;/code&gt;,&lt;code&gt;hg branch &amp;lt;branch&amp;gt;&lt;/code&gt;,
and &lt;code&gt;hg revert &amp;lt;path&amp;gt;&lt;/code&gt;. Another good exmaple of this is &lt;code&gt;git rebase&lt;/code&gt;, which
encompasses many different kinds of history-editing operations that are handled
in Mercurial by several different commands:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rebase&lt;/code&gt;
handles the case of moving commits from one branch to another&lt;/li&gt;
&lt;li&gt;&lt;code&gt;histedit&lt;/code&gt;
Interactively rewriting history (e.g. &lt;code&gt;git rebase -i&lt;/code&gt; except with an awesome
curses interface).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fold&lt;/code&gt;
Collapse several commits into a single commit.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;split&lt;/code&gt;
Split a single commit into many commits.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uncommit&lt;/code&gt;
Undoes a commit leaving the changes behind in the working directory.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that some of these commands are provided by the &lt;a href=&#34;https://www.mercurial-scm.org/wiki/EvolveExtension&#34;&gt;evolve
extension&lt;/a&gt; which enables
support for advanced history-editing workflows.&lt;/p&gt;
&lt;p&gt;Mercurial feels like a good fit for a deep dive at the recurse center for social
reasons as well.&lt;/p&gt;
&lt;h3 id=&#34;lots-of-data-structures-and-algorithms-to-explore&#34;&gt;Lots of data structures and algorithms to explore&lt;/h3&gt;
&lt;p&gt;For each revision in the history of a codebase, Mercurial must be able to
efficient reconstruct the state of the code at that revision, store the changes
to the code made by that revision, and index it in a way that makes it easy to
search for information related to that commit in a number of different ways. To
be able to parse the data output by Mercurial I&amp;rsquo;ll need to understand these
design constraints and reimplement some of the algorithms used by Mercurial on
my own. This will allow me to learn about &lt;a href=&#34;https://en.wikipedia.org/wiki/Merkle_tree&#34;&gt;Merkle
trees&lt;/a&gt;, the &lt;a href=&#34;https://www.mercurial-scm.org/wiki/Presentations?action=AttachFile&amp;amp;do=view&amp;amp;target=ols-mercurial-paper.pdf&#34;&gt;revlog data storage
scheme&lt;/a&gt;
implemented by Mercurial, and algorithms for merging and diffing text.&lt;/p&gt;
&lt;h3 id=&#34;friendly-community&#34;&gt;Friendly community&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;ve &lt;a href=&#34;https://www.mercurial-scm.org/repo/hg/log?rev=author%28Goldbaum%29&#34;&gt;participated in Mercurial
development&lt;/a&gt;
in the past and came away very happy with the experience. Development happens
via a mailing list or via &lt;a href=&#34;https://www.phacility.com/phabricator/&#34;&gt;phabricator&lt;/a&gt;
as well as on mailing lists and a relatively active &lt;a href=&#34;https://www.mercurial-scm.org/wiki/IRC&#34;&gt;IRC channel on
freenode&lt;/a&gt;. In addition one of the
maintainers has agreed to answer questions from me in exchange for me sending in
patches to clarify and expand on the documentation for Mercurial&amp;rsquo;s internals as
needed. Basically, I feel comfortable in my ability to access experts to get my
questions answered in a reasonable time frame as they come up.&lt;/p&gt;
&lt;h3 id=&#34;a-large-thoughtfully-structured-python-codebase&#34;&gt;A large, thoughtfully structured python codebase.&lt;/h3&gt;
&lt;p&gt;Mercurial is one of the largest and oldest continuously developed open source
Python codebases in existence. This means that the quality of the code tends to
be high, enforced by rigorous line-by-line code review of every commit. That&amp;rsquo;s
not to say there aren&amp;rsquo;t dusty corners with high WTF factors, but hopefully the
code I&amp;rsquo;ll need to read to understand how Mercurial works won&amp;rsquo;t be too incredibly
nasty for me to ever have a hope of decoding it.&lt;/p&gt;
&lt;h3 id=&#34;an-excuse-to-write-a-bunch-of-rust-code&#34;&gt;An excuse to write a bunch of rust code&lt;/h3&gt;
&lt;p&gt;Finally, I&amp;rsquo;m hoping to use this project as an excuse to learn more about the
rust programming language. My goal is to write as much code as possible in
rust. I have no expectation that the code I&amp;rsquo;ll be writing will be useful for
anyone, however there is a long-term plan to &lt;a href=&#34;https://www.mercurial-scm.org/wiki/OxidationPlan&#34;&gt;rewrite portions of Mercurial in
rust&lt;/a&gt;, so it&amp;rsquo;s possible that
some of the code I&amp;rsquo;ll be writing will be useful for the project as whole. I&amp;rsquo;m
excited to learn about rust because the idea of never needing to worry about
memory corruption or data races while writing low-level code makes me feel
tingly inside.&lt;/p&gt;
&lt;h2 id=&#34;whats-next-and-goals&#34;&gt;What&amp;rsquo;s next and goals&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ll first start with a dive into the &lt;code&gt;.hg&lt;/code&gt; directory of a real-world
repository. I&amp;rsquo;ll investigate the file structure and try to understand the way
Mercurial stores its data on-disk. Next, I&amp;rsquo;ll be writing parsers for some of the
data formats, and eventually hope to get to the point where I have a rust client
that can parse data from the repository. If I get to the point where I can do
&lt;code&gt;rust-hg log&lt;/code&gt; on a real-world repository, I will be very happy.&lt;/p&gt;
</description>
		</item>
	</channel>
</rss>
